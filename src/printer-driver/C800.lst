Sections:
00: "segc800" (C800-CCAD)


Source: "C800.s"
                        	     1: 
                        	     2: ;***********************************************************************
                        	     3: ;
                        	     4: ; This is the assembly code for the $C800 ROM - printer driver.
                        	     5: ;
                        	     6: ; The $C800 ROM is bank-switched in by the code in the $C100 ROM.
                        	     7: ;
                        	     8: ;***********************************************************************
                        	     9: 
                        	    10:         .include "common.s"

Source: "common.s"
                        	     1: ;***********************************************************************
                        	     2: ;
                        	     3: ; Common definitions for the $C100 and $C800 printer driver ROM's.
                        	     4: ;
                        	     5: ;***********************************************************************
                        	     6: ;
                        	     7: ; Zero page locations.
                        	     8: ;
                        	     9: TEMP0   .equ    $00         ; Temporary variable.
                        	    10: TEMP1   .equ    $01         ; Temporary variable.
                        	    11: TEMP2   .equ    $02         ; Temporary variable.
                        	    12: WNDLFT  .equ    $20         ; Left-most column of the text window (0-79).
                        	    13: WNDWTH  .equ    $21         ; Width of the text window (1-80).
                        	    14: WNDBTM  .equ    $22         ; Height of the text window (1-24).
                        	    15: CHORZ   .equ    $24         ; Horizontal offset of the cursor (0-WNDWTH-1).
                        	    16: CVERT   .equ    $25         ; Vertical offset of the cursor (0-WNDBTM-1).
                        	    17: INVFLG  .equ    $32         ; Inverse flag: $FF = normal, $3F = inverse.
                        	    18: OUTSW   .equ    $36         ; Address of the global character output routine.
                        	    19: ;
                        	    20: ; Main memory locations.
                        	    21: ;
                        	    22: STACK   .equ    $0100       ; System stack.
                        	    23: GRMODE  .equ    $0479       ; Epson graphics bit image mode, default is "K".
                        	    24: CHRINV  .equ    $04F9       ; Character to use to toggle inverse mode.
                        	    25: CHRGR   .equ    $0579       ; Character to use to toggle graphics mode.
                        	    26: CVTCRLF .equ    $05F9       ; 0 to convert CR into CRLF, 1 to not do that.
                        	    27: PRWID   .equ    $0679       ; Width of the page for printing.
                        	    28: PRHGR   .equ    $06F9       ; Graphics mode: 0=HGR1,2 1=HGR5,6 2=HGR3,4
                        	    29: PRMOD   .equ    $0779       ; Graphics printing mode bits.
                        	    30: PRCOL   .equ    $07F9       ; Current column for printing.
                        	    31: ;
                        	    32: ; I/O ports for the printer.
                        	    33: ;
                        	    34: PRWRITE .equ    $C090       ; Write data to printer.
                        	    35: PRACK   .equ    $C1C0       ; Read printer acknowledge.
                        	    36: PRBUSY  .equ    $C1C1       ; Read printer busy.
                        	    37: ;
                        	    38: ; ASCII characters.
                        	    39: ;
                        	    40: CH_LF   .equ    $0A
                        	    41: CH_CR   .equ    $0D
                        	    42: CH_ESC  .equ    $1B
                        	    43: ;
                        	    44: ; Bits in "PRMOD" that control graphics print options.
                        	    45: ;
                        	    46: MPAGE1  .equ    $01         ; Print graphics page 1.
                        	    47: MPAGE2  .equ    $02         ; Print graphics page 2.
                        	    48: MAND    .equ    $04         ; AND the two pages together to get the result.
                        	    49: MOR     .equ    $08         ; OR  the two pages together to get the result.
                        	    50: MEOF    .equ    $10         ; EOR the two pages together to get the result.
                        	    51: MINV    .equ    $20         ; Inverse printing.
                        	    52: MLARGE  .equ    $40         ; Enlarged printing.
                        	    53: MOPTION .equ    $80         ; Select option (used by text printing mode).
                        	    54: 

Source: "C800.s"
                        	    11:         .org    $C800
                        	    12: ;
                        	    13: ; Temporary variables and buffers that are used by graphics printing mode.
                        	    14: ;
                        	    15: VPAGE   .equ    $0280       ; Page to print: 1=$20, 2=$40, both=$60.
                        	    16: VOPTS   .equ    $0281       ; Printing options.
                        	    17: BUF1    .equ    $0282       ; Temporary buffer.
                        	    18: BUF2    .equ    $028A       ; Temporary buffer.
                        	    19: TEMP4   .equ    $0292       ; Temporary variable.
                        	    20: VOPTS2  .equ    $0293       ; More printing options.
                        	    21: TEMP5   .equ    $0294       ; Temporary variable.
                        	    22: VWIDTH  .equ    $07FF       ; Width of the graphics page in bytes (40 or 80).
                        	    23: ;
                        	    24: ; Jump table for the entry points to the ROM.
                        	    25: ;
00:C800 4C09C8          	    26:         jmp     PRCHAR      ; Print a character.
00:C803 4C89C8          	    27:         jmp     PRGRAPH     ; Print the graphics screen.
00:C806 4C28C9          	    28:         jmp     PREXIT      ; Restore registers and exit.
                        	    29: ;
                        	    30: ; Print the character in A.
                        	    31: ;
                        	    32: PRCHAR:
00:C809 EA              	    33:         nop
00:C80A 48              	    34:         pha
00:C80B AD7906          	    35:         lda     PRWID       ; Is the printer page 80 columns or less in width?
00:C80E C951            	    36:         cmp     #81
00:C810 B005            	    37:         bcs     NOECHO      ; If not, do not echo to the screen.
00:C812 68              	    38:         pla
00:C813 48              	    39:         pha
00:C814 200FF8          	    40:         jsr     $F80F       ; If yes, then echo the character to the screen.
                        	    41: NOECHO:
00:C817 68              	    42:         pla
00:C818 48              	    43:         pha
00:C819 48              	    44:         pha
                        	    45: SPCLOOP:
00:C81A ADF907          	    46:         lda     PRCOL       ; Is the print column less than the screen column?
00:C81D C524            	    47:         cmp     CHORZ
00:C81F 68              	    48:         pla
00:C820 B003            	    49:         bcs     COLOK
00:C822 48              	    50:         pha
00:C823 A9A0            	    51:         lda     #$A0        ; Set up to print spaces to advance the column.
                        	    52: COLOK:
00:C825 08              	    53:         php                 ; Save the result of the comparison above.
00:C826 C988            	    54:         cmp     #$88        ; Backspace character?
00:C828 D006            	    55:         bne     NOTBS
00:C82A CEF907          	    56:         dec     PRCOL       ; Move the printer column back one place.
00:C82D 4C38C8          	    57:         jmp     PRCHAR2
                        	    58: NOTBS:
                        	    59: ;
                        	    60: ; The "bit" instruction here AND's the A register with a $60 byte and
                        	    61: ; then tests if the result is zero.  This checks if A is in the range
                        	    62: ; $00-$1F or $80-$9F; i.e. is this a control character?
                        	    63: ;
00:C830 2C88C8          	    64:         bit     PREND       ; Determine if A is a control character.
00:C833 F003            	    65:         beq     PRCHAR2
00:C835 EEF907          	    66:         inc     PRCOL       ; Move the printer column forward one place.
                        	    67: PRCHAR2:
00:C838 206EC8          	    68:         jsr     PRASCII     ; Print the current character.
00:C83B 28              	    69:         plp                 ; Have we reached the right print column yet?
00:C83C 68              	    70:         pla                 ; Recover the original character we were printing.
00:C83D 48              	    71:         pha
00:C83E 90DA            	    72:         bcc     SPCLOOP     ; Go and print more spaces if not the right column.
00:C840 498D            	    73:         eor     #$8D        ; Did we print a CR?
00:C842 0A              	    74:         asl     a           ; Check for either $8D or $0D.
00:C843 D00F            	    75:         bne     PRCHAR3
00:C845 A901            	    76:         lda     #1          ; Reset the print head to column 1.
00:C847 8DF907          	    77:         sta     PRCOL
00:C84A ADF905          	    78:         lda     CVTCRLF     ; Should we convert CR into CRLF?
00:C84D D005            	    79:         bne     PRCHAR3
00:C84F A98A            	    80:         lda     #$8A        ; Print a LF.
00:C851 206EC8          	    81:         jsr     PRASCII
                        	    82: PRCHAR3:
00:C854 ADF907          	    83:         lda     PRCOL       ; Are we in column 1 just after a CR?
00:C857 C901            	    84:         cmp     #1
00:C859 F00B            	    85:         beq     PRCHAR4     ; If yes, then reset the screen column.
00:C85B ED7906          	    86:         sbc     PRWID       ; Have we reached the right margin plus 8?
00:C85E E9F8            	    87:         sbc     #$F8
00:C860 4CA0CC          	    88:         jmp     CHKMARGIN
                        	    89: ;
                        	    90: ; Unused code?
                        	    91: ;
00:C863 60              	    92:         rts
00:C864 D002            	    93:         bne     PRCEXIT
                        	    94: ;
                        	    95: PRCHAR4:
00:C866 A900            	    96:         lda     #0
                        	    97: PRCEXIT:
00:C868 8524            	    98:         sta     CHORZ       ; Update the screen column to match the printer.
                        	    99: PRCEXIT2:
00:C86A 68              	   100:         pla                 ; Discard the character we were printing.
00:C86B 4C28C9          	   101:         jmp     PREXIT      ; Return back to the caller.
                        	   102: ;
                        	   103: ; Print a character as ASCII.
                        	   104: ;
                        	   105: PRASCII:
00:C86E 08              	   106:         php
00:C86F 48              	   107:         pha
00:C870 ADF906          	   108:         lda     PRHGR       ; Are we printing graphics (MSB set to 1)?
00:C873 1005            	   109:         bpl     PRASCII2
00:C875 68              	   110:         pla
00:C876 0920            	   111:         ora     #$20        ; Add bit 5 if we are printing graphics.
00:C878 D001            	   112:         bne     PRASCII3    ; Branch always taken.
                        	   113: PRASCII2:
00:C87A 68              	   114:         pla                 ; Recover the character to be printed.
                        	   115: PRASCII3:
00:C87B 297F            	   116:         and     #$7F        ; Mask off the high bit to convert into real ASCII.
00:C87D 48              	   117:         pha
                        	   118: PRWAIT:
00:C87E ADC1C1          	   119:         lda     PRBUSY      ; Wait for the printer to not be busy.
00:C881 30FB            	   120:         bmi     PRWAIT
00:C883 68              	   121:         pla
00:C884 8D90C0          	   122:         sta     PRWRITE     ; Write the character to the printer.
00:C887 28              	   123:         plp
                        	   124: PREND:
00:C888 60              	   125:         rts
                        	   126: ;
                        	   127: ; Print the graphics screen to the printer using Epson dot matrix
                        	   128: ; graphics drawing commands.  The commands are described here:
                        	   129: ;
                        	   130: ; https://support2.epson.net/manuals/english/page/epl_n4000plus/ref_g/APCOM_3.HTM#FX%20mode%20B
                        	   131: ;
                        	   132: PRGRAPH:
00:C889 A524            	   133:         lda     CHORZ       ; Save the screen cursor position before we start.
00:C88B 48              	   134:         pha
00:C88C A525            	   135:         lda     CVERT
00:C88E 48              	   136:         pha
00:C88F A900            	   137:         lda     #0
00:C891 8D9302          	   138:         sta     VOPTS2      ; Bit zero = 0 for normal-size mode.
                        	   139: ;
                        	   140: ; Output "ESC A 0x08" to set the line spacing to 8/72 of an inch for graphics.
                        	   141: ;
00:C894 A91B            	   142:         lda     #CH_ESC
00:C896 207ECB          	   143:         jsr     PROUT
00:C899 A941            	   144:         lda     #$41
00:C89B 207ECB          	   145:         jsr     PROUT
00:C89E A908            	   146:         lda     #$08
00:C8A0 207ECB          	   147:         jsr     PROUT
                        	   148: ;
                        	   149: ; Determine which graphics page to print.  Bit 0 of PRMOD indicates page 1,
                        	   150: ; bit 1 indicates page 2.  If both bits are set, then print both pages as
                        	   151: ; the left and right halves of the same image.  If neither are set, then
                        	   152: ; nothing to print.
                        	   153: ;
00:C8A3 AD7907          	   154:         lda     PRMOD
00:C8A6 4A              	   155:         lsr     a
00:C8A7 B006            	   156:         bcs     GRPAGE1     ; Print page 1.
00:C8A9 4A              	   157:         lsr     a
00:C8AA B00E            	   158:         bcs     GRPAGE2     ; Print page 2.
00:C8AC 4C18C9          	   159:         jmp     GREXIT      ; Neither page should be printed.
                        	   160: GRPAGE1:
00:C8AF 4A              	   161:         lsr     a
00:C8B0 B004            	   162:         bcs     GRPAGE12    ; Print both pages.
00:C8B2 A020            	   163:         ldy     #$20
00:C8B4 D006            	   164:         bne     GROPTS      ; Branch always taken.
                        	   165: GRPAGE12:
00:C8B6 A060            	   166:         ldy     #$60
00:C8B8 D002            	   167:         bne     GROPTS      ; Branch always taken.
                        	   168: GRPAGE2:
00:C8BA A040            	   169:         ldy     #$40
                        	   170: ;
                        	   171: ; Process the printing options.
                        	   172: ;
                        	   173: GROPTS:
00:C8BC 8C8002          	   174:         sty     VPAGE
00:C8BF 4A              	   175:         lsr     a           ; Bit 2 means AND mode.
00:C8C0 B009            	   176:         bcs     GRAND
00:C8C2 4A              	   177:         lsr     a           ; Bit 3 means OR mode.
00:C8C3 B009            	   178:         bcs     GROR
00:C8C5 4A              	   179:         lsr     a           ; Bit 4 means EOR mode.
00:C8C6 B009            	   180:         bcs     GREOR
00:C8C8 A000            	   181:         ldy     #$00        ; Normal mode.
00:C8CA 2C              	   182:         .db     $2C         ; Skip the next instruction.
                        	   183: GRAND:
00:C8CB A080            	   184:         ldy     #$80        ; Activate AND mode.
00:C8CD 2C              	   185:         .db     $2C         ; Skip the next instruction.
                        	   186: GROR:
00:C8CE A040            	   187:         ldy     #$40        ; Activate OR mode.
00:C8D0 2C              	   188:         .db     $2C         ; Skip the next instruction.
                        	   189: GREOR:
00:C8D1 A0C0            	   190:         ldy     #$C0        ; Activate EOR mode.
00:C8D3 8C8102          	   191:         sty     VOPTS
00:C8D6 AD7907          	   192:         lda     PRMOD       ; Is inverse printing mode active?
00:C8D9 2920            	   193:         and     #MINV
00:C8DB F008            	   194:         beq     GROPTS2
00:C8DD A901            	   195:         lda     #1          ; Add bit 1 to the printing options.
00:C8DF 0D8102          	   196:         ora     VOPTS
00:C8E2 8D8102          	   197:         sta     VOPTS
                        	   198: GROPTS2:
00:C8E5 A9C0            	   199:         lda     #$C0        ; Is bit 6 or 7 of PRMOD set?
00:C8E7 2D7907          	   200:         and     PRMOD
00:C8EA F009            	   201:         beq     GRPRINT
00:C8EC 0A              	   202:         asl     a           ; Is bit 7 set?  Noting to do if it is.
00:C8ED B003            	   203:         bcs     GREXIT2
00:C8EF 4CFCCA          	   204:         jmp     GRENLARGE
                        	   205: GREXIT2:
00:C8F2 4C18C9          	   206:         jmp     GREXIT
                        	   207: ;
                        	   208: ; Print the selected graphics page.
                        	   209: ;
                        	   210: GRPRINT:
00:C8F5 A90A            	   211:         lda     #CH_LF      ; Print a line feed before starting the print.
00:C8F7 207ECB          	   212:         jsr     PROUT
00:C8FA AD8002          	   213:         lda     VPAGE       ; Are we printing both pages?
00:C8FD C960            	   214:         cmp     #$60
00:C8FF F036            	   215:         beq     GRBOTH
00:C901 A900            	   216:         lda     #0          ; Set up to print 24 "lines" of graphics data.
                        	   217: GRLINE:
00:C903 8525            	   218:         sta     CVERT
00:C905 207BC9          	   219:         jsr     GRPLINE
00:C908 A90A            	   220:         lda     #CH_LF      ; Terminate the line with a line feed.
00:C90A 207ECB          	   221:         jsr     PROUT
00:C90D 208BCB          	   222:         jsr     CHECKBRK    ; Check for CTRL-C to abort printing.
00:C910 E625            	   223:         inc     CVERT       ; Advance to the next line.
00:C912 A525            	   224:         lda     CVERT
00:C914 C918            	   225:         cmp     #24
00:C916 D0EB            	   226:         bne     GRLINE
                        	   227: ;
                        	   228: ; Output "ESC 2" to return to 1/6 inch line spacing for regular text printing.
                        	   229: ;
                        	   230: GREXIT:
00:C918 A91B            	   231:         lda     #CH_ESC
00:C91A 207ECB          	   232:         jsr     PROUT
00:C91D A932            	   233:         lda     #$32
00:C91F 207ECB          	   234:         jsr     PROUT
                        	   235: ;
                        	   236: ; Clean up and exit.
                        	   237: ;
00:C922 68              	   238:         pla
00:C923 8525            	   239:         sta     CVERT
00:C925 68              	   240:         pla
00:C926 8524            	   241:         sta     CHORZ
                        	   242: ;
                        	   243: ; Restore the registers from the stack and exit from the printer driver.
                        	   244: ;
                        	   245: PREXIT:
00:C928 68              	   246:         pla
00:C929 8502            	   247:         sta     TEMP2
00:C92B 68              	   248:         pla
00:C92C 8501            	   249:         sta     TEMP1
00:C92E 68              	   250:         pla
00:C92F 8500            	   251:         sta     TEMP0
00:C931 68              	   252:         pla
00:C932 A8              	   253:         tay
00:C933 68              	   254:         pla
00:C934 AA              	   255:         tax
00:C935 68              	   256:         pla
00:C936 60              	   257:         rts
                        	   258: ;
                        	   259: ; Print both graphics pages with page 1 on the left and page 2 on the right.
                        	   260: ;
                        	   261: GRBOTH:
00:C937 A928            	   262:         lda     #40         ; Width of a graphics page in bytes.
00:C939 8DFF07          	   263:         sta     VWIDTH
00:C93C A900            	   264:         lda     #0          ; Set up to print 24 "lines" of graphics data.
                        	   265: GRLINE2:
00:C93E 8525            	   266:         sta     CVERT
                        	   267: ;
                        	   268: ; Output "ESC K n m" where n + m*256 is the width of the line in pixels.
                        	   269: ;
00:C940 A91B            	   270:         lda     #CH_ESC
00:C942 207ECB          	   271:         jsr     PROUT
00:C945 AD7904          	   272:         lda     GRMODE      ; "K"
00:C948 207ECB          	   273:         jsr     PROUT
00:C94B A930            	   274:         lda     #<560       ; We will be printing 560 pixels.
00:C94D 207ECB          	   275:         jsr     PROUT
00:C950 A902            	   276:         lda     #>560
00:C952 207ECB          	   277:         jsr     PROUT
                        	   278: ;
                        	   279: ; Print page 1 in the left half.
                        	   280: ;
00:C955 A020            	   281:         ldy     #$20
00:C957 8C8002          	   282:         sty     VPAGE
00:C95A A900            	   283:         lda     #0
00:C95C 20BAC9          	   284:         jsr     GROUTLN
                        	   285: ;
                        	   286: ; Print page 2 in the right half.
                        	   287: ;
00:C95F A040            	   288:         ldy     #$40
00:C961 8C8002          	   289:         sty     VPAGE
00:C964 A900            	   290:         lda     #0
00:C966 20BAC9          	   291:         jsr     GROUTLN
                        	   292: ;
                        	   293: ; End of the current line of pixels.
                        	   294: ;
00:C969 A90A            	   295:         lda     #CH_LF      ; Print a line feed to terminate the line.
00:C96B 207ECB          	   296:         jsr     PROUT
00:C96E 208BCB          	   297:         jsr     CHECKBRK    ; Check for CTRL-C to abort printing.
00:C971 E625            	   298:         inc     CVERT       ; Advance to the next line.
00:C973 A525            	   299:         lda     CVERT
00:C975 C918            	   300:         cmp     #24
00:C977 D0C5            	   301:         bne     GRLINE2
00:C979 F09D            	   302:         beq     GREXIT      ; Done!
                        	   303: ;
                        	   304: ; Print a single line from either page 1 or page 2.
                        	   305: ;
                        	   306: GRPLINE:
00:C97B ADF906          	   307:         lda     PRHGR       ; Are we printing double-wide graphics (PRHGR=2)?
00:C97E 4A              	   308:         lsr     a
00:C97F 4A              	   309:         lsr     a
00:C980 B01C            	   310:         bcs     GRDBL
00:C982 A928            	   311:         lda     #40         ; Width of a graphics page in bytes.
00:C984 8DFF07          	   312:         sta     VWIDTH
                        	   313: ;
                        	   314: ; Output "ESC K n m" where n + m*256 is the width of the line in pixels.
                        	   315: ;
00:C987 A91B            	   316:         lda     #CH_ESC
00:C989 207ECB          	   317:         jsr     PROUT
00:C98C AD7904          	   318:         lda     GRMODE      ; "K"
00:C98F 207ECB          	   319:         jsr     PROUT
00:C992 A918            	   320:         lda     #<280       ; We will be printing 280 pixels.
00:C994 207ECB          	   321:         jsr     PROUT
00:C997 A901            	   322:         lda     #>280
00:C999 207ECB          	   323:         jsr     PROUT
00:C99C D01A            	   324:         bne     GRPLINE2
                        	   325: GRDBL:
00:C99E A91B            	   326:         lda     #CH_ESC
00:C9A0 207ECB          	   327:         jsr     PROUT
00:C9A3 AD7904          	   328:         lda     GRMODE      ; "K"
00:C9A6 207ECB          	   329:         jsr     PROUT
00:C9A9 A930            	   330:         lda     #<560       ; We will be printing 560 pixels.
00:C9AB 207ECB          	   331:         jsr     PROUT
00:C9AE A902            	   332:         lda     #>560
00:C9B0 207ECB          	   333:         jsr     PROUT
00:C9B3 A950            	   334:         lda     #80         ; Width of a double-wide graphics page in bytes.
00:C9B5 8DFF07          	   335:         sta     VWIDTH
                        	   336: GRPLINE2:
00:C9B8 A900            	   337:         lda     #0
                        	   338: ;
                        	   339: ; Output a line of pixels.
                        	   340: ;
                        	   341: GROUTLN:
00:C9BA 8524            	   342:         sta     CHORZ
00:C9BC 20CCC9          	   343:         jsr     GROUTLN2
00:C9BF 2052CA          	   344:         jsr     GRPRINTCOL
00:C9C2 E624            	   345:         inc     CHORZ       ; Are we done with this line?
00:C9C4 A524            	   346:         lda     CHORZ
00:C9C6 CDFF07          	   347:         cmp     VWIDTH
00:C9C9 90EF            	   348:         bcc     GROUTLN     ; No, then go back for the next line.
00:C9CB 60              	   349:         rts
                        	   350: ;
                        	   351: ; Compute the address of the line we are currently printing.
                        	   352: ;
                        	   353: GROUTLN2:
00:C9CC A525            	   354:         lda     CVERT       ; Get the line we are currently printing.
00:C9CE 291F            	   355:         and     #$1F
00:C9D0 48              	   356:         pha
00:C9D1 2918            	   357:         and     #$18        ; TEMP1 = (A & 0x18) * 10
00:C9D3 8501            	   358:         sta     TEMP1
00:C9D5 0A              	   359:         asl     a
00:C9D6 0A              	   360:         asl     a
00:C9D7 0501            	   361:         ora     TEMP1
00:C9D9 0A              	   362:         asl     a
00:C9DA 8501            	   363:         sta     TEMP1
00:C9DC 68              	   364:         pla
00:C9DD 2907            	   365:         and     #$07
00:C9DF 4A              	   366:         lsr     a
00:C9E0 6601            	   367:         ror     TEMP1
00:C9E2 0920            	   368:         ora     #$20
00:C9E4 8502            	   369:         sta     TEMP2
00:C9E6 8A              	   370:         txa
00:C9E7 48              	   371:         pha
00:C9E8 18              	   372:         clc
                        	   373: ;
                        	   374: ; Convert the 7 pixels in the current byte and apply AND/OR/EOR if necessary.
                        	   375: ;
00:C9E9 A207            	   376:         ldx     #7
                        	   377: GROUTLN3:
00:C9EB A424            	   378:         ldy     CHORZ       ; Get the byte we are currently printing.
                        	   379: ;
                        	   380: ; The following tests a byte in the monitor ROM for non-zero.  If it is
                        	   381: ; non-zero then we continue at GROUTLN4.  However, the byte in question at
                        	   382: ; $FB4A is zero!
                        	   383: ;
                        	   384: ; My guess is that when the alternate Pascal ROM's are loaded into the
                        	   385: ; emulator / language card, that $FB4A is non-zero.
                        	   386: ;
                        	   387: ; The kernel monitor uses a different memory bank mapping for Pascal, which
                        	   388: ; would affect the memory addresses of graphics pages.  So I guess this
                        	   389: ; is the Pascal version of screen printing, with the BASIC version later.
                        	   390: ;
00:C9ED AD4AFB          	   391:         lda     $FB4A       ; Load a zero byte from the monitor ROM.
00:C9F0 D003            	   392:         bne     GROUTLN4    ; Branch never taken!
00:C9F2 4CA3CB          	   393:         jmp     GROUTPAS
                        	   394: ;
                        	   395: GROUTLN4:
00:C9F5 B101            	   396:         lda     (TEMP1),y   ; Read a byte from page 1.
00:C9F7 9D8202          	   397:         sta     BUF1,X
00:C9FA A502            	   398:         lda     TEMP2
00:C9FC 291F            	   399:         and     #$1F
00:C9FE 0940            	   400:         ora     #$40        ; Switch to the other page in a double-wide setup.
00:CA00 8502            	   401:         sta     TEMP2
00:CA02 B101            	   402:         lda     (TEMP1),y   ; Read a byte from page 2.
00:CA04 9D8A02          	   403:         sta     BUF2,x
                        	   404: GROUT_2000:
00:CA07 A502            	   405:         lda     TEMP2
00:CA09 291F            	   406:         and     #$1F
00:CA0B 0920            	   407:         ora     #$20
00:CA0D 18              	   408:         clc
00:CA0E 6904            	   409:         adc     #4
00:CA10 8502            	   410:         sta     TEMP2
00:CA12 2C8102          	   411:         bit     VOPTS       ; Normal, AND, OR, or EOR mode?
00:CA15 301E            	   412:         bmi     GRMODECHK
00:CA17 7010            	   413:         bvs     GROR2
                        	   414: ;
                        	   415: ; Normal mode.
                        	   416: ;
00:CA19 AD8002          	   417:         lda     VPAGE       ; Are we printing page 1 or 2?
00:CA1C C940            	   418:         cmp     #$40
00:CA1E D02C            	   419:         bne     GROUTLN5
00:CA20 BD8A02          	   420:         lda     BUF2,x      ; We are printing page 2, so copy BUF2 to BUF1.
00:CA23 9D8202          	   421:         sta     BUF1,x
00:CA26 4C4CCA          	   422:         jmp     GROUTLN5
                        	   423: ;
                        	   424: ; OR mode.
                        	   425: ;
                        	   426: GROR2:
00:CA29 BD8A02          	   427:         lda     BUF2,x
00:CA2C 1D8202          	   428:         ora     BUF1,x
00:CA2F 9D8202          	   429:         sta     BUF1,x
00:CA32 4C4CCA          	   430:         jmp     GROUTLN5
                        	   431: ;
                        	   432: ; Figure out which of AND or EOR mode we are using.
                        	   433: ;
                        	   434: GRMODECHK:
00:CA35 700C            	   435:         bvs     GREOR2
                        	   436: ;
                        	   437: ; AND mode.
                        	   438: ;
00:CA37 BD8A02          	   439:         lda     BUF2,x
00:CA3A 3D8202          	   440:         and     BUF1,x
00:CA3D 9D8202          	   441:         sta     BUF1,x
00:CA40 4C4CCA          	   442:         jmp     GROUTLN5
                        	   443: ;
                        	   444: ; EOR mode.
                        	   445: ;
                        	   446: GREOR2:
00:CA43 BD8A02          	   447:         lda     BUF2,x
00:CA46 5D8202          	   448:         eor     BUF1,x
00:CA49 9D8202          	   449:         sta     BUF1,x
                        	   450: ;
                        	   451: GROUTLN5:
00:CA4C CA              	   452:         dex
00:CA4D 109C            	   453:         bpl     GROUTLN3
00:CA4F 68              	   454:         pla
00:CA50 AA              	   455:         tax
00:CA51 60              	   456:         rts
                        	   457: ;
                        	   458: ; Print seven columns of 8 pixels in graphics mode.
                        	   459: ;
                        	   460: GRPRINTCOL:
00:CA52 A007            	   461:         ldy     #7
                        	   462: GRSHIFT:                    ; Shift the pixel bits up by one.
00:CA54 B98202          	   463:         lda     BUF1,y      ; The top-most bit of each byte is for colour,
00:CA57 0A              	   464:         asl     a           ; so it isn't an actual pixel.
00:CA58 998202          	   465:         sta     BUF1,y
00:CA5B 88              	   466:         dey
00:CA5C 10F6            	   467:         bpl     GRSHIFT
00:CA5E 8A              	   468:         txa                 ; Save the original X,
00:CA5F 48              	   469:         pha
                        	   470: ;
00:CA60 A206            	   471:         ldx     #6          ; Combine the 8 vertical columns in BUF1
                        	   472: GRCOMBINE:                  ; into seven bytes in BUF2.
00:CA62 A007            	   473:         ldy     #7
                        	   474: GRCOMBINE2:
00:CA64 B98202          	   475:         lda     BUF1,y
00:CA67 0A              	   476:         asl     a
00:CA68 998202          	   477:         sta     BUF1,y
00:CA6B 3E8A02          	   478:         rol     BUF2,x
00:CA6E 88              	   479:         dey
00:CA6F 10F3            	   480:         bpl     GRCOMBINE2
00:CA71 CA              	   481:         dex
00:CA72 10EE            	   482:         bpl     GRCOMBINE
00:CA74 68              	   483:         pla                 ; Restore the original X.
00:CA75 AA              	   484:         tax
                        	   485: ;
00:CA76 A000            	   486:         ldy     #0
00:CA78 8C9202          	   487:         sty     TEMP4
                        	   488: GRPRINTCOL2:
00:CA7B AC9202          	   489:         ldy     TEMP4
00:CA7E AD8102          	   490:         lda     VOPTS       ; Is inverse printing mode active?
00:CA81 2901            	   491:         and     #$01
00:CA83 F008            	   492:         beq     GRNORMAL
00:CA85 B98A02          	   493:         lda     BUF2,y      ; If yes, invert the byte to be printed.
00:CA88 49FF            	   494:         eor     #$FF
00:CA8A 4C90CA          	   495:         jmp     GRINVERSE
                        	   496: GRNORMAL:
00:CA8D B98A02          	   497:         lda     BUF2,y
                        	   498: GRINVERSE:
00:CA90 48              	   499:         pha
00:CA91 AD9302          	   500:         lda     VOPTS2      ; Is double-size mode active?  Bit 0.
00:CA94 F013            	   501:         beq     GRPRINTCOL5
00:CA96 68              	   502:         pla
00:CA97 2C9302          	   503:         bit     VOPTS2      ; Are we printing the high or low 4 pixels of
00:CA9A 3006            	   504:         bmi     GRPRINTCOL3 ; this row in double-size mode?  Bit 7.
00:CA9C 20DACA          	   505:         jsr     GRHIGHDBL   ; Expand the high 4 pixels.
00:CA9F 4CA5CA          	   506:         jmp     GRPRINTCOL4
                        	   507: GRPRINTCOL3:
00:CAA2 20B8CA          	   508:         jsr     GRLOWDBL    ; Expand the low 4 pixels.
                        	   509: GRPRINTCOL4:
00:CAA5 48              	   510:         pha
00:CAA6 207ECB          	   511:         jsr     PROUT       ; Double-print the current column.
                        	   512: GRPRINTCOL5:
00:CAA9 68              	   513:         pla
00:CAAA 207ECB          	   514:         jsr     PROUT       ; Print the current column.
00:CAAD EE9202          	   515:         inc     TEMP4
00:CAB0 AD9202          	   516:         lda     TEMP4
00:CAB3 C907            	   517:         cmp     #7          ; Finished all 7 columns yet?
00:CAB5 D0C4            	   518:         bne     GRPRINTCOL2
00:CAB7 60              	   519:         rts
                        	   520: ;
                        	   521: ; Modify a byte for double-size mode.  Low 4 pixels.
                        	   522: ;
                        	   523: GRLOWDBL:
00:CAB8 8D9402          	   524:         sta     TEMP5
00:CABB A900            	   525:         lda     #$00
00:CABD 6E9402          	   526:         ror     TEMP5
00:CAC0 9002            	   527:         bcc     GRLOWDBL2
00:CAC2 0903            	   528:         ora     #$03
                        	   529: GRLOWDBL2:
00:CAC4 6E9402          	   530:         ror     TEMP5
00:CAC7 9002            	   531:         bcc     GRLOWDBL3
00:CAC9 090C            	   532:         ora     #$0C
                        	   533: GRLOWDBL3:
00:CACB 6E9402          	   534:         ror     TEMP5
00:CACE 9002            	   535:         bcc     GRLOWDBL4
00:CAD0 0930            	   536:         ora     #$30
                        	   537: GRLOWDBL4:
00:CAD2 6E9402          	   538:         ror     TEMP5
00:CAD5 9002            	   539:         bcc     GRLOWDBL5
00:CAD7 09C0            	   540:         ora     #$C0
                        	   541: GRLOWDBL5:
00:CAD9 60              	   542:         rts
                        	   543: ;
                        	   544: ; Modify a byte for double-size mode.  High 4 pixels.
                        	   545: ;
                        	   546: GRHIGHDBL:
00:CADA 8D9402          	   547:         sta     TEMP5
00:CADD A900            	   548:         lda     #$00
00:CADF 0E9402          	   549:         asl     TEMP5
00:CAE2 9002            	   550:         bcc     GRHIGHDBL2
00:CAE4 09C0            	   551:         ora     #$C0
                        	   552: GRHIGHDBL2:
00:CAE6 0E9402          	   553:         asl     TEMP5
00:CAE9 9002            	   554:         bcc     GRHIGHDBL3
00:CAEB 0930            	   555:         ora     #$30
                        	   556: GRHIGHDBL3:
00:CAED 0E9402          	   557:         asl     TEMP5
00:CAF0 9002            	   558:         bcc     GRHIGHDBL4
00:CAF2 090C            	   559:         ora     #$0C
                        	   560: GRHIGHDBL4:
00:CAF4 0E9402          	   561:         asl     TEMP5
00:CAF7 9002            	   562:         bcc     GRHIGHDBL5
00:CAF9 0903            	   563:         ora     #$03
                        	   564: GRHIGHDBL5:
00:CAFB 60              	   565:         rts
                        	   566: ;
                        	   567: ; Enlarged / double-size printing mode.
                        	   568: ;
                        	   569: GRENLARGE:
00:CAFC A90A            	   570:         lda     #CH_LF
00:CAFE 207ECB          	   571:         jsr     PROUT
00:CB01 A900            	   572:         lda     #0
                        	   573: GRENLARGE2:
00:CB03 8525            	   574:         sta     CVERT
00:CB05 2016CB          	   575:         jsr     GRLARGELN
00:CB08 208BCB          	   576:         jsr     CHECKBRK
00:CB0B E625            	   577:         inc     CVERT
00:CB0D A525            	   578:         lda     CVERT
00:CB0F C918            	   579:         cmp     #24
00:CB11 D0F0            	   580:         bne     GRENLARGE2
00:CB13 4C18C9          	   581:         jmp     GREXIT
                        	   582: ;
                        	   583: ; Print a line of enlarged pixels.
                        	   584: ;
                        	   585: GRLARGELN:
                        	   586: ;
                        	   587: ; Print the top 4 bits of each column in double-height mode.
                        	   588: ;
00:CB16 A91B            	   589:         lda     #CH_ESC     ; Output the length of the line in pixels.
00:CB18 207ECB          	   590:         jsr     PROUT
00:CB1B AD7904          	   591:         lda     GRMODE      ; "K"
00:CB1E 207ECB          	   592:         jsr     PROUT
00:CB21 A930            	   593:         lda     #<560       ; Double-wide is 560 pixels.
00:CB23 207ECB          	   594:         jsr     PROUT
00:CB26 A902            	   595:         lda     #>560
00:CB28 207ECB          	   596:         jsr     PROUT
00:CB2B A900            	   597:         lda     #0          ; Make sure we are left-aligned in the text window.
                        	   598: GRLARGELN2:
00:CB2D 8520            	   599:         sta     WNDLFT      ; (I think this should be CHORZ instead - bug?)
00:CB2F A901            	   600:         lda     #$01        ; Set double-size printing.
00:CB31 8D9302          	   601:         sta     VOPTS2
00:CB34 20CCC9          	   602:         jsr     GROUTLN2    ; Get the address of the current line.
00:CB37 2052CA          	   603:         jsr     GRPRINTCOL
00:CB3A E624            	   604:         inc     CHORZ       ; Move to the next column.
00:CB3C A524            	   605:         lda     CHORZ
00:CB3E C928            	   606:         cmp     #40
00:CB40 90EB            	   607:         bcc     GRLARGELN2
00:CB42 A90A            	   608:         lda     #CH_LF      ; End of the current line.
00:CB44 207ECB          	   609:         jsr     PROUT
                        	   610: ;
                        	   611: ; Print the bottom 4 bits of each column in double-height mode.
                        	   612: ;
00:CB47 A91B            	   613:         lda     #CH_ESC     ; Output the length of the line in pixels.
00:CB49 207ECB          	   614:         jsr     PROUT
00:CB4C AD7904          	   615:         lda     GRMODE      ; "K"
00:CB4F 207ECB          	   616:         jsr     PROUT
00:CB52 A930            	   617:         lda     #<560       ; Double-wide is 560 pixels.
00:CB54 207ECB          	   618:         jsr     PROUT
00:CB57 A902            	   619:         lda     #>560
00:CB59 207ECB          	   620:         jsr     PROUT
00:CB5C A900            	   621:         lda     #0          ; Make sure we are left-aligned in the text window.
                        	   622: GRLARGELN3:
00:CB5E 8524            	   623:         sta     CHORZ
00:CB60 A981            	   624:         lda     #$81        ; Set double-size printing, bottom 4 bits.
00:CB62 8D9302          	   625:         sta     VOPTS2
00:CB65 20CCC9          	   626:         jsr     GROUTLN2    ; Get the address of the current line.
00:CB68 2052CA          	   627:         jsr     GRPRINTCOL
00:CB6B E624            	   628:         inc     CHORZ       ; Move to the next column.
00:CB6D A524            	   629:         lda     CHORZ
00:CB6F C928            	   630:         cmp     #40
00:CB71 90EB            	   631:         bcc     GRLARGELN3
00:CB73 A900            	   632:         lda     #0          ; Disabvle double-size printing.
00:CB75 8D9302          	   633:         sta     VOPTS2
00:CB78 A90A            	   634:         lda     #CH_LF      ; End of the current line.
00:CB7A 207ECB          	   635:         jsr     PROUT
00:CB7D 60              	   636:         rts
                        	   637: ;
                        	   638: ; Output the byte in A to the printer.  Preserves all registers.
                        	   639: ;
                        	   640: PROUT:
00:CB7E 08              	   641:         php
00:CB7F 48              	   642:         pha
                        	   643: PRWAIT2:
00:CB80 ADC1C1          	   644:         lda     PRBUSY      ; Wait for the printer to not be busy.
00:CB83 30FB            	   645:         bmi     PRWAIT2
00:CB85 68              	   646:         pla
00:CB86 8D90C0          	   647:         sta     PRWRITE     ; Write the character to the printer.
00:CB89 28              	   648:         plp
00:CB8A 60              	   649:         rts
                        	   650: ;
                        	   651: ; Check if CTRL-C has been pressed and abort the print if it has.
                        	   652: ;
                        	   653: CHECKBRK:
00:CB8B AD00C0          	   654:         lda     $C000       ; Get the next keypress.
00:CB8E C983            	   655:         cmp     #$83        ; Was it CTRL-C?
00:CB90 F004            	   656:         beq     CHECKBRK2
00:CB92 2C10C0          	   657:         bit     $C010       ; If not, clear the key buffer and return.
00:CB95 60              	   658:         rts
                        	   659: CHECKBRK2:
00:CB96 2C10C0          	   660:         bit     $C010       ; Clear the CTRL-C from the key buffer.
00:CB99 A90A            	   661:         lda     #CH_LF      ; End the current in-progress line.
00:CB9B 207ECB          	   662:         jsr     PROUT
00:CB9E 68              	   663:         pla                 ; Pop the return address.
00:CB9F 68              	   664:         pla
00:CBA0 4C18C9          	   665:         jmp     GREXIT      ; Abort the print and return.
                        	   666: ;
                        	   667: ; Output a graphics line when the Pascal memory map is active.
                        	   668: ;
                        	   669: GROUTPAS:
00:CBA3 ADF906          	   670:         lda     PRHGR       ; Which graphics mode are we printing?
00:CBA6 4A              	   671:         lsr     a
00:CBA7 9003            	   672:         bcc     GROUTPAS2
00:CBA9 4C28CC          	   673:         jmp     GROUTPAS7
                        	   674: GROUTPAS2:
00:CBAC 4A              	   675:         lsr     a
00:CBAD B033            	   676:         bcs     GROUTPAS3
                        	   677: ;
                        	   678: ; Handle HGR1 and HGR2 in Pascal mode.
                        	   679: ;
00:CBAF 209ACC          	   680:         jsr     GETMAP
00:CBB2 48              	   681:         pha
00:CBB3 A900            	   682:         lda     #0
00:CBB5 2090CC          	   683:         jsr     REMAP
00:CBB8 A502            	   684:         lda     TEMP2
00:CBBA 48              	   685:         pha
00:CBBB 291F            	   686:         and     #$1F
00:CBBD 0960            	   687:         ora     #$60        ; Adjust the address for the Pascal memory map.
00:CBBF 8502            	   688:         sta     TEMP2
00:CBC1 B101            	   689:         lda     (TEMP1),y
00:CBC3 9D8202          	   690:         sta     BUF1,x
00:CBC6 A901            	   691:         lda     #1
00:CBC8 2090CC          	   692:         jsr     REMAP
00:CBCB A502            	   693:         lda     TEMP2
00:CBCD 291F            	   694:         and     #$1F
00:CBCF 0940            	   695:         ora     #$40
00:CBD1 8502            	   696:         sta     TEMP2
00:CBD3 B101            	   697:         lda     (TEMP1),y
00:CBD5 9D8A02          	   698:         sta     BUF2,x
00:CBD8 68              	   699:         pla
00:CBD9 8502            	   700:         sta     TEMP2
00:CBDB 68              	   701:         pla
00:CBDC 2090CC          	   702:         jsr     REMAP
00:CBDF 4C07CA          	   703:         jmp     GROUT_2000
                        	   704: ;
                        	   705: ; Handle HGR3 and HGR4 in Pascal mode.
                        	   706: ;
                        	   707: GROUTPAS3:
00:CBE2 209ACC          	   708:         jsr     GETMAP
00:CBE5 48              	   709:         pha
00:CBE6 A901            	   710:         lda     #1
00:CBE8 2090CC          	   711:         jsr     REMAP
00:CBEB A502            	   712:         lda     TEMP2
00:CBED 48              	   713:         pha
00:CBEE C028            	   714:         cpy     #40         ; Is the graphics mode double-wide?
00:CBF0 B00A            	   715:         bcs     GROUTPAS4
00:CBF2 291F            	   716:         and     #$1F
00:CBF4 0940            	   717:         ora     #$40
00:CBF6 2016CC          	   718:         jsr     GROUTPAS6
00:CBF9 4C0CCC          	   719:         jmp     GROUTPAS5
                        	   720: GROUTPAS4:
00:CBFC 98              	   721:         tya
00:CBFD 48              	   722:         pha
00:CBFE E928            	   723:         sbc     #40
00:CC00 A8              	   724:         tay
00:CC01 A502            	   725:         lda     TEMP2
00:CC03 291F            	   726:         and     #$1F
00:CC05 0960            	   727:         ora     #$60
00:CC07 2016CC          	   728:         jsr     GROUTPAS6
00:CC0A 68              	   729:         pla
00:CC0B A8              	   730:         tay
                        	   731: GROUTPAS5:
00:CC0C 68              	   732:         pla
00:CC0D 8502            	   733:         sta     TEMP2
00:CC0F 68              	   734:         pla
00:CC10 2090CC          	   735:         jsr     REMAP
00:CC13 4C07CA          	   736:         jmp     GROUT_2000
                        	   737: GROUTPAS6:
00:CC16 8502            	   738:         sta     TEMP2
00:CC18 B101            	   739:         lda     (TEMP1),y
00:CC1A 9D8202          	   740:         sta     BUF1,x
00:CC1D A902            	   741:         lda     #2
00:CC1F 2090CC          	   742:         jsr     REMAP
00:CC22 B101            	   743:         lda     (TEMP1),y
00:CC24 9D8A02          	   744:         sta     BUF2,x
00:CC27 60              	   745:         rts
                        	   746: ;
                        	   747: ; Handle HGR5 and HGR6 in Pascal mode.
                        	   748: ;
                        	   749: GROUTPAS7:
00:CC28 209ACC          	   750:         jsr     GETMAP
00:CC2B 48              	   751:         pha
00:CC2C A901            	   752:         lda     #1
00:CC2E 2090CC          	   753:         jsr     REMAP
00:CC31 A502            	   754:         lda     TEMP2
00:CC33 48              	   755:         pha
00:CC34 291F            	   756:         and     #$1F
00:CC36 0940            	   757:         ora     #$40
00:CC38 48              	   758:         pha
00:CC39 8502            	   759:         sta     TEMP2
00:CC3B B101            	   760:         lda     (TEMP1),y
00:CC3D 9D8202          	   761:         sta     BUF1,x
00:CC40 A502            	   762:         lda     TEMP2
00:CC42 0960            	   763:         ora     #$60
00:CC44 8502            	   764:         sta     TEMP2
00:CC46 B101            	   765:         lda     (TEMP1),y
00:CC48 1D8202          	   766:         ora     BUF1,x
00:CC4B 9D8202          	   767:         sta     BUF1,x
00:CC4E A902            	   768:         lda     #2
00:CC50 2090CC          	   769:         jsr     REMAP
00:CC53 68              	   770:         pla
00:CC54 48              	   771:         pha
00:CC55 8502            	   772:         sta     TEMP2
00:CC57 B101            	   773:         lda     (TEMP1),y
00:CC59 1D8202          	   774:         ora     BUF1,x
00:CC5C 9D8202          	   775:         sta     BUF1,x
00:CC5F A502            	   776:         lda     TEMP2
00:CC61 0960            	   777:         ora     #$60
00:CC63 B101            	   778:         lda     (TEMP1),y
00:CC65 9D8A02          	   779:         sta     BUF2,x
00:CC68 A903            	   780:         lda     #3
00:CC6A 2090CC          	   781:         jsr     REMAP
00:CC6D 68              	   782:         pla
00:CC6E 8502            	   783:         sta     TEMP2
00:CC70 B101            	   784:         lda     (TEMP1),y
00:CC72 1D8A02          	   785:         ora     BUF2,x
00:CC75 9D8A02          	   786:         sta     BUF2,x
00:CC78 A502            	   787:         lda     TEMP2
00:CC7A 0960            	   788:         ora     #$60
00:CC7C 8502            	   789:         sta     TEMP2
00:CC7E B101            	   790:         lda     (TEMP1),y
00:CC80 1D8A02          	   791:         ora     BUF2,x
00:CC83 9D8A02          	   792:         sta     BUF2,x
00:CC86 68              	   793:         pla
00:CC87 8502            	   794:         sta     TEMP2
00:CC89 68              	   795:         pla
00:CC8A 2090CC          	   796:         jsr     REMAP
00:CC8D 4C07CA          	   797:         jmp     GROUT_2000
                        	   798: ;
                        	   799: ; Change the mapping for the memory window $4000 - $7FFF.
                        	   800: ;
                        	   801: REMAP:
00:CC90 08              	   802:         php
00:CC91 48              	   803:         pha
00:CC92 290F            	   804:         and     #$0F
00:CC94 8D7DC0          	   805:         sta     $C07D
00:CC97 68              	   806:         pla
00:CC98 28              	   807:         plp
00:CC99 60              	   808:         rts
                        	   809: ;
                        	   810: ; Get the memory bank mapping for the memory window $4000 - $7FFF.
                        	   811: ;
                        	   812: GETMAP:
00:CC9A 08              	   813:         php
00:CC9B A5C6            	   814:         lda     $C6
00:CC9D 28              	   815:         plp
00:CC9E 60              	   816:         rts
                        	   817: ;
00:CC9F 6E              	   818:         db      $6E
                        	   819: ;
                        	   820: ; Check the margin.
                        	   821: ;
                        	   822: CHKMARGIN:
00:CCA0 B003            	   823:         bcs     CHKMARGIN2
00:CCA2 4C6AC8          	   824:         jmp     PRCEXIT2
                        	   825: CHKMARGIN2:
00:CCA5 6D7906          	   826:         adc     PRWID
00:CCA8 E908            	   827:         sbc     #8
00:CCAA 4C68C8          	   828:         jmp     PRCEXIT
                        	   829: 


Symbols by name:
BUF1                             E:0282
BUF2                             E:028A
CHECKBRK                         A:CB8B
CHECKBRK2                        A:CB96
CHKMARGIN                        A:CCA0
CHKMARGIN2                       A:CCA5
CHORZ                            E:0024
CH_ESC                           E:001B
CH_LF                            E:000A
COLOK                            A:C825
CVERT                            E:0025
CVTCRLF                          E:05F9
GETMAP                           A:CC9A
GRAND                            A:C8CB
GRBOTH                           A:C937
GRCOMBINE                        A:CA62
GRCOMBINE2                       A:CA64
GRDBL                            A:C99E
GRENLARGE                        A:CAFC
GRENLARGE2                       A:CB03
GREOR                            A:C8D1
GREOR2                           A:CA43
GREXIT                           A:C918
GREXIT2                          A:C8F2
GRHIGHDBL                        A:CADA
GRHIGHDBL2                       A:CAE6
GRHIGHDBL3                       A:CAED
GRHIGHDBL4                       A:CAF4
GRHIGHDBL5                       A:CAFB
GRINVERSE                        A:CA90
GRLARGELN                        A:CB16
GRLARGELN2                       A:CB2D
GRLARGELN3                       A:CB5E
GRLINE                           A:C903
GRLINE2                          A:C93E
GRLOWDBL                         A:CAB8
GRLOWDBL2                        A:CAC4
GRLOWDBL3                        A:CACB
GRLOWDBL4                        A:CAD2
GRLOWDBL5                        A:CAD9
GRMODE                           E:0479
GRMODECHK                        A:CA35
GRNORMAL                         A:CA8D
GROPTS                           A:C8BC
GROPTS2                          A:C8E5
GROR                             A:C8CE
GROR2                            A:CA29
GROUTLN                          A:C9BA
GROUTLN2                         A:C9CC
GROUTLN3                         A:C9EB
GROUTLN4                         A:C9F5
GROUTLN5                         A:CA4C
GROUTPAS                         A:CBA3
GROUTPAS2                        A:CBAC
GROUTPAS3                        A:CBE2
GROUTPAS4                        A:CBFC
GROUTPAS5                        A:CC0C
GROUTPAS6                        A:CC16
GROUTPAS7                        A:CC28
GROUT_2000                       A:CA07
GRPAGE1                          A:C8AF
GRPAGE12                         A:C8B6
GRPAGE2                          A:C8BA
GRPLINE                          A:C97B
GRPLINE2                         A:C9B8
GRPRINT                          A:C8F5
GRPRINTCOL                       A:CA52
GRPRINTCOL2                      A:CA7B
GRPRINTCOL3                      A:CAA2
GRPRINTCOL4                      A:CAA5
GRPRINTCOL5                      A:CAA9
GRSHIFT                          A:CA54
MINV                             E:0020
NOECHO                           A:C817
NOTBS                            A:C830
PRASCII                          A:C86E
PRASCII2                         A:C87A
PRASCII3                         A:C87B
PRBUSY                           E:C1C1
PRCEXIT                          A:C868
PRCEXIT2                         A:C86A
PRCHAR                           A:C809
PRCHAR2                          A:C838
PRCHAR3                          A:C854
PRCHAR4                          A:C866
PRCOL                            E:07F9
PREND                            A:C888
PREXIT                           A:C928
PRGRAPH                          A:C889
PRHGR                            E:06F9
PRMOD                            E:0779
PROUT                            A:CB7E
PRWAIT                           A:C87E
PRWAIT2                          A:CB80
PRWID                            E:0679
PRWRITE                          E:C090
REMAP                            A:CC90
SPCLOOP                          A:C81A
TEMP0                            E:0000
TEMP1                            E:0001
TEMP2                            E:0002
TEMP4                            E:0292
TEMP5                            E:0294
VOPTS                            E:0281
VOPTS2                           E:0293
VPAGE                            E:0280
VWIDTH                           E:07FF
WNDLFT                           E:0020

Symbols by value:
0000 TEMP0
0001 TEMP1
0002 TEMP2
000A CH_LF
001B CH_ESC
0020 MINV
0020 WNDLFT
0024 CHORZ
0025 CVERT
0280 VPAGE
0281 VOPTS
0282 BUF1
028A BUF2
0292 TEMP4
0293 VOPTS2
0294 TEMP5
0479 GRMODE
05F9 CVTCRLF
0679 PRWID
06F9 PRHGR
0779 PRMOD
07F9 PRCOL
07FF VWIDTH
C090 PRWRITE
C1C1 PRBUSY
C809 PRCHAR
C817 NOECHO
C81A SPCLOOP
C825 COLOK
C830 NOTBS
C838 PRCHAR2
C854 PRCHAR3
C866 PRCHAR4
C868 PRCEXIT
C86A PRCEXIT2
C86E PRASCII
C87A PRASCII2
C87B PRASCII3
C87E PRWAIT
C888 PREND
C889 PRGRAPH
C8AF GRPAGE1
C8B6 GRPAGE12
C8BA GRPAGE2
C8BC GROPTS
C8CB GRAND
C8CE GROR
C8D1 GREOR
C8E5 GROPTS2
C8F2 GREXIT2
C8F5 GRPRINT
C903 GRLINE
C918 GREXIT
C928 PREXIT
C937 GRBOTH
C93E GRLINE2
C97B GRPLINE
C99E GRDBL
C9B8 GRPLINE2
C9BA GROUTLN
C9CC GROUTLN2
C9EB GROUTLN3
C9F5 GROUTLN4
CA07 GROUT_2000
CA29 GROR2
CA35 GRMODECHK
CA43 GREOR2
CA4C GROUTLN5
CA52 GRPRINTCOL
CA54 GRSHIFT
CA62 GRCOMBINE
CA64 GRCOMBINE2
CA7B GRPRINTCOL2
CA8D GRNORMAL
CA90 GRINVERSE
CAA2 GRPRINTCOL3
CAA5 GRPRINTCOL4
CAA9 GRPRINTCOL5
CAB8 GRLOWDBL
CAC4 GRLOWDBL2
CACB GRLOWDBL3
CAD2 GRLOWDBL4
CAD9 GRLOWDBL5
CADA GRHIGHDBL
CAE6 GRHIGHDBL2
CAED GRHIGHDBL3
CAF4 GRHIGHDBL4
CAFB GRHIGHDBL5
CAFC GRENLARGE
CB03 GRENLARGE2
CB16 GRLARGELN
CB2D GRLARGELN2
CB5E GRLARGELN3
CB7E PROUT
CB80 PRWAIT2
CB8B CHECKBRK
CB96 CHECKBRK2
CBA3 GROUTPAS
CBAC GROUTPAS2
CBE2 GROUTPAS3
CBFC GROUTPAS4
CC0C GROUTPAS5
CC16 GROUTPAS6
CC28 GROUTPAS7
CC90 REMAP
CC9A GETMAP
CCA0 CHKMARGIN
CCA5 CHKMARGIN2
