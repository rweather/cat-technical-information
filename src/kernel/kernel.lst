Sections:
00: "segc300" (C300-C36B)
01: "segc36e" (C36E-C380)
02: "segc800" (C800-C841)
03: "segc847" (C847-C9A1)
04: "segc9aa" (C9AA-CCF3)
05: "segd571" (D571-D613)
06: "segf800" (F800-FA40)
07: "segfa40" (FA40-FB02)
08: "segfb02" (FB02-FBC1)
09: "segfbc1" (FBC1-FD0C)
0A: "segfd0c" (FD0C-FDDA)
0B: "segfdda" (FDDA-FEFD)
0C: "segfefd" (FEFD-FFA7)
0D: "segffa7" (FFA7-FFFA)
0E: "segfffa" (FFFA-0)


Source: "kernel.s"
                        	     1: 
                        	     2: ;;***********************************************************************
                        	     3: ;;
                        	     4: ;; Notes: This is a copy of the kernel 6502 assembly code from the
                        	     5: ;; CAT Technical Reference Manual, formatted for vasm.  There are some
                        	     6: ;; additions for code that is missing from the manual, based on Rhys
                        	     7: ;; Weatherley's personal disassembly of the ROM's in the 1980's.
                        	     8: ;;
                        	     9: ;; http://sun.hasenbraten.de/vasm/
                        	    10: ;;
                        	    11: ;; Assembling with vasm:
                        	    12: ;;
                        	    13: ;; vasm6502_oldstyle -Fihex -i32hex -c02 -o kernel.hex kernel.s
                        	    14: ;; vasm6502_oldstyle -quiet -DEPROM -Fbin -c02 -o kernel.bin kernel.s
                        	    15: ;;
                        	    16: ;; Some additional explanatory comments that were not in the manual
                        	    17: ;; have been added by Rhys Weatherley.  They are prefixed with ";;".
                        	    18: ;; The extra comments are placed into the public domain.
                        	    19: ;;
                        	    20: ;;***********************************************************************
                        	    21: 
                        	    22: ;;***********************************************************************
                        	    23: ;;
                        	    24: ;; Memory map from Chapter 5 of the Technical Reference Manual.
                        	    25: ;;
                        	    26: ;; There is 256K of memory, consisting of space for RAM, ROM, and I/O.
                        	    27: ;; The gate arrays on the board can remap 16K sections of the 6502's
                        	    28: ;; 64K memory space to any of the pages in the full 256K memory space.
                        	    29: ;;
                        	    30: ;;      $00000      64K of system RAM
                        	    31: ;;      $10000      64K of expansion RAM
                        	    32: ;;      $20000      64K of expansion RAM
                        	    33: ;;      $30000      Unused space
                        	    34: ;;      $38000      BASIC interpreter in ROM
                        	    35: ;;      $3C000      I/O space
                        	    36: ;;      $3D000      BASIC interpreter and kernel in ROM
                        	    37: ;;      $3FFFF      End of memory
                        	    38: ;;
                        	    39: ;; Some parts of the I/O space can be mapped to bank-switched ROM for
                        	    40: ;; initialization routines and specialised firmware:
                        	    41: ;;
                        	    42: ;;      $3C100-$3C1FF   Printer driver initialization firmware
                        	    43: ;;      $3C300-$3C3FF   80 column display initialization firmware
                        	    44: ;;      $3C800-$3CFFF   Printer driver firmware (bank-switched)
                        	    45: ;;      $3C800-$3CFFF   80 column display firmware (bank-switched)
                        	    46: ;;
                        	    47: ;; The kernel listing below includes the 80 column display firmware,
                        	    48: ;; but not the printer driver firmware.  That is on a separate ROM.
                        	    49: ;;
                        	    50: ;; Two methods are described in the "CAT Technical Reference Manual" to
                        	    51: ;; activate the 80 column display firmware.  The first under "I/O Map"
                        	    52: ;; says to JSR to address $3C300.  The second under "Important Kernel
                        	    53: ;; Routines" says to do the following sequence:
                        	    54: ;;
                        	    55: ;;          STA $CFFF       ; deselect all expansion ROM's
                        	    56: ;;          STA $C300       ; select the expansion ROM for $C300
                        	    57: ;;          JSR $CXXX       ; call a kernel routine within $C800-$CFFF
                        	    58: ;;
                        	    59: ;; Activating the printer driver firmware is similar, except use $C100.
                        	    60: ;;
                        	    61: ;;***********************************************************************
                        	    62: ;;
                        	    63: ;; The original kernel listing uses ORG and PHASE directives to
                        	    64: ;; relocate the code from its proper location at $C000 to $0000.
                        	    65: ;; This produces a binary image that is ready to flash into an EPROM
                        	    66: ;; at the EPROM's $0000 address, but which executes at address $C000.
                        	    67: ;;
                        	    68: ;; The macro "FORIGIN" sets the first origin for the file and the
                        	    69: ;; "ORIGIN" macro sets the subsequent origins.  We only do the
                        	    70: ;; relocation if the "EPROM" symbol is defined on the command-line.
                        	    71: ;;
                        	    72: ;; Unused space is filled with $FF bytes.  This probably wasn't the
                        	    73: ;; case with the original kernel ROM, but it makes it easier to flash
                        	    74: ;; the binary image into a modern EEPROM and then overwrite the
                        	    75: ;; intermediate sections with other code like the BASIC interpreter on
                        	    76: ;; a second pass.  The fill value can be changed in the macros below.
                        	    77: 
                        	    78:     ifdef EPROM
                        	    79:         MACRO ORIGIN
                        	    80:                 DEPHASE
                        	    81:                 FILL    \1-$C000-*,$FF
                        	    82:                 ORG     \1-$C000
                        	    83:                 PHASE   \1
                        	    84:         ENDM
                        	    85:         MACRO FORIGIN
                        	    86:                 ORG     $0000
                        	    87:                 FILL    \1-$C000,$FF
                        	    88:                 ORG     \1-$C000
                        	    89:                 PHASE   \1
                        	    90:         ENDM
                        	    91:     else
                        	    92:         MACRO ORIGIN
                        	    93:                 ORG     \1
                        	    94:         ENDM
                        	    95:         MACRO FORIGIN
                        	    96:                 ORG     \1
                        	    97:         ENDM
                        	    98:     endif
                        	    99: 
                        	   100: ;***********************************************************************
                        	   101: ;
                        	   102: ;       SYSTEM KERNEL
                        	   103: ;
                        	   104: ;       (C) COPYRIGHT
                        	   105: ;       1984 :
                        	   106: ;       V.T.L.
                        	   107: ;
                        	   108: ;***********************************************************************
                        	   109: 
                        	   110:         INCLUDE memmap.s

Source: "memmap.s"
                        	     1: 
                        	     2: ;; Useful locations in RAM.
                        	     3: 
                        	     4: ;***********************************************************************
                        	     5: ;
                        	     6: ;       SYSTEM KERNEL
                        	     7: ;
                        	     8: ;       (C) COPYRIGHT
                        	     9: ;       1984 :
                        	    10: ;       V.T.L.
                        	    11: ;
                        	    12: ;***********************************************************************
                        	    13: ;
                        	    14: ; ZERO PAGE EQUATES
                        	    15: ;
                        	    16: WNDLFT      EQU     $20     ;; Left-most column of the text window (0-79)
                        	    17: WNDWTH      EQU     $21     ;; Width of the text window (1-80)
                        	    18: WNDTOP      EQU     $22     ;; Top-most line of the text window (0-22)
                        	    19: WNDBTM      EQU     $23     ;; Bottom-most line of the text window (1-24)
                        	    20: CHORZ       EQU     $24     ;; Horizontal offset of the cursor (0-WNDWTH-1)
                        	    21: CVERT       EQU     $25     ;; Veritical offset of the cursor (0-WNDBTM-1)
                        	    22: FKEYPL      EQU     $26     ;; Function key definition pointer (low)
                        	    23: FKEYPH      EQU     $27     ;; Function key definition pointer (high)
                        	    24: SBASL       EQU     $28     ;; Screen base address 1 (low)
                        	    25: SBASH       EQU     $29     ;; Screen base address 1 (high)
                        	    26: SBAS2L      EQU     $2A     ;; Screen base address 2 (low)
                        	    27: SBAS2H      EQU     $2B     ;; Screen base address 2 (high)
                        	    28: CHKSUM      EQU     $2E
                        	    29: OPCODL      EQU     $2F     ;; Opcode length in the kernel monitor
                        	    30: LASTBI      EQU     $2F
                        	    31: STOFLG      EQU     $31     ;; Flag for the kernel doing a store command
                        	    32: INVFLG      EQU     $32     ;; Normal=$FF, Inverse=$3F, Blinking=$7F
                        	    33: PROMPT      EQU     $33     ;; Prompt character with MSB set ($DD = ']')
                        	    34: SAVEX       EQU     $34
                        	    35: SAVEY       EQU     $35
                        	    36: OUTSWL      EQU     $36     ;; Address of the character output routine (low)
                        	    37: OUTSWH      EQU     $37     ;; Address of the character output routine (high)
                        	    38: INSWL       EQU     $38     ;; Address of the character input routine (low)
                        	    39: INSWH       EQU     $39     ;; Address of the character input routine (high)
                        	    40: PCL         EQU     $3A     ;; Saved PC register for BREAK (low)
                        	    41: PCH         EQU     $3B     ;; Saved PC register for BREAK (high)
                        	    42: REG1L       EQU     $3C     ;; First address for a kernel operation (low)
                        	    43: REG1H       EQU     $3D     ;; First address for a kernel operation (high)
                        	    44: REG2L       EQU     $3E     ;; Second address for a kernel operation (low)
                        	    45: REG2H       EQU     $3F     ;; Second address for a kernel operation (high)
                        	    46: REG4L       EQU     $42     ;; Fourth address for a kernel operation (low)
                        	    47: REG4H       EQU     $43     ;; Fourth address for a kernel operation (high)
                        	    48: ACC         EQU     $45     ;; Saved A register for BREAK
                        	    49: REGX        EQU     $46     ;; Saved X register for BREAK
                        	    50: REGY        EQU     $47     ;; Saved Y register for BREAK
                        	    51: STATUS      EQU     $48     ;; Saved P register for BREAK
                        	    52: STACKP      EQU     $49     ;; Saved SP register for BREAK
                        	    53: RNDNOL      EQU     $4E     ;; Random number seed (low)
                        	    54: RNDNOH      EQU     $4F     ;; Random number seed (high)
                        	    55: TXTABL      EQU     $67
                        	    56: TXTABH      EQU     $68
                        	    57: PBANK1      EQU     $C5     ;; Page that is selected for memory bank 1 (0-15)
                        	    58: PBANK2      EQU     $C6     ;; Page that is selected for memory bank 2 (0-15)
                        	    59: PBANK3      EQU     $C7     ;; Page that is selected for memory bank 3 (0-15)
                        	    60: PBANK4      EQU     $C8     ;; Page that is selected for memory bank 4 (0-15)
                        	    61: ;
                        	    62: ; SLOT 0 EQUATES
                        	    63: ;
                        	    64: SAVE1       EQU     $778    ;; Saves window width in 'TUGGLE' subroutine
                        	    65: ;
                        	    66: ; SLOT 3 EQUATES
                        	    67: ;
                        	    68: TEMPY       EQU     $4FB
                        	    69: TXTMOD      EQU     $57B    ;; $04 for 40-column text, $10 for 80-column text
                        	    70: TEMPX       EQU     $5FB
                        	    71: BYTE        EQU     $67B    ;; Byte read by KEYIN or output character
                        	    72: TEMPA       EQU     $6FB    ;; Character under the cursor position
                        	    73: POWER       EQU     $77B
                        	    74: CHWHO       EQU     $47B    ;; Horizontal position for output with "IO"
                        	    75: CVWHO       EQU     $7FB    ;; Vertical position for output with "IO"
                        	    76: ;
                        	    77: ; OTHER RAM LOC. EQUATES
                        	    78: ;
                        	    79: STACK       EQU     $100    ;; Stack
                        	    80: KEYBUF      EQU     $200    ;; Keyboard buffer
                        	    81: BRKVER      EQU     $3F0    ;; Address of BRK handler
                        	    82: RESTVR      EQU     $3F2    ;; Address of the soft RESET handler
                        	    83: PWRIND      EQU     $3F4    ;; Power-on indicator to detect hard-vs-soft RESET
                        	    84: USRADR      EQU     $3F8
                        	    85: NMIADR      EQU     $3FB    ;; NMI interrupts jump to here
                        	    86: IRQVER      EQU     $3FE    ;; Address of the IRQ handler
                        	    87: KEYFLG      EQU     $4800
                        	    88: 

Source: "kernel.s"
                        	   111:         INCLUDE iomap.s

Source: "iomap.s"
                        	     1: 
                        	     2: ;; Useful definitions for I/O.
                        	     3: 
                        	     4: ;***********************************************************************
                        	     5: ;
                        	     6: ;       SYSTEM KERNEL
                        	     7: ;
                        	     8: ;       (C) COPYRIGHT
                        	     9: ;       1984 :
                        	    10: ;       V.T.L.
                        	    11: ;
                        	    12: ;***********************************************************************
                        	    13: ;
                        	    14: ; I/O EQUATES
                        	    15: ;
                        	    16: ;; See Chapter 2 of the "CAT Technical Reference Manual", for a description
                        	    17: ;; of the I/O map.  In particular, "Software Switches" and "Internal I/O".
                        	    18: ;;
                        	    19: ;; Software switches are activated by writing any value to the address.
                        	    20: ;; Not all of these are used by the kernel code.  Provided for documentation
                        	    21: ;; purposes to help understand how the switches actually work.
                        	    22: ;
                        	    23: KEYBRD      EQU     $C000   ;; Read keyboard data
                        	    24: KEYSTR      EQU     $C010   ;; Clear keyboard strobe
                        	    25: BKDROP      EQU     $C008   ;; Set border colour to black
                        	    26: BKDROP1     EQU     $C009   ;; Set border colour to red
                        	    27: BKDROP2     EQU     $C00A   ;; Set border colour to green
                        	    28: BKDROP3     EQU     $C00B   ;; Set border colour to yellow
                        	    29: BKDROP4     EQU     $C00C   ;; Set border colour to blue
                        	    30: BKDROP5     EQU     $C00D   ;; Set border colour to magenta
                        	    31: BKDROP6     EQU     $C00E   ;; Set border colour to cyan
                        	    32: BKDROP7     EQU     $C00F   ;; Set border colour to white
                        	    33: BKGRND      EQU     $C018   ;; Set background colour to black
                        	    34: BKGRND1     EQU     $C019   ;; Set background colour to red
                        	    35: BKGRND2     EQU     $C01A   ;; Set background colour to green
                        	    36: BKGRND3     EQU     $C01B   ;; Set background colour to yellow
                        	    37: BKGRND4     EQU     $C01C   ;; Set background colour to blue
                        	    38: BKGRND5     EQU     $C01D   ;; Set background colour to magenta
                        	    39: BKGRND6     EQU     $C01E   ;; Set background colour to cyan
                        	    40: BKGRND7     EQU     $C01F   ;; Set background colour to white
                        	    41: TAPEOU      EQU     $C020   ;; Cassette output
                        	    42: TEXTCR      EQU     $C028   ;; Enable multi colour mode
                        	    43: TEXTCR1     EQU     $C029   ;; Set to single colour mode with red pixels
                        	    44: TEXTCR2     EQU     $C02A   ;; Set to single colour mode with green pixels
                        	    45: TEXTCR3     EQU     $C02B   ;; Set to single colour mode with yellow pixels
                        	    46: TEXTCR4     EQU     $C02C   ;; Set to single colour mode with blue pixels
                        	    47: TEXTCR5     EQU     $C02D   ;; Set to single colour mode with magenta pixels
                        	    48: TEXTCR6     EQU     $C02E   ;; Set to single colour mode with cyan pixels
                        	    49: TEXTCR7     EQU     $C02F   ;; Set to single colour mode with white pixels
                        	    50: SPEAKR      EQU     $C030   ;; Toggle speaker
                        	    51: VZTX40      EQU     $C04C   ;; Set to low resolution mode
                        	    52: VZGRGB      EQU     $C04D   ;; Set to RGB mode
                        	    53: VZGHGH      EQU     $C04E   ;; Set to high resolution mode
                        	    54: VZTX80      EQU     $C04F   ;; Set to 80-column mode
                        	    55: VZGRPH      EQU     $C050   ;; Set to graphics mode
                        	    56: VZTEXT      EQU     $C051   ;; Set to text mode
                        	    57: VZTEXT1     EQU     $C052   ;; Set to pure text or graphics mode
                        	    58: VZTEXT2     EQU     $C053   ;; Set to mixed text or graphics mode
                        	    59: VZPAG1      EQU     $C054   ;; Display primary graphics page
                        	    60: VZPAG2      EQU     $C055   ;; Display secondary graphics page
                        	    61: VZSELF      EQU     $C056   ;; Turn off emulation
                        	    62: VZEMUL      EQU     $C057   ;; Set emulation only
                        	    63: TAPEIN      EQU     $C060   ;; Cassette input
                        	    64: BINFLG0     EQU     $C061   ;; Binary flag 1 input
                        	    65: BINFLG1     EQU     $C062   ;; Binary flag 2 input
                        	    66: BINFLG2     EQU     $C063   ;; Binary flag 3 input
                        	    67: PADDL0      EQU     $C064   ;; Game paddle 1 input
                        	    68: PADDL1      EQU     $C065   ;; Game paddle 2 input
                        	    69: PADDL2      EQU     $C066   ;; Game paddle 3 input
                        	    70: PADDL3      EQU     $C067   ;; Game paddle 4 input
                        	    71: SONGEN      EQU     $C068   ;; Write data to 76489 sound generator
                        	    72: PDLRES      EQU     $C070   ;; Analog clear
                        	    73: SYSTEM      EQU     $C078
                        	    74: SBANK1      EQU     $C07C   ;; Select memory bank for memory window 0 (0-15)
                        	    75: SBANK2      EQU     $C07D   ;; Select memory bank for memory window 1 (0-15)
                        	    76: SBANK3      EQU     $C07E   ;; Select memory bank for memory window 2 (0-15)
                        	    77: SBANK4      EQU     $C07F   ;; Select memory bank for memory window 3 (0-15)
                        	    78: PRINTR      EQU     $C090   ;; Write data to printer
                        	    79: PRTACK      EQU     $C1C0   ;; Read printer acknowledge
                        	    80: PRTBSY      EQU     $C1C1   ;; Read printer busy
                        	    81: HORZSC      EQU     $C1C2   ;; Read horizontal blanking
                        	    82: VERTSC      EQU     $C1C3   ;; Read vertical blanking
                        	    83: LINFRQ      EQU     $C1C4   ;; Read 50/60Hz status
                        	    84: TWOMHZ      EQU     $C1C5   ;; Read high resolution switch (SWR1) status
                        	    85: ROMCLR      EQU     $CFFF   ;; Clear ROM bank switching
                        	    86: 

Source: "kernel.s"
                        	   112: ;
                        	   113: ;; Locations in other ROM's that the kernel uses.
                        	   114: ;
                        	   115: ; ROM EQUATES
                        	   116: ;
                        	   117: BASICC      EQU     $E000   ;; BASIC ROM entry point for cold start
                        	   118: BASICW      EQU     $E003   ;; BASIC ROM entry point for warm start
                        	   119: HRSEXT      EQU     $F1BD   ;; Restore the mapping for memory bank 3
                        	   120: RENEW       EQU     $F229   ;; ???
                        	   121: NORMAL      EQU     $F23C   ;; Set text to normal
                        	   122: ;
                        	   123: ;; 80-column mode initialization routines.
                        	   124: ;
                        	   125:             FORIGIN $C300
                        	     1M                 ORG     $C300
                        	   126: ;
                        	   127: ; SOME SIGNATURE BYTES EXIST HERE
                        	   128: ; THEY ARE RECOGNIZED BY CP/M AND PASCAL
                        	   129: ; REMARKS:
                        	   130: ; CP/M AND PASCAL DISTINGUISH DEVICES BY
                        	   131: ; CHECKING CN05 AND CN07
                        	   132: ;
00:C300 2C0FC3          	   133:             BIT     IORTS       ; ENTER HERE AT THE FIRST TIME
00:C303 7004            	   134:             BVS     ENTER       ; BRANCH ALWAYS
00:C305 38              	   135: INENT       SEC                 ; FROM SECOND TIME ON (CN05)
00:C306 90              	   136:             DB      $90
00:C307 18              	   137: OUTENT      CLC                 ; FROM SECOND TIME ON (CN07)
00:C308 B8              	   138:             CLV
00:C309 8DFFCF          	   139: ENTER       STA     ROMCLR      ; BRING C800 IN
00:C30C 2010C3          	   140:             JSR     ROAD        ; MUST GO THROUGH THIS WAY
00:C30F 60              	   141: IORTS       RTS
                        	   142: ;
                        	   143: ;
00:C310 48              	   144: ROAD        PHA                 ; SAVE EVERYTHING
00:C311 8A              	   145:             TXA
00:C312 48              	   146:             PHA
00:C313 98              	   147:             TYA
00:C314 48              	   148:             PHA
00:C315 08              	   149:             PHP                 ; INCLUDING STATUS
00:C316 BA              	   150:             TSX                 ; USED TO GET A FROM STACK
00:C317 BD0401          	   151:             LDA     STACK+4,X
00:C31A 28              	   152:             PLP                 ; RECOVER STATUS
00:C31B 48              	   153:             PHA                 ; SAVE CHARACTER
00:C31C 7003            	   154:             BVS     *+5         ; FIRST TIME?
00:C31E 4C30CC          	   155:             JMP     IO          ; NO
00:C321 AD4AFB          	   156:             LDA     SIGNAT      ; WHO ARE YOU?
00:C324 D02A            	   157:             BNE     WHO         ; VISITOR?  ;; non-zero = visitor, zero = us
                        	   158: ;; Set up for BASIC
00:C326 2001C8          	   159:             JSR     SETUP
00:C329 A900            	   160:             LDA     #$00        ; BASIC, NOT
00:C32B 8D7B07          	   161:             STA     POWER       ; PASCAL OR CP/M
00:C32E A902            	   162:             LDA     #2          ; INFORM BASIC OF THE CHANGE
00:C330 85C5            	   163:             STA     PBANK1      ;; Memory bank 1 @ $0000 = $08000 (RAM)
00:C332 A901            	   164:             LDA     #1
00:C334 85C6            	   165:             STA     PBANK2      ;; Memory bank 2 @ $4000 = $04000 (RAM)
00:C336 A9C3            	   166:             LDA     #>OUTMED    ; FORM MEDIA
00:C338 8539            	   167:             STA     INSWH
00:C33A 8537            	   168:             STA     OUTSWH      ;; Set character output routine to MCOUT1
00:C33C A94D            	   169:             LDA     #<INMED
00:C33E 8538            	   170:             STA     INSWL       ;; Set character input routine to MINKEY
00:C340 A94A            	   171:             LDA     #<OUTMED
00:C342 8536            	   172:             STA     OUTSWL
00:C344 68              	   173:             PLA                 ; RELEASE STACK
00:C345 68              	   174:             PLA
00:C346 A8              	   175:             TAY
00:C347 68              	   176:             PLA
00:C348 AA              	   177:             TAX
00:C349 68              	   178:             PLA                 ; GET BACK CHARACTER ;; ... to be output
                        	   179: ;
                        	   180: ;
00:C34A 4CF0FD          	   181: OUTMED      JMP     MCOUT1      ; MEDIA ONLY
00:C34D 4C1BFD          	   182: INMED       JMP     MINKEY
                        	   183: ;
                        	   184: ;
00:C350 20CACC          	   185: WHO         JSR     TUGGLE      ; DO INITIALIZATION
00:C353 2001C8          	   186:             JSR     SETUP
00:C356 20CACC          	   187:             JSR     TUGGLE
00:C359 A9C3            	   188:             LDA     #>INENT     ;; Set character input routine to INENT
00:C35B 8539            	   189:             STA     INSWH
00:C35D 8537            	   190:             STA     OUTSWH
00:C35F A905            	   191:             LDA     #<INENT
00:C361 8538            	   192:             STA     INSWL
00:C363 A907            	   193:             LDA     #<OUTENT    ;; Set character output routine to OUTENT
00:C365 8536            	   194:             STA     OUTSWL
00:C367 18              	   195:             CLC                 ; THEN DO OUTPUT
00:C368 4C30CC          	   196:             JMP     IO
                        	   197: ;
                        	   198: ;
                        	   199: ;*******************************************
                        	   200: ;*** FOR RS232 INTERFACE USAGE           ***
                        	   201: ;*** ICHRDIR: DISPLAY CHARACTER ON SCREEN***
                        	   202: ;*** IENCUR: TURN ON CURSOR              ***
                        	   203: ;*** DON'T RELOCATE THE FOLLOWING CODES  ***
                        	   204: ;*******************************************
                        	   205: ;
                        	   206:             ORIGIN  $C36E
                        	     1M                 ORG     $C36E
01:C36E 08              	   207: ICHRDIS     PHP                 ; SAVE STATUS
01:C36F 8DFFCF          	   208:             STA     ROMCLR      ; ENABLE C800 ROM
01:C372 2054CB          	   209:             JSR     CHRDIS      ; DISPLAY IT
01:C375 28              	   210:             PLP                 ; RESUME STATUS
01:C376 60              	   211:             RTS
                        	   212: ;
                        	   213: ;
01:C377 08              	   214: IENCHR      PHP
01:C378 8DFFCF          	   215:             STA     ROMCLR      ; ENABLE C800 ROM
01:C37B 20A0CB          	   216:             JSR     ENCUR       ; TURN CURSOR ON
01:C37E 28              	   217:             PLP
01:C37F 60              	   218:             RTS
                        	   219: ;
                        	   220: ;
                        	   221: ;; Start of the 80-column display firmware.
                        	   222: ;
                        	   223:             ORIGIN  $C800
                        	     1M                 ORG     $C800
02:C800 60              	   224:             RTS
                        	   225: ;
                        	   226: ;; Set up for 80-column text mode.
                        	   227: ;
02:C801 202DC9          	   228: SETUP       JSR     WBANK       ; REFORM MEMORY ASSIGNMENT
02:C804 2022C8          	   229:             JSR     SETWND      ; SET UP SCREEN SIZE
02:C807 A990            	   230:             LDA     #$90
02:C809 8D7B07          	   231:             STA     POWER       ; SETUP ONCE IS ENOUGH
02:C80C A9A0            	   232:             LDA     #$A0        ; CLEAR TEMPA
02:C80E 8DFB06          	   233:             STA     TEMPA
02:C811 2CC3C1          	   234:             BIT     VERTSC      ; CHANGE SCREEN DURING THE
02:C814 30FB            	   235:             BMI     *-3         ; VERTICAL RETRACE PERIOD
02:C816 AD56C0          	   236:             LDA     VZSELF      ; TURN TO
02:C819 AD51C0          	   237:             LDA     VZTEXT      ; 80 COLUMN TEXT DISPLAY
02:C81C AD4FC0          	   238:             LDA     VZTX80
02:C81F 4C76CA          	   239:             JMP     CLSCRN      ; CLEAR SCREEN
                        	   240: ;
                        	   241: ;; Set the initial window size for 80-column text mode.
                        	   242: ;
02:C822 A900            	   243: SETWND      LDA     #0          ; FULL SCREEN SIZE: 24*80
02:C824 8522            	   244:             STA     WNDTOP
02:C826 8520            	   245:             STA     WNDLFT
02:C828 A918            	   246:             LDA     #24
02:C82A 8523            	   247:             STA     WNDBTM
02:C82C A950            	   248:             LDA     #80
02:C82E 8521            	   249:             STA     WNDWTH
02:C830 A910            	   250:             LDA     #$10        ;; Tell the rest of the kernel that we
02:C832 8D7B05          	   251:             STA     TXTMOD      ;; are now in 80-column text mode.
02:C835 60              	   252:             RTS
                        	   253: ;
                        	   254: ;; Modify a screen base address to flip between the bank at $0000 and $4000.
                        	   255: ;
02:C836 08              	   256: COMPAT      PHP                 ; ALWAYS BE SAFE
02:C837 48              	   257:             PHA
02:C838 A529            	   258:             LDA     SBASH
02:C83A 4940            	   259:             EOR     #$40
02:C83C 8529            	   260:             STA     SBASH
02:C83E 68              	   261:             PLA
02:C83F 28              	   262:             PLP
02:C840 60              	   263:             RTS
                        	   264: ;
                        	   265: ; IN#8 ENTRY POINTS
                        	   266: ;
                        	   267:             ORIGIN  $C847
                        	     1M                 ORG     $C847
03:C847 4CF6CB          	   268:             JMP     ESCX
03:C84A 4C97CA          	   269:             JMP     CLREOL
                        	   270: ;
                        	   271: ; PASCAL AND CP/M INPUT ENTRY POINT
                        	   272: ;
03:C84D 200DCC          	   273: KEYIN       JSR     RAM0IN      ; CHECK FUNCTION KEY FLAG
03:C850 AD0048          	   274:             LDA     KEYFLG
03:C853 2017CC          	   275:             JSR     RAM0OU
03:C856 C999            	   276:             CMP     #$99        ; GET FROM FUNCTION KEY BUFFER?
03:C858 D006            	   277:             BNE     KEYINH
03:C85A 20FEC8          	   278:             JSR     KEYINB      ; YES
03:C85D 4C70C8          	   279:             JMP     KEYHAB      ; TO BE CONTINUE
03:C860 2078C8          	   280: KEYINH      JSR     POLKBD      ; IF NO, GET FROM KEYBOARD
03:C863 C99C            	   281:             CMP     #$9C        ; TAB?
03:C865 D002            	   282:             BNE     *+4
03:C867 A989            	   283:             LDA     #$89        ; YES, USE CTRL-I
03:C869 C99B            	   284:             CMP     #$9B        ; IS IT ESC?
03:C86B D003            	   285:             BNE     *+5
03:C86D 208AC8          	   286:             JSR     ESCHK       ; IF YES, GO ON FURTHER
03:C870 48              	   287: KEYHAB      PHA                 ; SAVE THE CHARACTER GOT FIRST
03:C871 297F            	   288:             AND     #$7F        ; PASCAL LIKES MSB=0
03:C873 8D7B06          	   289:             STA     BYTE
03:C876 68              	   290:             PLA                 ; RECOVER CHARACTER WITH MSB=1
03:C877 60              	   291:             RTS                 ; FOR BASIC
                        	   292: ;
                        	   293: ;; Poll the keyboard until a character arrives.
                        	   294: ;
03:C878 AD00C0          	   295: POLKBD      LDA     KEYBRD      ; POLL KEYBOARD UNTIL KEY GOT
03:C87B 3009            	   296:             BMI     POLRTS
03:C87D E64E            	   297:             INC     RNDNOL      ; MEANWHILE CREATE A RANDOM NO.
03:C87F D0F7            	   298:             BNE     POLKBD
03:C881 E64F            	   299:             INC     RNDNOH
03:C883 4C78C8          	   300:             JMP     POLKBD
03:C886 2C10C0          	   301: POLRTS      BIT     KEYSTR      ; KEY GOT, CLEAR KEYBOARD
03:C889 60              	   302:             RTS
                        	   303: ;
                        	   304: ;; Check for escape sequence.
                        	   305: ;
03:C88A A904            	   306: ESCHK       LDA     #4          ; SET UP TIMER
03:C88C 854F            	   307:             STA     RNDNOH
03:C88E AD00C0          	   308: ESCHK1      LDA     KEYBRD      ; ANY KEY FOLLOWING THE ESC?
03:C891 300B            	   309:             BMI     ESCHK2
03:C893 E64E            	   310:             INC     RNDNOL      ; A STRAIGHT TIMER
03:C895 D0F7            	   311:             BNE     ESCHK1
03:C897 C64F            	   312:             DEC     RNDNOH
03:C899 D0F3            	   313:             BNE     ESCHK1
03:C89B A99B            	   314: ESCKRT      LDA     #$9B        ; TIME IS UP, MUST BE ESC ONLY
03:C89D 60              	   315:             RTS
                        	   316: ;
03:C89E 2C10C0          	   317: ESCHK2      BIT     KEYSTR      ; CLEAR KEYBOARD
03:C8A1 C9C4            	   318:             CMP     #$C4        ; UP ARROW?
03:C8A3 D003            	   319:             BNE     *+5
03:C8A5 A99F            	   320:             LDA     #$9F        ; YES, REPLACE IT WITH A CTRL-KEY
03:C8A7 60              	   321:             RTS                 ; AND RETURN
03:C8A8 C9B0            	   322:             CMP     #$B0        ; 0, 1, 2?
03:C8AA 90EF            	   323:             BLT     ESCKRT      ; IF NOT, MUST BE ESC KEY
03:C8AC C9B3            	   324:             CMP     #$B3
03:C8AE B0EB            	   325:             BGE     ESCKRT
03:C8B0 2907            	   326:             AND     #$07
03:C8B2 0A              	   327:             ASL     A
03:C8B3 0A              	   328:             ASL     A
03:C8B4 0A              	   329:             ASL     A
03:C8B5 8526            	   330:             STA     FKEYPL      ; PREPARE COUNTER
03:C8B7 2078C8          	   331:             JSR     POLKBD
03:C8BA C9B0            	   332:             CMP     #$B0        ; 0 TO 7?
03:C8BC 90DD            	   333:             BLT     ESCKRT
03:C8BE C9B8            	   334:             CMP     #$B8
03:C8C0 B0D9            	   335:             BGE     ESCKRT
03:C8C2 2907            	   336:             AND     #$07
03:C8C4 0526            	   337:             ORA     FKEYPL
03:C8C6 852A            	   338:             STA     SBAS2L      ; COUNTER COMPLETED
03:C8C8 852B            	   339:             STA     SBAS2H      ; THIS IS FOR IN#8
                        	   340: ;; Search for a function key definition
03:C8CA A900            	   341:             LDA     #$00        ; SET UP POINTER NOW
03:C8CC A8              	   342:             TAY
03:C8CD 8526            	   343:             STA     FKEYPL
03:C8CF A948            	   344:             LDA     #$48
03:C8D1 8527            	   345:             STA     FKEYPH      ; FUNCTION KEY STORED FROM $4800
03:C8D3 200DCC          	   346:             JSR     RAM0IN
03:C8D6 C62A            	   347: FKFND1      DEC     SBAS2L
03:C8D8 300C            	   348:             BMI     FKFND4      ; REACH?
03:C8DA E626            	   349: FKFND2      INC     FKEYPL      ; IF NOT, INCREMENT POINTER
03:C8DC D002            	   350:             BNE     FKFND3
03:C8DE E627            	   351:             INC     FKEYPH
03:C8E0 B126            	   352: FKFND3      LDA     (FKEYPL),Y
03:C8E2 10F6            	   353:             BPL     FKFND2      ; END OF FUNCTION KEY?
03:C8E4 30F0            	   354:             BMI     FKFND1      ; YES, UPDATE COUNTER
03:C8E6 AD0048          	   355: FKFND4      LDA     KEYFLG      ; HAS IN#8 HAPPENED?
03:C8E9 C966            	   356:             CMP     #$66
03:C8EB D009            	   357:             BNE     FKFND5      ; NO, GOOD!
03:C8ED 2029F2          	   358:             JSR     RENEW       ; YES, GOTO BASIC
03:C8F0 20A0CB          	   359:             JSR     ENCUR
03:C8F3 4C4DC8          	   360:             JMP     KEYIN
03:C8F6 A999            	   361: FKFND5      LDA     #$99        ; BEFORE EXIT, MAKE FUNCTION
03:C8F8 8D0048          	   362:             STA     KEYFLG      ; KEY ACTIVE
03:C8FB 2017CC          	   363:             JSR     RAM0OU
                        	   364: ;
                        	   365: ; GET THE FIRST CHARACTER FROM THE FUNCTION KEY BUFFER
                        	   366: ;
03:C8FE E626            	   367: KEYINB      INC     FKEYPL      ; FUNCTION KEY POINTER READY
03:C900 D002            	   368:             BNE     *+4
03:C902 E627            	   369:             INC     FKEYPH
03:C904 200DCC          	   370:             JSR     RAM0IN      ; MOVE RAM BLOCK 0 IN
03:C907 A000            	   371:             LDY     #$00
03:C909 B126            	   372:             LDA     (FKEYPL),Y  ; READ KEY FROM BUFFER
03:C90B 1003            	   373:             BPL     KEYBRT      ; END OF A FUNCTION KEY STRING?
03:C90D 8C0048          	   374:             STY     KEYFLG      ; IF YES, DISABLE FUNCTION KEY MODE
03:C910 2017CC          	   375: KEYBRT      JSR     RAM0OU      ; FUNCTION KEY BUFFER AREA
03:C913 0980            	   376:             ORA     #$80        ; ENSURE MSB=1
03:C915 60              	   377:             RTS
                        	   378: ;
                        	   379: ;; Check for CTRL-S to stop video output scrolling.  Once encountered,
                        	   380: ;; wait for any key to resume output.  If the next key is CTRL-C,
                        	   381: ;; then do not clear it from the keyboard buffer.  Otherwise eat it.
                        	   382: ;
03:C916 AD00C0          	   383: VIDWAI      LDA     KEYBRD      ; CHECK STOP LIST
03:C919 C993            	   384:             CMP     #$93        ; CTRL-S
03:C91B D00F            	   385:             BNE     VWDONE      ; IF NOT, EXIT
03:C91D 2C10C0          	   386:             BIT     KEYSTR      ; IF YES, CLEAR KEYBOARD
03:C920 AD00C0          	   387: VWLOOP      LDA     KEYBRD      ; WAIT FOR ANOTHER KEY
03:C923 10FB            	   388:             BPL     VWLOOP
03:C925 C983            	   389:             CMP     #$83        ; IF THE NEXT KEY CTRL-C?
03:C927 F003            	   390:             BEQ     VWDONE      ; IF YES, DON'T CLEAR IT
03:C929 2C10C0          	   391:             BIT     KEYSTR      ; OTHERWISE, CLEAR KEYBOARD
03:C92C 60              	   392: VWDONE      RTS
                        	   393: ;
                        	   394: ; ROUTINE 'WBANK' IS USED TO CONVERT THE MEMORY
                        	   395: ; ASSIGNMENT WHEN RUNNING 80 COLUMN CP/M OR PASCAL
                        	   396: ; NEW MEMORY ASSIGNMENT WILL BE 2, 1, X, F
                        	   397: ; RAM0, WHICH CONTAINS THE SCREEN MEMORY OF THE 80
                        	   398: ; COLUMN TEXT, MUST BE OUTSIDE THE VIRTUAL MEMORY
                        	   399: ; AREA
                        	   400: ;
                        	   401: ;; Because we are changing bank 0, we need to copy the data
                        	   402: ;; that is currently in $0000-$3FFF to the new bank first.
                        	   403: ;;
                        	   404: ;; Should this be disabling interrupts to avoid corrupting
                        	   405: ;; the zero page and the stack if an interrupt fires off?
                        	   406: ;
03:C92D A902            	   407: WBANK       LDA     #2          ; COPY BLOCK 1 INTO RAM 2
03:C92F 8D7DC0          	   408:             STA     SBANK2      ;; Set memory window 2 to bank 2
03:C932 A000            	   409:             LDY     #0          ; SAVE ZERO PAGE FIRST
03:C934 B90000          	   410: WBANK1      LDA     $0,Y
03:C937 990040          	   411:             STA     $4000,Y
03:C93A C8              	   412:             INY
03:C93B D0F7            	   413:             BNE     WBANK1
                        	   414: ;
03:C93D 8400            	   415:             STY     $00         ; NOW WE CAN USE ZERO PAGE
03:C93F 8402            	   416:             STY     $02         ; LOCATIONS
03:C941 A901            	   417:             LDA     #$01
03:C943 8501            	   418:             STA     $01
03:C945 A941            	   419:             LDA     #$41
03:C947 8503            	   420:             STA     $03
                        	   421: ;
03:C949 B100            	   422: WBANK2      LDA     ($00),Y     ; NOW FOR THE NON-ZERO PAGE
03:C94B 9102            	   423:             STA     ($02),Y     ; REGION
03:C94D C8              	   424:             INY
03:C94E D0F9            	   425:             BNE     WBANK2
03:C950 E601            	   426:             INC     $01
03:C952 E603            	   427:             INC     $03
03:C954 A503            	   428:             LDA     $03
03:C956 C980            	   429:             CMP     #$80        ; THE WHOLE 16K FINISHED?
03:C958 90EF            	   430:             BLT     WBANK2      ; IF NOT, CONTINUE
                        	   431: ;
03:C95A B90040          	   432: WBANK3      LDA     $4000,Y     ; NOW RECOVER THE ZERO PAGE
03:C95D 990000          	   433:             STA     $0,Y
03:C960 C8              	   434:             INY
03:C961 D0F7            	   435:             BNE     WBANK3
                        	   436: ;
03:C963 A902            	   437:             LDA     #2          ; EVERY O.K., SHOT!
03:C965 8D7CC0          	   438:             STA     SBANK1      ;; Set memory window 1 to bank 2
03:C968 A901            	   439:             LDA     #1
03:C96A 8D7DC0          	   440:             STA     SBANK2      ;; Set memory window 2 to bank 1
03:C96D 60              	   441:             RTS
                        	   442: ;
                        	   443: ;; Table of handlers for control characters.
                        	   444: ;;
                        	   445: ;; These are the low bytes of the addresses.  The high byte is always $CA.
                        	   446: ;
03:C96E 2D              	   447: SUBTBL      DB      <BELL-1     ; CTRL-G        ;; bell
03:C96F 53              	   448:             DB      <BS-1       ; CTRL-H        ;; backspace
03:C970 16              	   449:             DB      <VIDRTS-1                   ;; ignore CTRL-I
03:C971 A6              	   450:             DB      <LF-1       ; CTRL-J        ;; line feed / move down
03:C972 7E              	   451:             DB      <CLREOP-1   ; CTRL-K        ;; clear to end of page
03:C973 75              	   452:             DB      <CLSCRN-1   ; CTRL-L        ;; clear screen
03:C974 28              	   453:             DB      <CR-1       ; CTRL-M        ;; carriage return
                        	   454: ;
03:C975 6A              	   455:             DB      <HOME-1     ; CTRL-Y        ;; move to top-left of screen
03:C976 16              	   456:             DB      <VIDRTS-1   ; CTRL-Z        ;; ignored
03:C977 16              	   457:             DB      <VIDRTS-1   ; CTRL-[        ;; ignored
03:C978 1F              	   458:             DB      <ADVANC-1   ; CTRL-\        ;; move right
03:C979 96              	   459:             DB      <CLREOL-1   ; CTRL-]        ;; clear to end of line
03:C97A 4A              	   460:             DB      <GOTOXY-1   ; CTRL-^        ;; go to x,y co-ordinates
03:C97B 5D              	   461:             DB      <UP-1       ; CTRL-_        ;; move up
                        	   462: ;
                        	   463: ;; Table of handlers for escape sequences.
                        	   464: ;
03:C97C 75              	   465: ESCTBL      DB      <CLSCRN-1   ; ESC @         ;; clear screen
03:C97D 1F              	   466:             DB      <ADVANC-1   ; ESC A         ;; move right
03:C97E 53              	   467:             DB      <BS-1       ; ESC B         ;; move left
03:C97F A6              	   468:             DB      <LF-1       ; ESC C         ;; move down
03:C980 5D              	   469:             DB      <UP-1       ; ESC D         ;; move up
03:C981 96              	   470:             DB      <CLREOL-1   ; ESC E         ;; clear to end of line
03:C982 7E              	   471:             DB      <CLREOP-1   ; ESC F         ;; clear to end of page
03:C983 6A              	   472:             DB      <HOME-1     ; ESC G         ;; move to top-left of screen
                        	   473: ;
03:C984 C4              	   474: ESCTB1      DB      $C4         ; ESC I = ESC D
03:C985 C2              	   475:             DB      $C2         ; ESC J = ESC B
03:C986 C1              	   476:             DB      $C1         ; ESC K = ESC A
03:C987 C8              	   477:             DB      $C8         ; ESC L = NOP
03:C988 C3              	   478:             DB      $C3         ; ESC M = ESC C
                        	   479: ;
                        	   480: ; TABLE OF SCREEN BASE ADDRESSES (LOW ORDER BYTES ONLY)
                        	   481: ;
03:C989 00              	   482: ADRESL      DB      $00,$80
03:C98A 80
03:C98B 00              	   483:             DB      $00,$80
03:C98C 80
03:C98D 00              	   484:             DB      $00,$80
03:C98E 80
03:C98F 00              	   485:             DB      $00,$80
03:C990 80
03:C991 28              	   486:             DB      $28,$A8
03:C992 A8
03:C993 28              	   487:             DB      $28,$A8
03:C994 A8
03:C995 28              	   488:             DB      $28,$A8
03:C996 A8
03:C997 28              	   489:             DB      $28,$A8
03:C998 A8
03:C999 50              	   490:             DB      $50,$D0
03:C99A D0
03:C99B 50              	   491:             DB      $50,$D0
03:C99C D0
03:C99D 50              	   492:             DB      $50,$D0
03:C99E D0
03:C99F 50              	   493:             DB      $50,$D0
03:C9A0 D0
                        	   494: ;
                        	   495: ; PASCAL AND CP/M OUTPUT ENTRY POINT
                        	   496: ;
                        	   497:             ORIGIN  $C9AA
                        	     1M                 ORG     $C9AA
04:C9AA AD7B07          	   498: PASOUT      LDA     POWER       ;; IS IT THE FIRST TIME?
04:C9AD 29FC            	   499:             AND     #$FC
04:C9AF C990            	   500:             CMP     #$90
04:C9B1 F003            	   501:             BEQ     *+5
04:C9B3 2001C8          	   502:             JSR     SETUP       ; INITIALIZE 80 COLUMN DISPLAY
04:C9B6 20DFCB          	   503:             JSR     DECUR       ; DISABLE THE CURSOR FIRST
04:C9B9 AD7B07          	   504:             LDA     POWER       ; THEN CHECK IF IT IS GOTO XY
04:C9BC 2903            	   505:             AND     #$03
04:C9BE D009            	   506:             BNE     GOXY        ; 2 OR 1 IF IT IS GOTO XY
04:C9C0 AD7B06          	   507:             LDA     BYTE        ; IF NOT, DISPLAY THE CHARACTER
04:C9C3 20F9C9          	   508:             JSR     VIDOUT
04:C9C6 4CA0CB          	   509: PSCORT      JMP     ENCUR       ; WHEN ALL FINISHED, TURN ON THE CURSOR
                        	   510: ;
                        	   511: ;; Processing a "GOTO XY" escape sequence to move the cursor to a
                        	   512: ;; particular location on the screen.
                        	   513: ;
04:C9C9 20CFC9          	   514: GOXY        JSR     GOXY1
04:C9CC 4CC6C9          	   515:             JMP     PSCORT
                        	   516: ;
04:C9CF AD7B06          	   517: GOXY1       LDA     BYTE        ; GOTO WHERE?
04:C9D2 297F            	   518:             AND     #$7F        ; SAFETY        ;; Make sure it is ASCII
04:C9D4 E920            	   519:             SBC     #$20        ; ASCII TO NUMBER
04:C9D6 48              	   520:             PHA                 ; SAVE THIS NO. FIRST
04:C9D7 CE7B07          	   521:             DEC     POWER       ; WHAT IS THIS NO, X OR Y?
04:C9DA AD7B07          	   522:             LDA     POWER
04:C9DD 2903            	   523:             AND     #$03
04:C9DF D013            	   524:             BNE     GOTOX
04:C9E1 68              	   525:             PLA                 ; IT IS Y!
04:C9E2 C523            	   526:             CMP     WNDBTM      ; Y > WINDOW BOTTOM?
04:C9E4 B002            	   527:             BGE     PODRY       ; IF YES, KEEP CVERT UNCHANGED
04:C9E6 8525            	   528:             STA     CVERT       ; OTHERWISE, PERFORM GOTOY
04:C9E8 ADFB05          	   529: PODRY       LDA     TEMPX       ; NOW FOR GOTOX
04:C9EB C521            	   530:             CMP     WNDWTH      ; X > WINDOW WIDTH?
04:C9ED B002            	   531:             BGE     PODRX       ; IF YES, KEEP CHORZ UNCHANGED
04:C9EF 8524            	   532:             STA     CHORZ       ; OTHERWISE, PERFORM GOTOX
04:C9F1 4C3FCB          	   533: PODRX       JMP     VTAB        ; FINALISE GOTOXY
                        	   534: ;
04:C9F4 68              	   535: GOTOX       PLA                 ; THE NO. IS X!
04:C9F5 8DFB05          	   536:             STA     TEMPX       ; SAVE IT UNTIL Y GOT
04:C9F8 60              	   537:             RTS
                        	   538: ;
                        	   539: ;; Video output routine for text characters in 80-column text mode.
                        	   540: ;
04:C9F9 C920            	   541: VIDOUT      CMP     #$20        ; A DISPLAYABLE CHARACTER?
04:C9FB 9004            	   542:             BLT     VIDOU1
04:C9FD 0980            	   543:             ORA     #$80        ; YES, THEN SET MSB=1 FIRST
04:C9FF 3017            	   544:             BMI     STORAD      ; ALWAYS
04:CA01 C907            	   545: VIDOU1      CMP     #$07        ; CTRL-@ to CTRL-F DONT CARE
04:CA03 9012            	   546:             BLT     VIDRTS
04:CA05 C90E            	   547:             CMP     #$0E        ; TAKE CARE OF CTRL-G to CTRL-M
04:CA07 9006            	   548:             BLT     VIDCON
04:CA09 C919            	   549:             CMP     #$19        ; CTRL-E to CTRL-X ARE DON'T CARE
04:CA0B 900A            	   550:             BLT     VIDRTS
04:CA0D E90B            	   551:             SBC     #11         ;; Move down so that CTRL-Y is now CTRL-N
04:CA0F A8              	   552: VIDCON      TAY                 ; USE Y AS A POINTER TO GET THE
04:CA10 A9CA            	   553:             LDA     #>BELL      ; ADDRESSES OF THE CTRL-ROUTINES
04:CA12 48              	   554:             PHA
04:CA13 B967C9          	   555:             LDA     SUBTBL-7,Y  ;; Look up the control key handler table
04:CA16 48              	   556:             PHA                 ;; Sets up to jump to the control key handler
04:CA17 60              	   557: VIDRTS      RTS
                        	   558: ;
                        	   559: ;; Stores a printable ASCII character to the screen at the cursor position.
                        	   560: ;
04:CA18 A424            	   561: STORAD      LDY     CHORZ       ; DISPLAY CHARACTER
04:CA1A 2054CB          	   562:             JSR     CHRDIS
04:CA1D 2016C9          	   563:             JSR     VIDWAI      ; SEE IF CTRL-S PRESSED
04:CA20 E624            	   564: ADVANC      INC     CHORZ       ; AND ADVANCE CURSOR
04:CA22 A524            	   565:             LDA     CHORZ
04:CA24 C521            	   566:             CMP     WNDWTH      ; CURSOR EXCEEDS SCREEN?
04:CA26 B07C            	   567:             BGE     CRLF        ; IF YES, CRLF
04:CA28 60              	   568:             RTS
                        	   569: ;
                        	   570: ;; Ouput a carriage return character.
                        	   571: ;
04:CA29 A900            	   572: CR          LDA     #0          ; CARRIAGE RETURN ONLY
04:CA2B 8524            	   573:             STA     CHORZ
04:CA2D 60              	   574:             RTS
                        	   575: ;
                        	   576: ;; Sound the terminal bell.
                        	   577: ;
04:CA2E A9C0            	   578: BELL        LDA     #$C0        ; BELL THE SPEAKER AT 1KHZ FOR
04:CA30 852A            	   579:             STA     SBAS2L      ; 0.1 SECOND
04:CA32 38              	   580:             SEC
04:CA33 A900            	   581: BELL1       LDA     #0          ; 8 * 64 = 1024 / 2
04:CA35 2CC2C1          	   582: BELL2       BIT     HORZSC      ; HORIZONTAL SYNC PERIOD = 64US
04:CA38 30FB            	   583:             BMI     *-3
04:CA3A 2CC2C1          	   584:             BIT     HORZSC
04:CA3D 10FB            	   585:             BPL     *-3
04:CA3F E901            	   586:             SBC     #1
04:CA41 D0F2            	   587:             BNE     BELL2
04:CA43 AD30C0          	   588:             LDA     SPEAKR      ; TOGGLE THE SPEAKER
04:CA46 C62A            	   589:             DEC     SBAS2L      ; 12 * 16 / 2 = 96
04:CA48 D0E9            	   590:             BNE     BELL1
04:CA4A 60              	   591:             RTS
                        	   592: ;
                        	   593: ;; CTRL-^ is followed by X and Y positions, each encoded as N+$20.
                        	   594: ;
04:CA4B A902            	   595: GOTOXY      LDA     #$02        ;; Set a flag in POWER that indicates
04:CA4D 0D7B07          	   596:             ORA     POWER       ;; that the next byte is the X position.
04:CA50 8D7B07          	   597:             STA     POWER
04:CA53 60              	   598:             RTS
                        	   599: ;
                        	   600: ;; Backspace / move cursor left.
                        	   601: ;
04:CA54 C624            	   602: BS          DEC     CHORZ
04:CA56 10BF            	   603:             BPL     VIDRTS      ; SHOULD NOT EXCEED THE LEFT EDGE
04:CA58 A521            	   604:             LDA     WNDWTH      ; IF PASS, GO UP ONE LINE
04:CA5A 8524            	   605:             STA     CHORZ
04:CA5C C624            	   606:             DEC     CHORZ
                        	   607: ;
                        	   608: ;; Move cursor up on the screen.
                        	   609: ;
04:CA5E A525            	   610: UP          LDA     CVERT
04:CA60 C522            	   611:             CMP     WNDTOP      ; CURSOR SHOULD NOT GO OVER THE
04:CA62 90B3            	   612:             BLT     VIDRTS      ; TOP OF THE SCREEN WINDOW
04:CA64 F0B1            	   613:             BEQ     VIDRTS
04:CA66 C625            	   614:             DEC     CVERT       ; IF NOT, WE CAN GO UP
04:CA68 4C3FCB          	   615:             JMP     VTAB        ; ONE LINE
                        	   616: ;
                        	   617: ;; Move the cursor to the top-left of the screen.
                        	   618: ;
04:CA6B A522            	   619: HOME        LDA     WNDTOP      ; TO POSITION 'HOME'
04:CA6D 8525            	   620:             STA     CVERT
04:CA6F A900            	   621:             LDA     #0
04:CA71 8524            	   622:             STA     CHORZ
04:CA73 4C3FCB          	   623:             JMP     VTAB
                        	   624: ;
                        	   625: ;; Clear the screen.
                        	   626: ;
04:CA76 206BCA          	   627: CLSCRN      JSR     HOME        ; CLEAR THE WHOLE SCREEN
04:CA79 A522            	   628:             LDA     WNDTOP
04:CA7B A000            	   629:             LDY     #0
04:CA7D F004            	   630:             BEQ     CLEOP1      ; ALWAYS
                        	   631: ;
                        	   632: ;; Clear to end of screen.
                        	   633: ;
04:CA7F A424            	   634: CLREOP      LDY     CHORZ       ; CLEAR TO END OF PAGE
04:CA81 A525            	   635:             LDA     CVERT
04:CA83 48              	   636: CLEOP1      PHA                 ; CLSCRN ENTER HERE
04:CA84 2041CB          	   637:             JSR     ADRCAL      ; CLEAR LINE BY LINE
04:CA87 2099CA          	   638:             JSR     CLEOLZ
04:CA8A A000            	   639:             LDY     #0          ; STARTING FROM THE SECOND LINE
04:CA8C 68              	   640:             PLA                 ; CLEAR FROM THE LEFT EDGE
04:CA8D 18              	   641:             CLC
04:CA8E 6901            	   642:             ADC     #1          ; NEXT LINE
04:CA90 C523            	   643:             CMP     WNDBTM      ; DOWN TO THE BOTTOM LINE?
04:CA92 90EF            	   644:             BLT     CLEOP1
04:CA94 4C3FCB          	   645:             JMP     VTAB
                        	   646: ;
                        	   647: ;; Clear to the end of the current line.
                        	   648: ;
04:CA97 A424            	   649: CLREOL      LDY     CHORZ       ; CLEAR TO END OF LINE
                        	   650: ;
04:CA99 A9A0            	   651: CLEOLZ      LDA     #$A0        ; CLEAR = FILL WITH SPACE
04:CA9B 2054CB          	   652: CLEOL2      JSR     CHRDIS      ; DISPLAY THE CHARACTER
04:CA9E C8              	   653:             INY
04:CA9F C421            	   654:             CPY     WNDWTH      ; REACH tHE END OF A LINE?
04:CAA1 90F8            	   655:             BLT     CLEOL2      ; IF NOT, CONTINUE
04:CAA3 60              	   656:             RTS
                        	   657: ;
                        	   658: ;; Carriage return and line feed.
                        	   659: ;
04:CAA4 2029CA          	   660: CRLF        JSR     CR          ; CARRIAGE RETURN + LINE FEED
04:CAA7 E625            	   661: LF          INC     CVERT
04:CAA9 A525            	   662:             LDA     CVERT       ; CURSOR SHOULD NOT GO BEYOND
04:CAAB C523            	   663:             CMP     WNDBTM      ; THE BOTTOM OF THE SCREEN
04:CAAD B003            	   664:             BGE     *+5         ; IF EXCEED, PERFORM SCROLLING
04:CAAF 4C41CB          	   665:             JMP     ADRCAL      ; IF NOT, GOOD!
04:CAB2 C625            	   666:             DEC     CVERT
                        	   667: ;
                        	   668: ;; Scroll the screen up one line.
                        	   669: ;
04:CAB4 A521            	   670: SCROLL      LDA     WNDWTH      ; PREPARE FOR SCROLLING
04:CAB6 48              	   671:             PHA                 ; SAVE IT FIRST
04:CAB7 18              	   672:             CLC
04:CAB8 6520            	   673:             ADC     WNDLFT
04:CABA A8              	   674:             TAY
04:CABB 88              	   675:             DEY                 ; NATURAL V.S. INTEGER
04:CABC 8421            	   676:             STY     WNDWTH      ; CREATE "NEW" WINDOW WIDTH
04:CABE 200DCC          	   677:             JSR     RAM0IN      ; GET THE DISPLAY BANK IN
                        	   678: ;
04:CAC1 A522            	   679: SCROL0      LDA     WNDTOP      ; SCROLL THE TEXT SCREEN
04:CAC3 48              	   680:             PHA
04:CAC4 2041CB          	   681:             JSR     ADRCAL      ; CALCULATE A BASE ADDRESS
04:CAC7 2036C8          	   682:             JSR     COMPAT
04:CACA A528            	   683: SCROL1      LDA     SBASL
04:CACC 852A            	   684:             STA     SBAS2L
04:CACE A529            	   685:             LDA     SBASH
04:CAD0 852B            	   686:             STA     SBAS2H
04:CAD2 68              	   687:             PLA                 ; GET THE LINE COUNT BACK
04:CAD3 18              	   688:             CLC
04:CAD4 6901            	   689:             ADC     #$01
04:CAD6 C523            	   690:             CMP     WNDBTM      ; REACH THE LAST LINE?
04:CAD8 B057            	   691:             BGE     SCROL6
04:CADA 48              	   692:             PHA                 ; SAVE IT FOR THE NEXT CYCLE
04:CADB 2041CB          	   693:             JSR     ADRCAL      ; CALCULATE THE NEXT BASE ADDRESS
04:CADE 2036C8          	   694:             JSR     COMPAT
04:CAE1 A421            	   695:             LDY     WNDWTH
04:CAE3 C028            	   696:             CPY     #40         ; 40 OR 80 COLUMN MODE?
04:CAE5 B00B            	   697:             BGE     SCROL3
04:CAE7 B128            	   698: SCROL2      LDA     (SBASL),Y   ; MOVE UP ONE LINE
04:CAE9 912A            	   699:             STA     (SBAS2L),Y
04:CAEB 88              	   700:             DEY
04:CAEC C420            	   701:             CPY     WNDLFT      ; ONE LINE FINISHED?
04:CAEE 10F7            	   702:             BPL     SCROL2      ; IF NO, CONTINUE
04:CAF0 30D8            	   703:             BMI     SCROL1      ; IF YES, GO FOR THE NEXT LINE
                        	   704: ;
04:CAF2 A529            	   705: SCROL3      LDA     SBASH       ; DO SOME TRANSFORMATION
04:CAF4 0904            	   706:             ORA     #$04        ; FOR 80 COLUMN TEXT MODE
04:CAF6 8529            	   707:             STA     SBASH
04:CAF8 A52B            	   708:             LDA     SBAS2H
04:CAFA 0904            	   709:             ORA     #$04
04:CAFC 852B            	   710:             STA     SBAS2H
04:CAFE A520            	   711:             LDA     WNDLFT
04:CB00 38              	   712:             SEC
04:CB01 E928            	   713:             SBC     #40
04:CB03 8520            	   714:             STA     WNDLFT
04:CB05 98              	   715:             TYA
04:CB06 38              	   716:             SEC
04:CB07 E928            	   717:             SBC     #40
04:CB09 A8              	   718:             TAY
                        	   719: ;
04:CB0A B128            	   720: SCROL4      LDA     (SBASL),Y   ; MOVE UP THE RIGHT
04:CB0C 912A            	   721:             STA     (SBAS2L),Y  ; HALF PAGE
04:CB0E 88              	   722:             DEY
04:CB0F C420            	   723:             CPY     WNDLFT      ; ONE LINE FINISHED?
04:CB11 3003            	   724:             BMI     SCROL5      ; IF YES, SKIP
04:CB13 98              	   725:             TYA
04:CB14 10F4            	   726:             BPL     SCROL4      ; AN EXACT HALF LINE GONE?
                        	   727: ;
04:CB16 A529            	   728: SCROL5      LDA     SBASH       ; INVERSE TRANSFORM OF SCROL3 ABOVE
04:CB18 4904            	   729:             EOR     #$04
04:CB1A 8529            	   730:             STA     SBASH
04:CB1C A52B            	   731:             LDA     SBAS2H
04:CB1E 4904            	   732:             EOR     #$04
04:CB20 852B            	   733:             STA     SBAS2H
04:CB22 A027            	   734:             LDY     #39
04:CB24 A520            	   735:             LDA     WNDLFT
04:CB26 18              	   736:             CLC
04:CB27 6928            	   737:             ADC     #40
04:CB29 8520            	   738:             STA     WNDLFT
04:CB2B C928            	   739:             CMP     #40
04:CB2D B09B            	   740:             BGE     SCROL1      ; IF LEFT EDGE >= 40, WE HAVE FINISHED
04:CB2F 90B6            	   741:             BLT     SCROL2      ; IF LEFT EDGE < 40
                        	   742: ;
04:CB31 2036C8          	   743: SCROL6      JSR     COMPAT
04:CB34 2017CC          	   744:             JSR     RAM0OU      ; TICK DISPLAY BANK OUT
04:CB37 68              	   745:             PLA
04:CB38 8521            	   746:             STA     WNDWTH      ; RECOVER WINDOW WIDTH
04:CB3A A000            	   747:             LDY     #0
04:CB3C 2099CA          	   748:             JSR     CLEOLZ      ; CLEAR THE BOTTOM LINE
                        	   749: ;
                        	   750: ;; Vertical TAB
                        	   751: ;
04:CB3F A525            	   752: VTAB        LDA     CVERT       ; PREPARE SCREEN BASE ADDRESS
                        	   753: ;
                        	   754: ; ROUTINE 'ADRCAL' CALCULATES THE TEXT SCREEN BASE ADDRESS
                        	   755: ; INPUT: A = LINE NUMBER
                        	   756: ; OUTPUT: SBASL, SBASH = SCREEN BASE ADDRESS FOR THIS LINE
                        	   757: ;
04:CB41 8428            	   758: ADRCAL      STY     SBASL       ; SAVE Y
04:CB43 A8              	   759:             TAY                 ; SAVE A
04:CB44 4A              	   760:             LSR     A
04:CB45 2903            	   761:             AND     #$03
04:CB47 0D7B05          	   762:             ORA     TXTMOD
04:CB4A 8529            	   763:             STA     SBASH
04:CB4C B989C9          	   764:             LDA     ADRESL, Y
04:CB4F A428            	   765:             LDY     SBASL       ; RECOVER Y
04:CB51 8528            	   766:             STA     SBASL
04:CB53 60              	   767:             RTS
                        	   768: ;
                        	   769: ;; Display a printable character on the screen.
                        	   770: ;;
                        	   771: ;; SBASL, SBASH is assumed to contain the address of the current line.
                        	   772: ;; A is assumed to contain the character to print.
                        	   773: ;; Y is assumed to contain the offset on the line to draw to.
                        	   774: ;
04:CB54 2081CB          	   775: CHRDIS      JSR     TST40C      ; REQUIRE ADDRESS MODIFICATION? ;; Saves Y
04:CB57 B011            	   776:             BGE     CHRDS1
04:CB59 200DCC          	   777:             JSR     RAM0IN      ; NO, THEN SIMPLE
04:CB5C 2036C8          	   778:             JSR     COMPAT
04:CB5F 9128            	   779:             STA     (SBASL),Y
04:CB61 2036C8          	   780:             JSR     COMPAT
04:CB64 ACFB04          	   781:             LDY     TEMPY       ; GET BACK ORIGINAL Y
04:CB67 4C17CC          	   782:             JMP     RAM0OU      ; FINISHED
                        	   783: ;
04:CB6A 208ECB          	   784: CHRDS1      JSR     SUBY40      ; MODIFY BASE ADDRESS
04:CB6D 200DCC          	   785:             JSR     RAM0IN
04:CB70 2036C8          	   786:             JSR     COMPAT
04:CB73 9128            	   787:             STA     (SBASL),Y
04:CB75 2036C8          	   788:             JSR     COMPAT
04:CB78 2017CC          	   789:             JSR     RAM0OU
04:CB7B ACFB04          	   790:             LDY     TEMPY       ; GET BACK ORIGINAL Y
04:CB7E 4C97CB          	   791:             JMP     ADDY40      ; CURE THE MODIFICATION
                        	   792: ;
                        	   793: ;; Test if the column number in Y is in the right half of the 80-column screen.
                        	   794: ;
04:CB81 48              	   795: TST40C      PHA                 ; SAVE A
04:CB82 8CFB04          	   796:             STY     TEMPY       ; SAVE Y
04:CB85 98              	   797:             TYA
04:CB86 18              	   798:             CLC                 ; Y = Y + WINDOW LEFT
04:CB87 6520            	   799:             ADC     WNDLFT
04:CB89 A8              	   800:             TAY
04:CB8A C928            	   801:             CMP     #40         ; SET CARRY FLAG
04:CB8C 68              	   802:             PLA                 ; RECOVER A
04:CB8D 60              	   803:             RTS
                        	   804: ;
04:CB8E 48              	   805: SUBY40      PHA                 ; SAVE CHARACTER FIRST
04:CB8F 98              	   806:             TYA                 ; Y = Y - 40
04:CB90 38              	   807:             SEC
04:CB91 E928            	   808:             SBC     #40
04:CB93 A8              	   809:             TAY
04:CB94 4C98CB          	   810:             JMP     TOGGSH      ; MODIFY BASE ADDRESS
                        	   811: ;
04:CB97 48              	   812: ADDY40      PHA                 ; SAVE CHARACTER
                        	   813: ;
04:CB98 A529            	   814: TOGGSH      LDA     SBASH
04:CB9A 4904            	   815:             EOR     #$04
04:CB9C 8529            	   816:             STA     SBASH
04:CB9E 68              	   817:             PLA                 ; RETAIN CHARACTER
04:CB9F 60              	   818:             RTS
                        	   819: ;
                        	   820: ;; Enable cursor
                        	   821: ;
04:CBA0 48              	   822: ENCUR       PHA                 ; SAVE CHARACTER FIRST
04:CBA1 A424            	   823:             LDY     CHORZ
04:CBA3 2081CB          	   824:             JSR     TST40C      ; MODIFYING ADDRESS REQUIRED?
04:CBA6 B00A            	   825:             BGE     ENCUR1
04:CBA8 200DCC          	   826:             JSR     RAM0IN      ; NO, THEN SIMPLE
04:CBAB 20C2CB          	   827:             JSR     ENCUR3
04:CBAE 68              	   828:             PLA                 ; GET BACK THE CHARACTER
04:CBAF 4C17CC          	   829:             JMP     RAM0OU      ; FINISHED
                        	   830: ;
04:CBB2 208ECB          	   831: ENCUR1      JSR     SUBY40      ; MODIFY BASE ADDRESS
04:CBB5 200DCC          	   832:             JSR     RAM0IN
04:CBB8 20C2CB          	   833:             JSR     ENCUR3
04:CBBB 2017CC          	   834:             JSR     RAM0OU
04:CBBE 68              	   835:             PLA
04:CBBF 4C97CB          	   836:             JMP     ADDY40      ; FINISHED
                        	   837: ;
04:CBC2 2036C8          	   838: ENCUR3      JSR     COMPAT
04:CBC5 B128            	   839:             LDA     (SBASL),Y
04:CBC7 8DFB06          	   840:             STA     TEMPA       ; SAVE FOR DECUR
04:CBCA 2CC5C1          	   841:             BIT     TWOMHZ      ; TWO KINDS OF CURSOR
04:CBCD 3006            	   842:             BMI     *+8
04:CBCF 293F            	   843:             AND     #$3F        ; FOR 40 COLUMN TEXT
04:CBD1 0940            	   844:             ORA     #$40
04:CBD3 D002            	   845:             BNE     *+4         ; ALWAYS
04:CBD5 297F            	   846:             AND     #$7F        ; FOR 80 COLUMN TEXT
04:CBD7 9128            	   847:             STA     (SBASL),Y
04:CBD9 ACFB04          	   848:             LDY     TEMPY       ; GET ORIGINAL Y
04:CBDC 4C36C8          	   849:             JMP     COMPAT
                        	   850: ;
                        	   851: ;; Disable cursor
                        	   852: ;
04:CBDF 08              	   853: DECUR       PHP                 ; TURN OFF THE CURSOR
04:CBE0 48              	   854:             PHA                 ; SAVE THINGS FOR SAFETY
04:CBE1 A424            	   855:             LDY     CHORZ
04:CBE3 ADFB06          	   856:             LDA     TEMPA       ;; Get the character that was saved by ENCUR.
04:CBE6 2054CB          	   857:             JSR     CHRDIS      ;; Display it in the current position.
04:CBE9 68              	   858:             PLA
04:CBEA 28              	   859:             PLP
04:CBEB 60              	   860:             RTS                 ; DONE
                        	   861: ;
                        	   862: ;; Handle escape sequences
                        	   863: ;
04:CBEC A8              	   864: ESCX2       TAY                 ; USE Y AS A POINTER
04:CBED B9BBC8          	   865:             LDA     ESCTB1-$C9,Y ; TRANSFORM X
04:CBF0 20FECB          	   866:             JSR     ESCX1       ; THEN PROCESS IT
04:CBF3 200CFD          	   867:             JSR     MRDKEY
                        	   868: ;
04:CBF6 C9CE            	   869: ESCX        CMP     #$CE        ; >= 'N'?
04:CBF8 B012            	   870:             BGE     ESCXRT
04:CBFA C9C9            	   871:             CMP     #$C9        ; < 'I'?
04:CBFC B0EE            	   872:             BGE     ESCX2       ; IF FALSE, THEN MUST BE ESC I, J, K, L, or M
04:CBFE 293F            	   873: ESCX1       AND     #$3F        ; SKIP OFF HIGH ORDER BITS
04:CC00 C908            	   874:             CMP     #$08        ; >= 'H'?
04:CC02 B008            	   875:             BGE     ESCXRT      ; IF YES, DO NOTHING
04:CC04 A8              	   876:             TAY                 ; USE Y AS A POINTER
04:CC05 A9CA            	   877:             LDA     #>BELL
04:CC07 48              	   878:             PHA
04:CC08 B97CC9          	   879:             LDA     ESCTBL,Y
04:CC0B 48              	   880:             PHA
04:CC0C 60              	   881: ESCXRT      RTS
                        	   882: ;
                        	   883: ; RAM0IN AND RAM0OU ARE TWO VERY, VERY IMPORTANT ROUTINES
                        	   884: ; THEY ARE CALLED BY THE KERNEL (BOTH C8 AND F8) AND THE BASIC
                        	   885: ;
                        	   886: ;; RAM0IN assigns memory from the virtual bank $00000 to physical address $4000.
                        	   887: ;; RAM0OU restores the original memory bank configuration.
                        	   888: ;;
                        	   889: ;; PBANK2 contains the memory bank number that is normally at $4000.
                        	   890: ;
04:CC0D 08              	   891: RAM0IN      PHP                 ; SAFETY IS THE MOST IMPORTANT
04:CC0E 48              	   892:             PHA
04:CC0F A900            	   893:             LDA     #$00
04:CC11 8D7DC0          	   894:             STA     SBANK2      ; BRING RAM 0 IN
04:CC14 68              	   895:             PLA
04:CC15 28              	   896:             PLP
04:CC16 60              	   897:             RTS
                        	   898: ;
04:CC17 08              	   899: RAM0OU      PHP
04:CC18 48              	   900:             PHA
04:CC19 AD7B07          	   901:             LDA     POWER       ; UNDER CP/M OR PASCAL?
04:CC1C 29FC            	   902:             AND     #$FC
04:CC1E C990            	   903:             CMP     #$90
04:CC20 F006            	   904:             BEQ     MUSTR1      ; IF YES, MOVE RAM 1 IN
04:CC22 A5C6            	   905:             LDA     PBANK2      ; MOVE WHICH BLOCK IN?
04:CC24 C910            	   906:             CMP     #$10        ; A REASONABLE NUMBER?
04:CC26 9002            	   907:             BLT     RAM0O1
04:CC28 A901            	   908: MUSTR1      LDA     #$01        ; IF NOT, ASSUME RAM 1
04:CC2A 8D7DC0          	   909: RAM0O1      STA     SBANK2      ; STORE IT INTO BLOCK 1
04:CC2D 68              	   910:             PLA
04:CC2E 28              	   911:             PLP
04:CC2F 60              	   912:             RTS
                        	   913: ;
                        	   914: ;; Perform character I/O for BASIC.
                        	   915: ;
04:CC30 20CACC          	   916: IO          JSR     TUGGLE      ; PERFORM INTERCHANGE
04:CC33 20DFCB          	   917:             JSR     DECUR       ; DO THIS BEFORE EVERYTHING
04:CC36 B063            	   918:             BCS     BASINP      ; INPUT OR OUTPUT?
                        	   919: ;
04:CC38 ADFB07          	   920: BASOUT      LDA     CVWHO
04:CC3B C525            	   921:             CMP     CVERT
04:CC3D F005            	   922:             BEQ     CVOK
04:CC3F 8525            	   923:             STA     CVERT
04:CC41 203FCB          	   924:             JSR     VTAB
04:CC44 AD7B04          	   925: CVOK        LDA     CHWHO
04:CC47 C524            	   926:             CMP     CHORZ
04:CC49 9002            	   927:             BLT     CHOK
04:CC4B 8524            	   928:             STA     CHORZ
04:CC4D 68              	   929: CHOK        PLA                 ; GET BACK CHARACTER
04:CC4E C9A0            	   930:             CMP     #$A0        ; CONTROL CHARACTER?
04:CC50 9008            	   931:             BLT     BASOU1
04:CC52 2532            	   932:             AND     INVFLG      ; NO, DISPLAYABLE
04:CC54 2018CA          	   933:             JSR     STORAD
04:CC57 4C68CC          	   934:             JMP     BASOU2      ; GATHER
                        	   935: ;
04:CC5A 297F            	   936: BASOU1      AND     #$7F        ; FOR CONTROL CHARACTER
04:CC5C C90D            	   937:             CMP     #$0D        ; CARRIAGE RETURN?
04:CC5E D005            	   938:             BNE     BASOU3
04:CC60 2001CA          	   939:             JSR     VIDOU1      ; YES
04:CC63 A90A            	   940:             LDA     #$0A        ; ADD A LINE-FEED
04:CC65 2001CA          	   941: BASOU3      JSR     VIDOU1
                        	   942: ;
04:CC68 A524            	   943: BASOU2      LDA     CHORZ       ; CHARACTER HAS BEEN SENT
04:CC6A F006            	   944:             BEQ     CURECH
04:CC6C E947            	   945:             SBC     #$47
04:CC6E 9005            	   946:             BCC     DONE
04:CC70 691F            	   947:             ADC     #$1F
04:CC72 8D7B04          	   948: CURECH      STA     CHWHO
                        	   949: ;
04:CC75 A525            	   950: DONE        LDA     CVERT       ; ALL FINISHED, GO BACK!
04:CC77 8DFB07          	   951:             STA     CVWHO
04:CC7A 20A0CB          	   952:             JSR     ENCUR       ; ENABLE CURSOR BEFORE EXIT
04:CC7D 20CACC          	   953:             JSR     TUGGLE      ; ALSO DO THIS
04:CC80 68              	   954:             PLA
04:CC81 A8              	   955:             TAY
04:CC82 68              	   956:             PLA
04:CC83 AA              	   957:             TAX
04:CC84 68              	   958:             PLA                 ; RECOVER CHARACTER
04:CC85 60              	   959: DONRTS      RTS
                        	   960: ;
                        	   961: ;; Handle escape sequences on input for BASIC.
                        	   962: ;
04:CC86 A8              	   963: NEWESC      TAY
04:CC87 B9BBC8          	   964:             LDA     ESCTB1-$C9,Y
04:CC8A 20FECB          	   965:             JSR     ESCX1
                        	   966: ;
04:CC8D 20C1CC          	   967: ESCWHO      JSR     RDKWHO      ; ESC WHAT?
04:CC90 C9CE            	   968:             CMP     #$CE        ; >= 'N'?
04:CC92 B0F1            	   969:             BGE     DONRTS
04:CC94 C9C9            	   970:             CMP     #$C9        ; < 'I'?
04:CC96 B0EE            	   971:             BGE     NEWESC
04:CC98 20FECB          	   972:             JSR     ESCX1       ; YES
                        	   973: ;
                        	   974: ;; Input a character from the keyboard for BASIC.
                        	   975: ;;
                        	   976: ;; If the user presses CR, then the rest of the line will be cleared.
                        	   977: ;; If the user presses the right array key ($95), then the character
                        	   978: ;; on the screen under the cursor is returned as the key input.
                        	   979: ;
04:CC9B 20C1CC          	   980: BASINP      JSR     RDKWHO      ; READ KEY
04:CC9E C99B            	   981:             CMP     #$9B
04:CCA0 F0EB            	   982:             BEQ     ESCWHO      ; ESC?
04:CCA2 C98D            	   983:             CMP     #$8D
04:CCA4 D005            	   984:             BNE     NOTCRW      ; CARRIAGE RETURN?
04:CCA6 48              	   985:             PHA                 ; YES
04:CCA7 2097CA          	   986:             JSR     CLREOL      ; CLEAR TO END OF LINE
04:CCAA 68              	   987:             PLA
04:CCAB C995            	   988: NOTCRW      CMP     #$95        ; RIGHT ARROW?
04:CCAD D005            	   989:             BNE     NOPICK
04:CCAF ADFB06          	   990:             LDA     TEMPA       ; YES, PICK UP CHARACTER UNDER CURSOR
04:CCB2 0980            	   991:             ORA     #$80        ; MSB MUST = 1
04:CCB4 BA              	   992: NOPICK      TSX                 ; REPLACE CHARACTER ON STACK
04:CCB5 9D0401          	   993:             STA     STACK+4,X
04:CCB8 A900            	   994:             LDA     #0
04:CCBA 8D7B04          	   995:             STA     CHWHO
04:CCBD 68              	   996:             PLA                 ; REPLACE THE DUMMY CHARACTER
04:CCBE 4C75CC          	   997:             JMP     DONE        ; FINISHED
                        	   998: ;
04:CCC1 20A0CB          	   999: RDKWHO      JSR     ENCUR       ; TURN CURSOR ON
04:CCC4 204DC8          	  1000:             JSR     KEYIN       ; WHILE WAITING FOR KEY INPUT
04:CCC7 4CDFCB          	  1001:             JMP     DECUR       ; KEY GOT, TURN OFF CURSOR
                        	  1002: ;
                        	  1003: ; ROUTINE 'TUGGLE' IS USED TO INTERCHANGE A SET
                        	  1004: ; OF ZERO PAGE LOCATIONS WITH A SET OF SLOT 3 LOCATIONS
                        	  1005: ; THIS ALLOWS OUR READ-KEY AND CHARACTER-DISPLAY
                        	  1006: ; ROUTINES TO BE SHARED BY DIFFERENT OPERATING SYSTEMS
                        	  1007: ;
04:CCCA 08              	  1008: TUGGLE      PHP                 ; SAFETY
04:CCCB 48              	  1009:             PHA
                        	  1010: ;
04:CCCC A524            	  1011:             LDA     CHORZ       ;; Swap CHORZ and CHWHO
04:CCCE 48              	  1012:             PHA
04:CCCF AD7B04          	  1013:             LDA     CHWHO
04:CCD2 8524            	  1014:             STA     CHORZ
04:CCD4 68              	  1015:             PLA
04:CCD5 8D7B04          	  1016:             STA     CHWHO
                        	  1017: ;
04:CCD8 A525            	  1018:             LDA     CVERT       ;; Swap CVERT and CVWHO
04:CCDA 48              	  1019:             PHA
04:CCDB ADFB07          	  1020:             LDA     CVWHO
04:CCDE 8525            	  1021:             STA     CVERT
04:CCE0 68              	  1022:             PLA
04:CCE1 8DFB07          	  1023:             STA     CVWHO
                        	  1024: ;
04:CCE4 A521            	  1025:             LDA     WNDWTH      ;; Swap WNDWTH and SAVE1
04:CCE6 48              	  1026:             PHA
04:CCE7 AD7807          	  1027:             LDA     SAVE1
04:CCEA 8521            	  1028:             STA     WNDWTH
04:CCEC 68              	  1029:             PLA
04:CCED 8D7807          	  1030:             STA     SAVE1
                        	  1031: ;
04:CCF0 68              	  1032:             PLA
04:CCF1 28              	  1033:             PLP
04:CCF2 60              	  1034:             RTS
                        	  1035: 
                        	  1036: ;;***********************************************************************
                        	  1037: ;;
                        	  1038: ;; End of the 80 column display firmware.
                        	  1039: ;;
                        	  1040: ;;***********************************************************************
                        	  1041: 
                        	  1042: ;;***********************************************************************
                        	  1043: ;;
                        	  1044: ;; Reset handler and system initialization.
                        	  1045: ;;
                        	  1046: ;;***********************************************************************
                        	  1047: 
                        	  1048:             ORIGIN      $D571
                        	     1M                 ORG     $D571
                        	  1049: ;
                        	  1050: ; THIS IS THE RESET HANDLER
                        	  1051: ;
05:D571 D8              	  1052: RESET0      CLD
05:D572 A20F            	  1053:             LDX     #$0F        ;; Check if PBANK4 is set to F.
05:D574 E4C8            	  1054:             CPX     PBANK4      ;; It will not be for a cold start.
05:D576 F056            	  1055:             BEQ     RESET1      ; IF NOT POWER UP, SKIP
                        	  1056: ;
05:D578 A0A0            	  1057: DELAY       LDY     #$A0        ; WAIT TILL SYSTEM SETTLES
05:D57A 6901            	  1058: DELAY1      ADC     #$01
05:D57C 90FC            	  1059:             BCC     DELAY1
05:D57E 88              	  1060:             DEY
05:D57F D0F9            	  1061:             BNE     DELAY1
                        	  1062: ;
                        	  1063: ;; At this point the A and Y registers are both zero.
                        	  1064: ;
05:D581 8E7FC0          	  1065: ASSIGN      STX     SBANK4      ; ASSIGN MEMORY CONFIGURATION
05:D584 8D78C0          	  1066:             STA     SYSTEM      ; AS : 0, 1, 3, F
05:D587 8C7CC0          	  1067:             STY     SBANK1      ; Bank 1 = 0
05:D58A 84C5            	  1068:             STY     PBANK1
05:D58C 86C8            	  1069:             STX     PBANK4      ; Bank 4 = F
05:D58E C8              	  1070:             INY
05:D58F 8C7DC0          	  1071:             STY     SBANK2      ; Bank 2 = 1
05:D592 84C6            	  1072:             STY     PBANK2
05:D594 C8              	  1073:             INY
05:D595 C8              	  1074:             INY
05:D596 8C7EC0          	  1075:             STY     SBANK3      ; Bank 3 = 3
05:D599 84C7            	  1076:             STY     PBANK3
                        	  1077: ;
05:D59B A010            	  1078:             LDY     #$10
05:D59D 8468            	  1079:             STY     TXTABH
05:D59F 8567            	  1080:             STA     TXTABL      ; REMEMBER (A)=$00?
05:D5A1 8548            	  1081:             STA     STATUS      ; INIT STATUS
05:D5A3 A8              	  1082:             TAY
05:D5A4 A9A0            	  1083: CLEAR       LDA     #$A0        ; CLEAR SCREEN
05:D5A6 9167            	  1084:             STA     (TXTABL),Y
05:D5A8 C8              	  1085:             INY
05:D5A9 D0F9            	  1086:             BNE     CLEAR
05:D5AB E668            	  1087:             INC     TXTABH
05:D5AD A568            	  1088:             LDA     TXTABH
05:D5AF C918            	  1089:             CMP     #$18
05:D5B1 D0F1            	  1090:             BNE     CLEAR
                        	  1091: ;
                        	  1092: ;; Choose the boot configuration based on the key that is pressed at startup:
                        	  1093: ;;
                        	  1094: ;;      None    BASIC starts at $1800
                        	  1095: ;;      A       BASIC starts at $0800
                        	  1096: ;;      ESC     Select 80 column text mode from startup
                        	  1097: ;
05:D5B3 AE00C0          	  1098: CHOICE      LDX     KEYBRD      ; BASIC STARTS AT $1800?
05:D5B6 E0C1            	  1099:             CPX     #$C1
05:D5B8 D002            	  1100:             BNE     USUAL
05:D5BA A908            	  1101:             LDA     #$08        ; OR AT $800?
05:D5BC 8568            	  1102: USUAL       STA     TXTABH
05:D5BE 2C10C0          	  1103:             BIT     KEYSTR      ; CLEAR KEYBOARD
05:D5C1 E09B            	  1104:             CPX     #$9B        ; HAS ESC BEEN PRESSED?
05:D5C3 D006            	  1105:             BNE     SETT40
05:D5C5 2081FB          	  1106:             JSR     TEXT80      ; CAN BE 80 COLUMN TEXT
05:D5C8 4CCED5          	  1107:             JMP     RESET1      ; TO BE CONTINUE
05:D5CB 2078FB          	  1108: SETT40      JSR     TEXT40      ; DEFAULT 40 COLUMN TEXT
                        	  1109: ;
05:D5CE 20BDF1          	  1110: RESET1      JSR     HRSEXT      ; FORCE MEMORY ASSIGNMENTS
05:D5D1 20CDFB          	  1111:             JSR     FRAM0O      ; RIGHT
05:D5D4 203CF2          	  1112:             JSR     NORMAL      ; SET NORMAL DISPLAY
05:D5D7 AD28C0          	  1113:             LDA     TEXTCR      ; WHITE TEXT, BLACK BACKGROUND, BLACK BORDER
05:D5DA AD18C0          	  1114:             LDA     BKGRND
05:D5DD AD08C0          	  1115:             LDA     BKDROP
05:D5E0 20FAFB          	  1116:             JSR     SONINT      ; TURN OFF SOUND GEN.
05:D5E3 202FFB          	  1117:             JSR     VZINIT      ; INIT TEXT DISPLAY
05:D5E6 2039FE          	  1118:             JSR     SCREEN      ; INIT INPUT/OUTPUT
05:D5E9 2042FE          	  1119:             JSR     KBDBRD
05:D5EC 203AFF          	  1120:             JSR     MBELL       ; INFORM THE USER WITH A BEEP
05:D5EF ADF403          	  1121:             LDA     RESTVR+2    ; CHECK RESET VECTOR
05:D5F2 49A5            	  1122:             EOR     #$A5
05:D5F4 CDF303          	  1123:             CMP     RESTVR+1
05:D5F7 D003            	  1124:             BNE     FSTIME      ; FIRST TIME POWER UP?
05:D5F9 4CF1FC          	  1125:             JMP     DEBUG1      ; NO
05:D5FC 2099FB          	  1126: FSTIME      JSR     TITLE       ; SHOW OUR LOGO
05:D5FF 20AAFB          	  1127:             JSR     INFKEY      ; CLEAR THE FUNCTION KEYS
05:D602 2061FB          	  1128:             JSR     PRESP3      ; PRESET PAGE 3 VECTORS
05:D605 2043FD          	  1129:             JSR     CHKDIS      ; CHECK DRIVE CONTROLLER
05:D608 A903            	  1130: NODRIV      LDA     #<BASICW    ; SET UP RESET VECTOR
05:D60A 8DF203          	  1131:             STA     RESTVR
05:D60D 206FFB          	  1132:             JSR     SRESTV
05:D610 4C00E0          	  1133:             JMP     BASICC      ;; Jump to the BASIC ROM's at $E000 (cold start)
                        	  1134: 
                        	  1135: ;;***********************************************************************
                        	  1136: ;;
                        	  1137: ;; Start of the BASIC ROM's at $E000.
                        	  1138: ;;
                        	  1139: ;; If we don't have BASIC, then we jump into the kernel monitor instead
                        	  1140: ;; and replace some of the BASIC routines the kernel uses with stubs.
                        	  1141: ;;
                        	  1142: ;;***********************************************************************
                        	  1143: 
                        	  1144:     ifdef NOBASIC
                        	  1145:             ORIGIN  BASICC
                        	  1146: BASIC       JMP     MON1        ;; Cold start entry point for BASIC
                        	  1147:             JMP     MON1        ;; Warm start entry point for BASIC
                        	  1148: 
                        	  1149: ;
                        	  1150: ;; HRSEXT restores the correct mapping for memory bank 3.
                        	  1151: ;
                        	  1152:             ORIGIN  HRSEXT
                        	  1153:             PHP
                        	  1154:             PHA
                        	  1155:             LDA     PBANK3
                        	  1156:             CMP     #$10
                        	  1157:             BLT     SETBANK3
                        	  1158:             LDA     #$03
                        	  1159: SETBANK3    STA     SBANK3
                        	  1160:             PLA
                        	  1161:             PLP
                        	  1162:             RTS
                        	  1163: ;
                        	  1164: ;; Not sure what this does - renews the function key buffer?
                        	  1165: ;
                        	  1166:             ORIGIN  RENEW
                        	  1167:             RTS
                        	  1168: ;
                        	  1169: ;; NORMAL sets the screen text to normal (not inverse or flashing).
                        	  1170: ;
                        	  1171:             ORIGIN  NORMAL
                        	  1172:             LDA     #$FF
                        	  1173:             LDX     #$00
                        	  1174:             STA     INVFLG
                        	  1175:             STX     $F3
                        	  1176:             RTS
                        	  1177: 
                        	  1178:     endif   ; NOBASIC
                        	  1179: 
                        	  1180: ;;***********************************************************************
                        	  1181: ;;
                        	  1182: ;; Kernel monitor ROM at $F800.
                        	  1183: ;;
                        	  1184: ;; The original code from the Technical Reference Manual pre-filled
                        	  1185: ;; $F800 to $FFFF with $60 bytes and then overwrote the code.
                        	  1186: ;; This effectively fills all unused space with RTS instructions.
                        	  1187: ;; The "vasm" assembler doesn't allow us overlap sections like that,
                        	  1188: ;; so we instead use "DS n, $60" for padding below.
                        	  1189: ;;
                        	  1190: ;;***********************************************************************
                        	  1191: 
                        	  1192:             ORIGIN  $F800
                        	     1M                 ORG     $F800
                        	  1193: ;
                        	  1194: ;; Jump table of useful kernel routines.
                        	  1195: ;
06:F800 4CC7FB          	  1196: JRAM0I      JMP     FRAM0I      ;; $F800: Bring RAM0 into BANK2 for text access
06:F803 4CCDFB          	  1197: JRAM0O      JMP     FRAM0O      ;; $F803: Restore previous BANK2 configuration
06:F806 4C78FB          	  1198: JTEXT40     JMP     TEXT40      ;; $F806: Switch to 40-column text mode
06:F809 4C81FB          	  1199: JTEXT80     JMP     TEXT80      ;; $F809: Switch to 80-column text mode
06:F80C 4C2AFC          	  1200: JAUDOUT     JMP     AUDOUT      ;; $F80C: Send data to the 76489 sound generator
06:F80F 4C4EFC          	  1201: JMOUTS1     JMP     MOUTS1      ;; $F80F: Switch to the printer driver
                        	  1202: ;
                        	  1203: ;; Set the screen width to 40 or 80 columns ($F812)
                        	  1204: ;
06:F812 AD7B05          	  1205: SETWTH      LDA     TXTMOD      ; 40 OR 80 COLUMN MODE?
06:F815 C910            	  1206:             CMP     #$10
06:F817 D008            	  1207:             BNE     SETW40
06:F819 A950            	  1208:             LDA     #80         ; 80 COLUMN TEXT MODE
06:F81B 8D4FC0          	  1209:             STA     VZTX80
06:F81E 8521            	  1210: SETW48      STA     WNDWTH
06:F820 60              	  1211:             RTS
06:F821 A928            	  1212: SETW40      LDA     #40
06:F823 8D4CC0          	  1213:             STA     VZTX40
06:F826 D0F6            	  1214:             BNE     SETW48      ; ALWAYS
                        	  1215: ;
                        	  1216: ;; Copy the second kernel address into the first for "FFFF.SSSS" dot commands.
                        	  1217: ;
06:F828 A53E            	  1218: DOT         LDA     REG2L
06:F82A 853C            	  1219:             STA     REG1L
06:F82C A53F            	  1220:             LDA     REG2H
06:F82E 853D            	  1221:             STA     REG1H
06:F830 60              	  1222:             RTS
                        	  1223: ;
                        	  1224: ;
06:F831 07              	  1225: DATA07      DB      $07         ;; Bitmask used in the TAB subroutine below
06:F832 60              	  1226:             RTS                 ;; Padding
                        	  1227: ;
                        	  1228: ;; Return key pressed at the end of a kernel command.
                        	  1229: ;
06:F833 A534            	  1230: RETURN      LDA     SAVEX       ; RETURN ONLY?
06:F835 F00F            	  1231:             BEQ     XMEM8
06:F837 20DFFC          	  1232:             JSR     SPACE       ; IF NOT, DO A SPACE FUNCTION
06:F83A 2028F8          	  1233:             JSR     DOT         ; REGISTER 1 = 2
06:F83D 68              	  1234: RETRTS      PLA                 ; POP RETURN ADDRESS
06:F83E 68              	  1235:             PLA
06:F83F A900            	  1236:             LDA     #$00        ; CLEAR STORE MODE
06:F841 8531            	  1237:             STA     STOFLG
06:F843 4C69FF          	  1238:             JMP     MON1        ; END OF KERNEL COMMAND INTERPRETATION
                        	  1239: ;
                        	  1240: ;; Display bytes from memory.
                        	  1241: ;
06:F846 AD7B05          	  1242: XMEM8       LDA     TXTMOD      ; 40 OR 80 COLUMN MODE?
06:F849 C910            	  1243:             CMP     #$10
06:F84B D003            	  1244:             BNE     *+5
06:F84D A90F            	  1245:             LDA     #$0F        ; 80 COLUMN MODE
06:F84F 2C              	  1246:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
06:F850 A907            	  1247:             LDA     #$07        ; 40 COLUMN MODE
06:F852 852E            	  1248:             STA     CHKSUM      ; USE CHKSUM AS A GENERAL REGISTER
                        	  1249: ;
06:F854 20C5FE          	  1250:             JSR     CROUT       ; CARRIAGE RETURN
06:F857 2085FC          	  1251:             JSR     INCRE2      ; INCREMENT REGISTER 1
06:F85A A53D            	  1252:             LDA     REG1H       ; PRINT ADDRESS
06:F85C 20C1FD          	  1253:             JSR     PRBYTE
06:F85F A53C            	  1254:             LDA     REG1L
06:F861 20C1FD          	  1255:             JSR     PRBYTE
06:F864 A9BD            	  1256:             LDA     #$BD        ; FOLLOWED BY '='
06:F866 20EDFD          	  1257:             JSR     MCOUT
                        	  1258: ;
06:F869 A000            	  1259:             LDY     #0          ; CLEAR OFFSET
06:F86B A9A0            	  1260: XMEM81      LDA     #$A0        ; ADD A SPACE CHARACTER
06:F86D 20EDFD          	  1261:             JSR     MCOUT
06:F870 B13C            	  1262:             LDA     (REG1L),Y   ; THEN THE MEMORY CONTENTS
06:F872 20C1FD          	  1263:             JSR     PRBYTE
06:F875 A53C            	  1264:             LDA     REG1L
06:F877 252E            	  1265:             AND     CHKSUM      ; EITHER MOD 8 OR MOD 16
06:F879 C52E            	  1266:             CMP     CHKSUM
06:F87B F0C0            	  1267:             BEQ     RETRTS      ; FINISHED?
06:F87D 2085FC          	  1268:             JSR     INCRE2      ; INCREMENT REGISTER 1
06:F880 4C6BF8          	  1269:             JMP     XMEM81      ; CONTINUE
                        	  1270: ;
                        	  1271: ;; Message "ERROR " with the high bit set in each of the ASCII bytes.
                        	  1272: ;
06:F883 C5              	  1273: ERRORM      DB      $C5, $D2, $D2, $CF, $D2, $A0
06:F884 D2
06:F885 D2
06:F886 CF
06:F887 D2
06:F888 A0
                        	  1274: ;
06:F889 A900            	  1275: OPERR       LDA     #0          ; FOR INVALID OPCODES
06:F88B 852F            	  1276:             STA     OPCODL      ; SET LENGTH = 0
06:F88D 60              	  1277:             RTS
                        	  1278: ;
06:F88E 4A              	  1279: LENGTH      LSR                 ; START CHECKING OPCODE
06:F88F B014            	  1280:             BCS     ODD         ; IF ODD, DO MORE
06:F891 4A              	  1281: ODDEVN      LSR                 ; SELECT NIBBLE
06:F892 A8              	  1282:             TAY                 ; USE Y AS POINTER
06:F893 B9F6F9          	  1283:             LDA     TABLE1,Y    ; GET LENGTH
06:F896 9004            	  1284:             BCC     LOWNIB      ; WHICH NIBBLE?
06:F898 4A              	  1285:             LSR                 ; HIGH NIBBLE
06:F899 4A              	  1286:             LSR
06:F89A 4A              	  1287:             LSR
06:F89B 4A              	  1288:             LSR
06:F89C 290F            	  1289: LOWNIB      AND     #$0F        ; TICK OUT HIGH BITS
06:F89E C906            	  1290:             CMP     #6          ; INVALID OPCODE?
06:F8A0 F0E7            	  1291:             BEQ     OPERR
06:F8A2 852F            	  1292:             STA     OPCODL      ; SAVE THE LENGTH
06:F8A4 60              	  1293:             RTS                 ; FINISHED
                        	  1294: ;
06:F8A5 6A              	  1295: ODD         ROR
06:F8A6 B0E1            	  1296:             BCS     OPERR       ; NO XXXXXX11 OPCODES
06:F8A8 49FF            	  1297:             EOR     #$FF
06:F8AA C95D            	  1298:             CMP     #$5D
06:F8AC F0DB            	  1299:             BEQ     OPERR       ; NO STA #---
06:F8AE 49FF            	  1300:             EOR     #$FF
06:F8B0 2987            	  1301:             AND     #$87        ; MASK BITS
06:F8B2 4C91F8          	  1302:             JMP     ODDEVN
                        	  1303: ;
                        	  1304: ;; Saving to cassette tape.
                        	  1305: ;
06:F8B5 A940            	  1306: MTSAVE      LDA     #64
06:F8B7 20F0F8          	  1307:             JSR     LEADER
06:F8BA 2CC5C1          	  1308:             BIT     TWOMHZ
06:F8BD 1003            	  1309:             BPL     *+5
06:F8BF A054            	  1310:             LDY     #84         ; FIRST BYTE
06:F8C1 2C              	  1311:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
06:F8C2 A025            	  1312:             LDY     #37
06:F8C4 A200            	  1313: TSAVE1      LDX     #0
06:F8C6 413C            	  1314:             EOR     (REG1L,X)
06:F8C8 852E            	  1315:             STA     CHKSUM
06:F8CA A13C            	  1316:             LDA     (REG1L,X)
06:F8CC 2018FE          	  1317:             JSR     WRBYTE
06:F8CF 2085FC          	  1318:             JSR     INCRE2
06:F8D2 2CC5C1          	  1319:             BIT     TWOMHZ
06:F8D5 1003            	  1320:             BPL     *+5
06:F8D7 A03E            	  1321:             LDY     #62         ; REST BYTES
06:F8D9 2C              	  1322:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
06:F8DA A01B            	  1323:             LDY     #27
06:F8DC A52E            	  1324:             LDA     CHKSUM
06:F8DE 90E4            	  1325:             BLT     TSAVE1
06:F8E0 2CC5C1          	  1326:             BIT     TWOMHZ
06:F8E3 1003            	  1327:             BPL     *+5
06:F8E5 A044            	  1328:             LDY     #68         ; THE LAST: CHECK-SUM
06:F8E7 2C              	  1329:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
06:F8E8 A020            	  1330:             LDY     #32
06:F8EA 2018FE          	  1331:             JSR     WRBYTE
06:F8ED 4C3AFF          	  1332:             JMP     MBELL
                        	  1333: ;
                        	  1334: ;
06:F8F0 2CC5C1          	  1335: LEADER      BIT     TWOMHZ      ; ONE OR TWO MHZ?
06:F8F3 1003            	  1336:             BPL     *+5         ; NORMALLY IT IS 1MHZ
06:F8F5 A09B            	  1337:             LDY     #155        ; BUT CAN BE 2MHZ
06:F8F7 2C              	  1338:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
06:F8F8 A049            	  1339:             LDY     #73         ; GOOD, 1MHZ
06:F8FA 2012F9          	  1340:             JSR     ZDELAY
06:F8FD D0F1            	  1341:             BNE     LEADER
06:F8FF 69FE            	  1342:             ADC     #$FE
06:F901 B0ED            	  1343:             BCS     LEADER
06:F903 2CC5C1          	  1344:             BIT     TWOMHZ
06:F906 1003            	  1345:             BPL     *+5
06:F908 A044            	  1346:             LDY     #68
06:F90A 2C              	  1347:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
06:F90B A01F            	  1348:             LDY     #31
06:F90D 2012F9          	  1349: WRTBIT      JSR     ZDELAY
06:F910 C8              	  1350:             INY
06:F911 C8              	  1351:             INY
06:F912 88              	  1352: ZDELAY      DEY
06:F913 D0FD            	  1353:             BNE     ZDELAY
06:F915 9010            	  1354:             BCC     WTAPE       ; ZERO IS SHORTER THAN ONE
06:F917 2CC5C1          	  1355:             BIT     TWOMHZ
06:F91A 1003            	  1356:             BPL     *+5
06:F91C A065            	  1357:             LDY     #101
06:F91E 2C              	  1358:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
06:F91F A02F            	  1359:             LDY     #47
06:F921 88              	  1360: ODELAY      DEY                 ; EXTRA DELAY FOR ONE
06:F922 D0FD            	  1361:             BNE     ODELAY
06:F924 4C27F9          	  1362:             JMP     WTAPE       ; TIME COMPENSATION
06:F927 AC20C0          	  1363: WTAPE       LDY     TAPEOU      ; TOGGLE TAPE OUTPUT
06:F92A 2CC5C1          	  1364:             BIT     TWOMHZ
06:F92D 1003            	  1365:             BPL     *+5
06:F92F A05A            	  1366:             LDY     #90
06:F931 2C              	  1367:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
06:F932 A02A            	  1368:             LDY     #42
06:F934 CA              	  1369:             DEX
06:F935 60              	  1370:             RTS
                        	  1371: ;
06:F936 60              	  1372:             DS      10,$60      ;; Padding
06:F937 *
                        	  1373: ;
                        	  1374: ;; Print the byte value in Y and then the value in X.
                        	  1375: ;
06:F940 98              	  1376: PRNYX       TYA                 ; PRINT Y
                        	  1377: ;
                        	  1378: ;; Print the byte value in A and then the value in X.
                        	  1379: ;
06:F941 20C1FD          	  1380: PRNAX       JSR     PRBYTE      ; PRINT A
06:F944 8A              	  1381:             TXA
06:F945 4CC1FD          	  1382:             JMP     PRBYTE
                        	  1383: ;
                        	  1384: ;; Print three spaces.
                        	  1385: ;
06:F948 A903            	  1386: PRNSPC      LDA     #$03
06:F94A 854E            	  1387:             STA     RNDNOL
06:F94C A9A0            	  1388:             LDA     #$A0
06:F94E 20EDFD          	  1389: SPCLP       JSR     MCOUT
06:F951 C64E            	  1390:             DEC     RNDNOL
06:F953 D0F9            	  1391:             BNE     SPCLP
06:F955 60              	  1392:             RTS
                        	  1393: ;
                        	  1394: ;; Read 8 bits from the cassette tape.
                        	  1395: ;
06:F956 A209            	  1396: RT8BIT      LDX     #$09
06:F958 CA              	  1397:             DEX
06:F959 48              	  1398: LP8BIT      PHA
06:F95A 2065F9          	  1399:             JSR     READPS
06:F95D 68              	  1400:             PLA
06:F95E 2A              	  1401:             ROL     A
06:F95F A039            	  1402:             LDY     #$39
06:F961 CA              	  1403:             DEX
06:F962 D0F5            	  1404:             BNE     LP8BIT
06:F964 60              	  1405:             RTS
                        	  1406: ;
06:F965 2068F9          	  1407: READPS      JSR     RT1BIT
06:F968 88              	  1408: RT1BIT      DEY
06:F969 88              	  1409:             DEY
06:F96A 2CC5C1          	  1410:             BIT     TWOMHZ
06:F96D 100A            	  1411:             BPL     READPS3
06:F96F E64E            	  1412:             INC     RNDNOL
06:F971 C64E            	  1413:             DEC     RNDNOL
06:F973 E64E            	  1414:             INC     RNDNOL
06:F975 C64E            	  1415:             DEC     RNDNOL
06:F977 EA              	  1416:             NOP
06:F978 EA              	  1417:             NOP
06:F979 AD60C0          	  1418: READPS3     LDA     TAPEIN
06:F97C 452F            	  1419:             EOR     LASTBI
06:F97E 1007            	  1420:             BPL     READPS4
06:F980 452F            	  1421:             EOR     LASTBI
06:F982 852F            	  1422:             STA     LASTBI
06:F984 C080            	  1423:             CPY     #$80
06:F986 60              	  1424:             RTS
06:F987 4C68F9          	  1425: READPS4     JMP     RT1BIT
                        	  1426: ;
                        	  1427: ;; Verify memory contents by comparing two regions.
                        	  1428: ;
06:F98A A000            	  1429: VERIFY      LDY     #$00
06:F98C B13C            	  1430:             LDA     (REG1L),Y
06:F98E D142            	  1431:             CMP     (REG4L),Y
06:F990 D006            	  1432:             BNE     DIFFER
06:F992 207FFC          	  1433: VERCOM      JSR     INCRE1
06:F995 90F3            	  1434:             BCC     VERIFY
06:F997 60              	  1435:             RTS
06:F998 20C5FE          	  1436: DIFFER      JSR     CROUT
06:F99B A53D            	  1437:             LDA     REG1H
06:F99D 20C1FD          	  1438:             JSR     PRBYTE
06:F9A0 A53C            	  1439:             LDA     REG1L
06:F9A2 20C1FD          	  1440:             JSR     PRBYTE
06:F9A5 A9BD            	  1441:             LDA     #$BD        ; PRINT CONTENT AFTER '='
06:F9A7 20EDFD          	  1442:             JSR     MCOUT
06:F9AA A000            	  1443:             LDY     #0
06:F9AC B13C            	  1444:             LDA     (REG1L),Y
06:F9AE 20C1FD          	  1445:             JSR     PRBYTE
06:F9B1 A9A0            	  1446:             LDA     #$A0        ; THEN SPACE
06:F9B3 20EDFD          	  1447:             JSR     MCOUT
06:F9B6 A9A8            	  1448:             LDA     #$A8        ; THEN THE UNMATCHED VALUE AFTER '('
06:F9B8 20EDFD          	  1449:             JSR     MCOUT
06:F9BB A000            	  1450:             LDY     #0
06:F9BD B142            	  1451:             LDA     (REG4L),Y
06:F9BF 20C1FD          	  1452:             JSR     PRBYTE
06:F9C2 A9A9            	  1453:             LDA     #$A9        ; ')'
06:F9C4 20EDFD          	  1454:             JSR     MCOUT
06:F9C7 4C92F9          	  1455:             JMP     VERCOM      ; NEXT
                        	  1456: ;
                        	  1457: ;; Handle a TAB character on input.
                        	  1458: ;
06:F9CA E0F8            	  1459: TAB         CPX     #248        ; NEAR END OF INPUT LINE?
06:F9CC B025            	  1460:             BGE     TABJMP      ; IF YES, DO NOTHING
06:F9CE A524            	  1461:             LDA     CHORZ       ; TRY TO DO TAB
06:F9D0 18              	  1462:             CLC
06:F9D1 6908            	  1463:             ADC     #8          ; TAB = ADVANCE 8 POS,
06:F9D3 C521            	  1464:             CMP     WNDWTH      ; EXCEED THE RIGHT END?
06:F9D5 B01C            	  1465:             BGE     TABJMP      ; IF YES, CANCEL
                        	  1466: ;
06:F9D7 20E6FD          	  1467:             JSR     C800IN      ; FOR DECUR AND ENCUR
06:F9DA ADFB06          	  1468: TAB1        LDA     TEMPA       ; NOW, DO TAB
06:F9DD 9D0002          	  1469:             STA     KEYBUF,X    ; COPY THINGS ON SCREEN
06:F9E0 E8              	  1470:             INX
06:F9E1 E624            	  1471:             INC     CHORZ
06:F9E3 A524            	  1472:             LDA     CHORZ
06:F9E5 2C31F8          	  1473:             BIT     DATA07      ; TAB POS. ARE QUANTIZED
06:F9E8 F009            	  1474:             BEQ     TABJMP      ; FINISHED?
06:F9EA 20A0CB          	  1475:             JSR     ENCUR       ; IF NOT, CONTINUE
06:F9ED 20DFCB          	  1476:             JSR     DECUR       ; COPYING CHARACTERS
06:F9F0 4CDAF9          	  1477:             JMP     TAB1
                        	  1478: ;
06:F9F3 4C71FD          	  1479: TABJMP      JMP     GETLN1      ; GO BACK
                        	  1480: ;
                        	  1481: ; TABLE1 CONTAINS:
                        	  1482: ; 1. 128 4-BIT LENGTHS FOR XXXXXXX0 TYPE OF OPCODES
                        	  1483: ; 2. 8 4-BIT LENGTHS FOR XXXXXX01 TYPE OF OPCODES
                        	  1484: ;    I.E. ORA,ANDmEOR,ADC,STA,LDA,CMP,SBC
                        	  1485: ;
06:F9F6 60              	  1486: TABLE1      DB      $60, $16, $00, $26, $61, $16, $60, $26
06:F9F7 16
06:F9F8 00
06:F9F9 26
06:F9FA 61
06:F9FB 16
06:F9FC 60
06:F9FD 26
06:F9FE 62              	  1487:             DB      $62, $11, $00, $22, $61, $16, $60, $26
06:F9FF 11
06:FA00 00
06:FA01 22
06:FA02 61
06:FA03 16
06:FA04 60
06:FA05 26
06:FA06 60              	  1488:             DB      $60, $16, $00, $22, $61, $16, $60, $26
06:FA07 16
06:FA08 00
06:FA09 22
06:FA0A 61
06:FA0B 16
06:FA0C 60
06:FA0D 26
06:FA0E 60              	  1489:             DB      $60, $16, $00, $22, $61, $16, $60, $26
06:FA0F 16
06:FA10 00
06:FA11 22
06:FA12 61
06:FA13 16
06:FA14 60
06:FA15 26
06:FA16 66              	  1490:             DB      $66, $11, $00, $22, $61, $16, $60, $26
06:FA17 11
06:FA18 00
06:FA19 22
06:FA1A 61
06:FA1B 16
06:FA1C 60
06:FA1D 26
06:FA1E 11              	  1491:             DB      $11, $11, $00, $22, $61, $11, $00, $22
06:FA1F 11
06:FA20 00
06:FA21 22
06:FA22 61
06:FA23 11
06:FA24 00
06:FA25 22
06:FA26 61              	  1492:             DB      $61, $11, $00, $22, $61, $16, $60, $26
06:FA27 11
06:FA28 00
06:FA29 22
06:FA2A 61
06:FA2B 16
06:FA2C 60
06:FA2D 26
06:FA2E 61              	  1493:             DB      $61, $11, $00, $22, $61, $16, $60, $26
06:FA2F 11
06:FA30 00
06:FA31 22
06:FA32 61
06:FA33 16
06:FA34 60
06:FA35 26
06:FA36 11              	  1494:             DB      $11, $21, $11, $22
06:FA37 21
06:FA38 11
06:FA39 22
                        	  1495: ;
06:FA3A 60              	  1496:             DS      6, $60      ;; Padding
06:FA3B *
                        	  1497: ;
                        	  1498: ;; IRQ or BRK handler
                        	  1499: ;;
                        	  1500: ;; Note: The user-supplied IRQ handler pointed to by "IRQVER" must restore
                        	  1501: ;; A from the "ACC" variable at address $45 the zero page before returning.
                        	  1502: ;; If not, the foreground code that was interrupted will act very strangely.
                        	  1503: ;;
                        	  1504: ;; Similarly, the BREAK handler pointed to by "BRKVER" must restore all
                        	  1505: ;; registers from addresses $45 to $49 in the zero page before returning.
                        	  1506: ;
                        	  1507:             ORIGIN  $FA40
                        	     1M                 ORG     $FA40
                        	  1508: ;
07:FA40 8545            	  1509: IRQBRK      STA     ACC         ; SAVE A
07:FA42 68              	  1510:             PLA                 ; GET STATUS REGISTER
07:FA43 48              	  1511:             PHA
07:FA44 2C49FB          	  1512:             BIT     DATA10      ; INTERRUPT OR BREAK?
07:FA47 D003            	  1513:             BNE     BREAK
07:FA49 6CFE03          	  1514:             JMP     (IRQVER)    ;; Jump to user-supplied IRQ handler.
07:FA4C 68              	  1515: BREAK       PLA                 ; GET BACK STATUS REGISTER
07:FA4D 8548            	  1516:             STA     STATUS      ; SAVE IT
07:FA4F 68              	  1517:             PLA                 ; SAVE RETURN ADDRESS
07:FA50 853A            	  1518:             STA     PCL
07:FA52 68              	  1519:             PLA
07:FA53 853B            	  1520:             STA     PCH
07:FA55 8646            	  1521:             STX     REGX        ; SAVE REGISTERS
07:FA57 8447            	  1522:             STY     REGY        ; SAVE REGISTERS
07:FA59 BA              	  1523:             TSX
07:FA5A 8649            	  1524:             STX     STACKP
07:FA5C 6CF003          	  1525:             JMP     (BRKVER)    ;; Jump to user-supplied BREAK handler.
                        	  1526: ;
07:FA5F 4C65FF          	  1527:             JMP     MON         ; DUMMY
                        	  1528: ;
                        	  1529: ;; RESET handler
                        	  1530: ;
07:FA62 4C71D5          	  1531: RESET       JMP     RESET0
                        	  1532: ;
                        	  1533: ;; Default BREAK handler
                        	  1534: ;
07:FA65 20C5FE          	  1535: BREAK1      JSR     CROUT       ; CARRIAGE RETURN FIRST
07:FA68 A200            	  1536:             LDX     #$00        ; INIT POINTER & COUNTER
07:FA6A BDBDFC          	  1537: BREAK2      LDA     BRKMES,X    ; PRINT BREAK MESSAGE
07:FA6D 20EDFD          	  1538:             JSR     MCOUT
07:FA70 E8              	  1539:             INX                 ; FINISHED?
07:FA71 E00B            	  1540:             CPX     #11
07:FA73 D0F5            	  1541:             BNE     BREAK2
07:FA75 A53A            	  1542:             LDA     PCL         ; PRINT ADDRESS
07:FA77 E902            	  1543:             SBC     #2
07:FA79 48              	  1544:             PHA
07:FA7A A53B            	  1545:             LDA     PCH
07:FA7C E900            	  1546:             SBC     #0
07:FA7E 20C1FD          	  1547:             JSR     PRBYTE
07:FA81 68              	  1548:             PLA
07:FA82 20C1FD          	  1549:             JSR     PRBYTE
07:FA85 4C65FF          	  1550:             JMP     MON         ; THEN GOTO KERNEL
                        	  1551: ;
                        	  1552: ;; Table of kernel monitor command characters.
                        	  1553: ;
07:FA88 83              	  1554: COMTBL      DB      $83         ; CTRL-C
07:FA89 82              	  1555:             DB      $82         ; CTRL-B
07:FA8A 99              	  1556:             DB      $99         ; CTRL-Y
07:FA8B 8B              	  1557:             DB      $8B         ; CTRL-K
07:FA8C 90              	  1558:             DB      $90         ; CTRL-P
07:FA8D CE              	  1559:             DB      $CE         ; N
07:FA8E C9              	  1560:             DB      $C9         ; I
07:FA8F AE              	  1561:             DB      $AE         ; .
07:FA90 B3              	  1562:             DB      $B3         ; :
07:FA91 B5              	  1563:             DB      $B5         ; (
07:FA92 C7              	  1564:             DB      $C7         ; G
07:FA93 D2              	  1565:             DB      $D2         ; R
07:FA94 D7              	  1566:             DB      $D7         ; W
07:FA95 CD              	  1567:             DB      $CD         ; M
07:FA96 D6              	  1568:             DB      $D6         ; V
07:FA97 8D              	  1569:             DB      $8D         ; RETURN
07:FA98 A0              	  1570:             DB      $A0         ; SPACE
                        	  1571: ;
                        	  1572: ;; Table of kernel monitor command handlers.
                        	  1573: ;
07:FA99 02E0            	  1574: ADRTBL      DW      BASICW-1
07:FA9B FFDF            	  1575:             DW      BASICC-1
07:FA9D F703            	  1576:             DW      USRADR-1
07:FA9F 8CFE            	  1577:             DW      SETIN-1
07:FAA1 96FE            	  1578:             DW      SETOU-1
07:FAA3 83FE            	  1579:             DW      SETNOR-1
07:FAA5 7FFE            	  1580:             DW      SETINV-1
07:FAA7 27F8            	  1581:             DW      DOT-1
07:FAA9 05FC            	  1582:             DW      COLON-1
07:FAAB 3FFB            	  1583:             DW      MODE3-1
07:FAAD CFFE            	  1584:             DW      GO-1
07:FAAF FCFE            	  1585:             DW      TLOAD-1
07:FAB1 B4F8            	  1586:             DW      MTSAVE-1
07:FAB3 2BFE            	  1587:             DW      MOVE-1
07:FAB5 89F9            	  1588:             DW      VERIFY-1
07:FAB7 32F8            	  1589:             DW      RETURN-1
07:FAB9 DEFC            	  1590:             DW      SPACE-1
                        	  1591: ;
                        	  1592: ;; Startup banner and logo.  Encoded with the MSB set in the ASCII characters.
                        	  1593: ;;
                        	  1594: ;; "MICROSOFT BASIC V.T. VERSION 2.2<CR><CR>"
                        	  1595: ;; "(C) COPYRIGHT V.T. 1984<CR><CR><NUL>"
                        	  1596: ;
07:FABB CD              	  1597: LOGO        DB      $CD, $C9, $C3, $D2, $CF, $D3
07:FABC C9
07:FABD C3
07:FABE D2
07:FABF CF
07:FAC0 D3
07:FAC1 CF              	  1598:             DB      $CF, $C6, $D4, $A0, $C2, $C1
07:FAC2 C6
07:FAC3 D4
07:FAC4 A0
07:FAC5 C2
07:FAC6 C1
07:FAC7 D3              	  1599:             DB      $D3, $C9, $C3, $A0, $D6, $AE
07:FAC8 C9
07:FAC9 C3
07:FACA A0
07:FACB D6
07:FACC AE
07:FACD D4              	  1600:             DB      $D4, $AE, $A0, $D6, $C5, $D2
07:FACE AE
07:FACF A0
07:FAD0 D6
07:FAD1 C5
07:FAD2 D2
07:FAD3 D3              	  1601:             DB      $D3, $C9, $CF, $CE, $A0, $B2
07:FAD4 C9
07:FAD5 CF
07:FAD6 CE
07:FAD7 A0
07:FAD8 B2
07:FAD9 AE              	  1602:             DB      $AE, $B2, $8D, $8D, $A8, $C3
07:FADA B2
07:FADB 8D
07:FADC 8D
07:FADD A8
07:FADE C3
07:FADF A9              	  1603:             DB      $A9, $A0, $C3, $CF, $D0, $D9
07:FAE0 A0
07:FAE1 C3
07:FAE2 CF
07:FAE3 D0
07:FAE4 D9
07:FAE5 D2              	  1604:             DB      $D2, $C9, $C7, $C8, $D4, $A0
07:FAE6 C9
07:FAE7 C7
07:FAE8 C8
07:FAE9 D4
07:FAEA A0
07:FAEB D6              	  1605:             DB      $D6, $AE, $D4, $AE, $A0, $B1
07:FAEC AE
07:FAED D4
07:FAEE AE
07:FAEF A0
07:FAF0 B1
07:FAF1 B9              	  1606:             DB      $B9, $B8, $B4, $8D, $8D, $00
07:FAF2 B8
07:FAF3 B4
07:FAF4 8D
07:FAF5 8D
07:FAF6 00
                        	  1607: ;
07:FAF7 60              	  1608:             DS      11, $60     ;; Padding
07:FAF8 *
                        	  1609: ;
                        	  1610: ;; Read paddle inputs at 1MHz
                        	  1611: ;
                        	  1612:             ORIGIN  $FB02
                        	     1M                 ORG     $FB02
08:FB02 BD64C0          	  1613: PREAD1      LDA     PADDL0,X    ; 3 CYCLES
08:FB05 1004            	  1614:             BPL     PDLRTS      ; 2 CYCLES
08:FB07 C8              	  1615:             INY                 ; 2 CYCLES
08:FB08 D0F8            	  1616:             BNE     PREAD1      ; 3 CYCLES
08:FB0A 88              	  1617:             DEY
08:FB0B 60              	  1618: PDLRTS      RTS
                        	  1619: ;
                        	  1620: ;; Read paddle inputs at 2MHz
                        	  1621: ;
08:FB0C BD64C0          	  1622: PREAD2      LDA     PADDL0,X    ; 3 CYCLES
08:FB0F BD64C0          	  1623:             LDA     PADDL0,X    ; 3 CYCLES
08:FB12 10F7            	  1624:             BPL     PDLRTS      ; 2 CYCLES
08:FB14 10F5            	  1625:             BPL     PDLRTS      ; 2 CYCLES
08:FB16 C8              	  1626:             INY                 ; 2 CYCLES
08:FB17 EA              	  1627:             NOP                 ; 2 CYCLES
08:FB18 852A            	  1628:             STA     SBAS2L      ; 3 CYCLES
08:FB1A D0F0            	  1629:             BNE     PREAD2      ; 3 CYCLES
08:FB1C 88              	  1630:             DEY
08:FB1D 60              	  1631:             RTS
                        	  1632: ;
                        	  1633: ;; Read paddle inputs.
                        	  1634: ;
08:FB1E A000            	  1635: MPREAD      LDY     #$00
08:FB20 2CC5C1          	  1636:             BIT     TWOMHZ      ; 1 OR 2 MHZ?
08:FB23 8D70C0          	  1637:             STA     PDLRES      ; RESET TIMER
08:FB26 10DA            	  1638:             BPL     PREAD1      ; FOR 1MHZ
08:FB28 30E2            	  1639:             BMI     PREAD2      ; FOR 2MHZ
                        	  1640: ;
08:FB2A 60              	  1641:             DS      5,$60       ;; Padding
08:FB2B *
                        	  1642: ;
                        	  1643: ;; Initialize the text display at system startup.
                        	  1644: ;
08:FB2F EA              	  1645: VZINIT      NOP                 ; SPACE FILLER
08:FB30 EA              	  1646:             NOP
08:FB31 EA              	  1647:             NOP
08:FB32 EA              	  1648:             NOP
08:FB33 AD56C0          	  1649:             LDA     VZSELF      ;; Turn off emulation
08:FB36 AD54C0          	  1650:             LDA     VZPAG1      ;; Display primary graphics display
08:FB39 AD51C0          	  1651: SETTXT      LDA     VZTEXT      ;; Set text mode
08:FB3C A900            	  1652:             LDA     #$00
08:FB3E F00B            	  1653:             BEQ     MSETWN      ;; Always
                        	  1654: ;
                        	  1655: ;; Copy kernel second address into fourth address.
                        	  1656: ;
08:FB40 A53E            	  1657: MODE3       LDA     REG2L
08:FB42 8542            	  1658:             STA     REG4L
08:FB44 A53F            	  1659:             LDA     REG2H
08:FB46 8543            	  1660:             STA     REG4H
08:FB48 60              	  1661:             RTS
                        	  1662: ;
                        	  1663: ;
08:FB49 10              	  1664: DATA10      DB      $10         ;; Constant for the IRQBRK subroutine.
08:FB4A 00              	  1665: SIGNAT      DB      $00         ; SIGNATURE BYTE
                        	  1666: ;
                        	  1667: ;; Set initial window size for the text display.
                        	  1668: ;
08:FB4B 8522            	  1669: MSETWN      STA     WNDTOP      ; SET FULL SCREEN SIZE
08:FB4D A900            	  1670:             LDA     #0          ; 24*40 OR 24*80
08:FB4F 8520            	  1671:             STA     WNDLFT
08:FB51 A918            	  1672:             LDA     #24
08:FB53 8523            	  1673:             STA     WNDBTM
08:FB55 EA              	  1674:             NOP
08:FB56 2012F8          	  1675:             JSR     SETWTH      ; 40 OR 80?
08:FB59 A917            	  1676:             LDA     #23         ; PLACE THE CURSOR AT THE BOTTOM LINE
08:FB5B 8525            	  1677: MTABV       STA     CVERT
08:FB5D 2022FC          	  1678:             JSR     MVTAB
08:FB60 60              	  1679:             RTS
                        	  1680: ;
                        	  1681: ;; Initialize BRKVER and RESTVR in the zero page with
                        	  1682: ;; pointers to the default BREAK and RESET handlers.
                        	  1683: ;;
                        	  1684: ;; RESTVR+2 is set to (RESTVR+1) ^ $A5 which allows the
                        	  1685: ;; system to detect if the next reset is a warm start or not.
                        	  1686: ;
08:FB61 A004            	  1687: PRESP3      LDY     #4
08:FB63 B9D2FB          	  1688: LOOP1       LDA     P3VECT-1,Y
08:FB66 99EF03          	  1689:             STA     BRKVER-1,Y
08:FB69 88              	  1690:             DEY
08:FB6A D0F7            	  1691:             BNE     LOOP1
08:FB6C 4C6FFB          	  1692:             JMP     SRESTV
                        	  1693: ;
                        	  1694: ;; Set reset vector check byte at RESTVR+2.
                        	  1695: ;
08:FB6F ADF303          	  1696: SRESTV      LDA     RESTVR+1
08:FB72 49A5            	  1697:             EOR     #$A5
08:FB74 8DF403          	  1698:             STA     RESTVR+2
08:FB77 60              	  1699:             RTS
                        	  1700: ;
                        	  1701: ;; Set 40-column text mode.
                        	  1702: ;
08:FB78 A904            	  1703: TEXT40      LDA     #$04        ; ENABLE 40 COLUMN TEXT
08:FB7A 208AFB          	  1704:             JSR     BEAUTI
08:FB7D 2C4CC0          	  1705:             BIT     VZTX40
08:FB80 60              	  1706:             RTS
                        	  1707: ;
                        	  1708: ;; Set 80-column text mode.
                        	  1709: ;
08:FB81 A910            	  1710: TEXT80      LDA     #$10        ; ENABLE 80 COLUMN TEXT
08:FB83 208AFB          	  1711:             JSR     BEAUTI
08:FB86 2C4FC0          	  1712:             BIT     VZTX80
08:FB89 60              	  1713:             RTS
                        	  1714: ;
08:FB8A 8D7B05          	  1715: BEAUTI      STA     TXTMOD
08:FB8D 2CC3C1          	  1716:             BIT     VERTSC      ; CHANGE DURING VERTICAL
08:FB90 30FB            	  1717:             BMI     *-3         ; RETRACE PERIOD
08:FB92 2C56C0          	  1718:             BIT     VZSELF      ;; Turn off emulation
08:FB95 2C51C0          	  1719:             BIT     VZTEXT      ;; Set text mode
08:FB98 60              	  1720:             RTS
                        	  1721: ;
                        	  1722: ;; Display welcome message at startup.
                        	  1723: ;
08:FB99 2058FC          	  1724: TITLE       JSR     F8HOME
08:FB9C A200            	  1725:             LDX     #0          ; USE X AS COUNTER AND POINTER
08:FB9E BDBBFA          	  1726: TITLE1      LDA     LOGO,X
08:FBA1 F006            	  1727:             BEQ     TITRTS      ; END?
08:FBA3 20EDFD          	  1728:             JSR     MCOUT       ; DISPLAY OUR LOGO
08:FBA6 E8              	  1729:             INX
08:FBA7 D0F5            	  1730:             BNE     TITLE1      ; ALWAYS
08:FBA9 60              	  1731: TITRTS      RTS
                        	  1732: ;
                        	  1733: ;; Initialize the function key buffer.
                        	  1734: ;
08:FBAA 20C7FB          	  1735: INFKEY      JSR     FRAM0I      ; GET FUNCTION KEY BUFFER
08:FBAD A218            	  1736:             LDX     #24
08:FBAF A9A0            	  1737:             LDA     #$A0        ; FILL WITH SPACES
08:FBB1 9D0048          	  1738: INFKE1      STA     KEYFLG,X    ; REMEMBER X=24?
08:FBB4 CA              	  1739:             DEX
08:FBB5 10FA            	  1740:             BPL     INFKE1      ; ALSO DEACTIVATE FUNCTION KEY
08:FBB7 4CCDFB          	  1741:             JMP     FRAM0O      ; O.K., FINISHED!
                        	  1742: ;
08:FBBA 60              	  1743:             DS      7, $60      ;; Padding
08:FBBB *
                        	  1744: ;
                        	  1745: ;; Routines for brining the $C800 80-column display firmware
                        	  1746: ;; into the memory map so that those functions can called from
                        	  1747: ;; the main monitor code.
                        	  1748: ;
                        	  1749:             ORIGIN  $FBC1
                        	     1M                 ORG     $FBC1
09:FBC1 20E6FD          	  1750: FADRCAL     JSR     C800IN
09:FBC4 4C41CB          	  1751:             JMP     ADRCAL
                        	  1752: ;
                        	  1753: ; FRAM0I AND FRAM0U SHOULD BE CALLED WHEN YOU ARE OUTSIDE C8
                        	  1754: ; WHEN IN C8, YOU CAN SIMPLY CALL RAM0IN AND RAM0OU.
                        	  1755: ;
09:FBC7 20E6FD          	  1756: FRAM0I      JSR     C800IN
09:FBCA 4C0DCC          	  1757:             JMP     RAM0IN
                        	  1758: ;
                        	  1759: ;
09:FBCD 20E6FD          	  1760: FRAM0O      JSR     C800IN
09:FBD0 4C17CC          	  1761:             JMP     RAM0OU
                        	  1762: ;
                        	  1763: ;; Default interrupt vector handlers for BREAK and RESET.
                        	  1764: ;; These are copied to BRKVER and RESTVR in the zero page at startup.
                        	  1765: ;
09:FBD3 65FA            	  1766: P3VECT      DW      BREAK1
09:FBD5 00E0            	  1767:             DW      BASICC
                        	  1768: ;
09:FBD7 60              	  1769:             DS      2,$60       ;; Padding
09:FBD8 *
                        	  1770: ;
                        	  1771: ;
09:FBD9 C987            	  1772: FBELL       CMP     #$87        ; CTRL-G
09:FBDB D0F0            	  1773:             BNE     FRAM0O
09:FBDD EA              	  1774:             NOP
09:FBDE EA              	  1775:             NOP
09:FBDF EA              	  1776:             NOP
09:FBE0 EA              	  1777:             NOP
09:FBE1 EA              	  1778:             NOP
09:FBE2 EA              	  1779:             NOP                 ; FILL SPACE
09:FBE3 EA              	  1780:             NOP
09:FBE4 20E6FD          	  1781:             JSR     C800IN
09:FBE7 4C2ECA          	  1782:             JMP     BELL
                        	  1783: ;
                        	  1784: ;
09:FBEA 20E6FD          	  1785: ENTRY1      JSR     C800IN
09:FBED 4C18CA          	  1786:             JMP     STORAD
                        	  1787: ;
09:FBF0 20EAFB          	  1788: FENTRY1     JSR     ENTRY1
09:FBF3 60              	  1789:             RTS
                        	  1790: ;
                        	  1791: ;
09:FBF4 20E6FD          	  1792: FADVANC     JSR     C800IN
09:FBF7 4C20CA          	  1793:             JMP     ADVANC
                        	  1794: ;
                        	  1795: ;; Intialize the 76489 sound generator chip.
                        	  1796: ;
09:FBFA A003            	  1797: SONINT      LDY     #3          ; TURN SOUND GEN. OFF
09:FBFC B916FC          	  1798: SOUND1      LDA     DEAF,Y
09:FBFF 202AFC          	  1799:             JSR     AUDOUT
09:FC02 88              	  1800:             DEY
09:FC03 10F7            	  1801:             BPL     SOUND1
09:FC05 60              	  1802:             RTS
                        	  1803: ;
                        	  1804: ;; Handler for the kernel monitor's ":" command.
                        	  1805: ;
09:FC06 A999            	  1806: COLON       LDA     #$99
09:FC08 8531            	  1807:             STA     STOFLG
09:FC0A 4C28F8          	  1808:             JMP     DOT         ; REGISTER 1=2
                        	  1809: ;
09:FC0D 60              	  1810:             DS      3, $60      ;; Padding
09:FC0E *
                        	  1811: ;
                        	  1812: ;
09:FC10 20E6FD          	  1813: FBS         JSR     C800IN
09:FC13 4C54CA          	  1814:             JMP     BS
                        	  1815: ;
                        	  1816: ; DATA USED TO TURN THE SOUND GENERATOR OFF
                        	  1817: ;
09:FC16 9F              	  1818: DEAF        DB      $9F, $BF, $DF, $FF
09:FC17 BF
09:FC18 DF
09:FC19 FF
                        	  1819: ;
                        	  1820: ;
09:FC1A 20E6FD          	  1821: FUP         JSR     C800IN
09:FC1D 4C5ECA          	  1822:             JMP     UP
                        	  1823: ;
09:FC20 60              	  1824:             DS      2, $60      ;; Padding
09:FC21 *
                        	  1825: ;
                        	  1826: ;
09:FC22 A525            	  1827: MVTAB       LDA     CVERT
09:FC24 20E6FD          	  1828:             JSR     C800IN
09:FC27 4C41CB          	  1829:             JMP     ADRCAL
                        	  1830: ;
                        	  1831: ;; Send data to the 76489 sound generator chip.
                        	  1832: ;
09:FC2A 8D68C0          	  1833: AUDOUT      STA     SONGEN      ; SEND DATA TO SOUND GEN.
09:FC2D 2CC2C1          	  1834:             BIT     HORZSC      ; WAIT FOR 1 HORIZONTAL
09:FC30 30FB            	  1835:             BMI     *-3         ; SYNC PERIOD
09:FC32 2CC2C1          	  1836:             BIT     HORZSC
09:FC35 10FB            	  1837:             BPL     *-3
09:FC37 60              	  1838:             RTS
                        	  1839: ;
                        	  1840: ;; Find the starting bit on the cassette tape.
                        	  1841: ;
09:FC38 A024            	  1842: FNDSTB      LDY     #36         ; READ THE SYNC PERIOD
09:FC3A 2068F9          	  1843:             JSR     RT1BIT
09:FC3D B0F9            	  1844:             BCS     FNDSTB
09:FC3F 60              	  1845:             RTS
                        	  1846: ;
09:FC40 60              	  1847:             DS      2, $60      ;; Padding
09:FC41 *
                        	  1848: ;
                        	  1849: ;
09:FC42 20E6FD          	  1850: FCLREOP     JSR     C800IN
09:FC45 4C7FCA          	  1851:             JMP     CLREOP
                        	  1852: ;
                        	  1853: ;
09:FC48 20E6FD          	  1854: ENTRY2      JSR     C800IN
09:FC4B 4CA4CA          	  1855:             JMP     CRLF
                        	  1856: ;
                        	  1857: ;; Send output to the printer driver.
                        	  1858: ;
09:FC4E 20F0FD          	  1859: MOUTS1      JSR     MCOUT1      ; FOR PRINTER DRIVER
09:FC51 8DFFCF          	  1860:             STA     ROMCLR
09:FC54 8D00C1          	  1861:             STA     $C100       ; ENABLE PRINTER DRIVER
09:FC57 60              	  1862:             RTS
                        	  1863: ;
                        	  1864: ;
09:FC58 20E6FD          	  1865: F8HOME      JSR     C800IN      ; HOME OF BASIC
09:FC5B 4C76CA          	  1866:             JMP     CLSCRN      ; = CLEAR SCREEN OF PASCAL
                        	  1867: ;
09:FC5E 60              	  1868:             DS      4, $60      ; FILL SPACE
09:FC5F *
                        	  1869: ;
                        	  1870: ;
09:FC62 2048FC          	  1871: FCRLF       JSR     ENTRY2
09:FC65 60              	  1872:             RTS
                        	  1873: ;
                        	  1874: ;
09:FC66 20E6FD          	  1875: FLF         JSR     C800IN
09:FC69 4CA7CA          	  1876:             JMP     LF
                        	  1877: ;
                        	  1878: ;
09:FC6C 48              	  1879: MWAIT1      PHA                 ; SAVE MAJOR TIMER
09:FC6D 6901            	  1880: MWAIT2      ADC     #1          ; MINOR TIMER
09:FC6F D0FC            	  1881:             BNE     MWAIT2      ; CARRY=0 FOR NON-EQUAL
09:FC71 68              	  1882:             PLA                 ; GET BACK MAJOR TIMER
09:FC72 6900            	  1883:             ADC     #0          ; N.B. CARRY=1 FOR NOW
09:FC74 D0F6            	  1884:             BNE     MWAIT1      ; CARRY=0 FOR NON-EQUAL
09:FC76 60              	  1885:             RTS                 ; ALL FINISHED!
09:FC77 49FF            	  1886: MWAIT       EOR     #$FF        ; FORM 2's COMPLEMENT
09:FC79 18              	  1887:             CLC
09:FC7A 6901            	  1888:             ADC     #1
09:FC7C 4C6CFC          	  1889:             JMP     MWAIT1
                        	  1890: ;
                        	  1891: ;; Increment kernel monitor addresses.
                        	  1892: ;
09:FC7F E642            	  1893: INCRE1      INC     REG4L       ; INCREMENT REG4L,$43
09:FC81 D002            	  1894:             BNE     *+4
09:FC83 E643            	  1895:             INC     REG4H
09:FC85 A53D            	  1896: INCRE2      LDA     REG1H       ; COMPARE REG1L,$3D WITH
09:FC87 C53F            	  1897:             CMP     REG2H       ; REG2H,$3F
09:FC89 9006            	  1898:             BLT     INCRE3
09:FC8B D004            	  1899:             BNE     INCRE3
09:FC8D A53C            	  1900:             LDA     REG1L
09:FC8F C53E            	  1901:             CMP     REG2L
09:FC91 E63C            	  1902: INCRE3      INC     REG1L       ; CARRY HAS MEANING NOW
09:FC93 D002            	  1903:             BNE     *+4         ; INCREMENT REG1L,$3D
09:FC95 E63D            	  1904:             INC     REG1H
09:FC97 60              	  1905:             RTS
                        	  1906: ;
09:FC98 60              	  1907:             DS      4, $60      ;; Padding
09:FC99 *
                        	  1908: ;
09:FC9C A424            	  1909: FCLREOL     LDY     CHORZ
09:FC9E 20E6FD          	  1910:             JSR     C800IN
09:FCA1 4C99CA          	  1911:             JMP     CLEOLZ
                        	  1912: ;
09:FCA4 60              	  1913:             DS      4, $60      ;; Padding
09:FCA5 *
                        	  1914: ;
                        	  1915: ;
09:FCA8 4C77FC          	  1916: FMWAIT      JMP     MWAIT
                        	  1917: ;
09:FCAB 60              	  1918:             DS      9, $60      ;; Padding
09:FCAC *
                        	  1919: ;
                        	  1920: ;
09:FCB4 E642            	  1921: INCREG4     INC     REG4L
09:FCB6 D002            	  1922:             BNE     *+4
09:FCB8 E643            	  1923:             INC     REG4H
09:FCBA 4C85FC          	  1924:             JMP     INCRE2
                        	  1925: ;
                        	  1926: ;; Message to display when BREAK occurs.
                        	  1927: ;;
                        	  1928: ;; "BREAK AT $" with the MSB set in the ASCII characters.
                        	  1929: ;
09:FCBD A1              	  1930: BRKMES      DB      $A1, $C2, $D2, $C5, $C1, $CB, $A0, $C1, $D4, $A0, $A4
09:FCBE C2
09:FCBF D2
09:FCC0 C5
09:FCC1 C1
09:FCC2 CB
09:FCC3 A0
09:FCC4 C1
09:FCC5 D4
09:FCC6 A0
09:FCC7 A4
                        	  1931: ;
09:FCC8 60              	  1932:             RTS                 ;; Padding
                        	  1933: ;
                        	  1934: ;
09:FCC9 38              	  1935: HDELAY      SEC                 ; BYPASS SOME OF THE HEADER
09:FCCA A9B4            	  1936:             LDA     #180        ; ABOUT 3 SECONDS
09:FCCC 2CC3C1          	  1937: HDELA1      BIT     VERTSC      ; REFERENCE CLOCK
09:FCCF 30FB            	  1938:             BMI     *-3
09:FCD1 2CC3C1          	  1939:             BIT     VERTSC
09:FCD4 10FB            	  1940:             BPL     *-3
09:FCD6 E901            	  1941:             SBC     #1
09:FCD8 D0F2            	  1942:             BNE     HDELA1
09:FCDA A9FF            	  1943:             LDA     #$FF        ; PREPARE CHECK-SUM
09:FCDC 852E            	  1944:             STA     CHKSUM
09:FCDE 60              	  1945:             RTS
                        	  1946: ;
                        	  1947: ;; Kernel monitor space command.
                        	  1948: ;
09:FCDF A531            	  1949: SPACE       LDA     STOFLG      ; STORE OR EXAMINE?
09:FCE1 C999            	  1950:             CMP     #$99
09:FCE3 D009            	  1951:             BNE     EXAMIN
09:FCE5 A000            	  1952:             LDY     #0          ; STORE
09:FCE7 A53E            	  1953:             LDA     REG2L
09:FCE9 913C            	  1954:             STA     (REG1L),Y
09:FCEB 4C85FC          	  1955:             JMP     INCRE2      ; UPDATE POINTER
09:FCEE 4C4BFE          	  1956: EXAMIN      JMP     MEMXM
                        	  1957: ;
                        	  1958: ;; Check RESTVR for a warm reset to see if we should jump
                        	  1959: ;; somewhere other than BASIC.
                        	  1960: ;
09:FCF1 ADF303          	  1961: DEBUG1      LDA     RESTVR+1    ;; Is RESTVR equal to $E000?
09:FCF4 C9E0            	  1962:             CMP     #$E0
09:FCF6 D008            	  1963:             BNE     NONRST
09:FCF8 ADF203          	  1964:             LDA     RESTVR
09:FCFB D003            	  1965:             BNE     NONRST
09:FCFD 4C08D6          	  1966:             JMP     NODRIV      ;; Yes, so continue with normal BASIC startup.
09:FD00 6CF203          	  1967: NONRST      JMP     (RESTVR)    ;; Jump to the user-supplied reset handler.
                        	  1968: ;
09:FD03 60              	  1969:             DS      9, $60      ;; Padding
09:FD04 *
                        	  1970: ;
                        	  1971: ;; Read a key from the current input device.
                        	  1972: ;
                        	  1973:             ORIGIN  $FD0C
                        	     1M                 ORG     $FD0C
0A:FD0C 20E6FD          	  1974: MRDKEY      JSR     C800IN
0A:FD0F 20A0CB          	  1975:             JSR     ENCUR
0A:FD12 ADFB06          	  1976:             LDA     TEMPA
0A:FD15 6C3800          	  1977:             JMP     (INSWL)
                        	  1978: ;
0A:FD18 60              	  1979:             DS      3, $60      ;; Padding
0A:FD19 *
                        	  1980: ;
                        	  1981: ;; Read a key from the actual keyboard.
                        	  1982: ;
0A:FD1B 20E6FD          	  1983: MINKEY      JSR     C800IN
0A:FD1E 8435            	  1984:             STY     SAVEY       ; SAVE REGISTER Y
0A:FD20 204DC8          	  1985:             JSR     KEYIN       ; USE PASCAL READ KEY ROUTINE
0A:FD23 20DFCB          	  1986:             JSR     DECUR       ; ON EXIT DO THIS
0A:FD26 A435            	  1987:             LDY     SAVEY       ; RECOVER Y
0A:FD28 60              	  1988:             RTS
                        	  1989: ;
0A:FD29 60              	  1990:             DS      3, $60      ; FILL SPACE
0A:FD2A *
                        	  1991: ;
                        	  1992: ;; Handle escape sequences from the current input device.
                        	  1993: ;
0A:FD2C 200CFD          	  1994: MESC        JSR     MRDKEY      ; ESC WHAT?
0A:FD2F 20E6FD          	  1995:             JSR     C800IN      ; FOR NON-KEYBOARD INPUT CASE
0A:FD32 20F6CB          	  1996:             JSR     ESCX
                        	  1997: ;
                        	  1998: ;; Read a character from the current input device.
                        	  1999: ;
0A:FD35 200CFD          	  2000: MRDCHR      JSR     MRDKEY
0A:FD38 C99B            	  2001:             CMP     #$9B        ; ESC?
0A:FD3A F0F0            	  2002:             BEQ     MESC
0A:FD3C C9FF            	  2003:             CMP     #$FF        ; BREAK?
0A:FD3E D002            	  2004:             BNE     *+4
0A:FD40 A983            	  2005:             LDA     #$83        ; YES, REPLACE WITH CTRL-C
0A:FD42 60              	  2006:             RTS
                        	  2007: ;
                        	  2008: ;; Check for the presence of a disk controller at either $C600 or $C500.
                        	  2009: ;
0A:FD43 AD07C6          	  2010: CHKDIS      LDA     $C607       ; CHECK DISK CONTROLLER
0A:FD46 C93C            	  2011:             CMP     #$3C
0A:FD48 D00A            	  2012:             BNE     CHKDI1      ; IF NO, RETURN
0A:FD4A AD03C6          	  2013:             LDA     $C603
0A:FD4D D005            	  2014:             BNE     CHKDI1
0A:FD4F 68              	  2015:             PLA                 ; IF THERE IS, BOOT DISK
0A:FD50 68              	  2016:             PLA
0A:FD51 4C00C6          	  2017:             JMP     $C600
0A:FD54 AD07C5          	  2018: CHKDI1      LDA     $C507       ;; Check for a disk controller at $C500 instead.
0A:FD57 C93C            	  2019:             CMP     #$3C
0A:FD59 D00A            	  2020:             BNE     CHKDRT
0A:FD5B AD03C5          	  2021:             LDA     $C503
0A:FD5E D005            	  2022:             BNE     CHKDRT
0A:FD60 68              	  2023:             PLA
0A:FD61 68              	  2024:             PLA
0A:FD62 4C00C5          	  2025:             JMP     $C500
0A:FD65 60              	  2026: CHKDRT      RTS
                        	  2027: ;
0A:FD66 60              	  2028:             RTS                 ;; Padding
                        	  2029: ;
                        	  2030: ;; Get a line of input text, terminated by CR.
                        	  2031: ;
0A:FD67 20C5FE          	  2032: MGETLZ      JSR     CROUT
0A:FD6A A533            	  2033: MGETLN      LDA     PROMPT      ; DISPLAY PROMPT SIGN
0A:FD6C 20EDFD          	  2034:             JSR     MCOUT
0A:FD6F A200            	  2035:             LDX     #0          ; SET UP CHARACTER COUNTER
0A:FD71 2035FD          	  2036: GETLN1      JSR     MRDCHR      ; READ A CHARACTER
0A:FD74 C998            	  2037:             CMP     #$98        ; CTRL-X?
0A:FD76 F041            	  2038:             BEQ     CANCEL      ; IF YES, CANCEL THE LINE
0A:FD78 C989            	  2039:             CMP     #$89        ; TAB?
0A:FD7A D003            	  2040:             BNE     *+5
0A:FD7C 4CCAF9          	  2041:             JMP     TAB         ; YES
0A:FD7F C995            	  2042:             CMP     #$95        ; RIGHT ARROW?
0A:FD81 D005            	  2043:             BNE     NRIGHT
0A:FD83 ADFB06          	  2044:             LDA     TEMPA       ; IF YES, PICK UP THE CHARACTER UNDER CURSOR
0A:FD86 0980            	  2045:             ORA     #$80        ; ENSURE MSB=1
0A:FD88 9D0002          	  2046: NRIGHT      STA     KEYBUF,X
                        	  2047: ;
0A:FD8B 4C91FD          	  2048:             JMP     *+6         ;; Skip the next instruction (padding?)
0A:FD8E 4CC5FE          	  2049:             JMP     CROUT
                        	  2050: ;
0A:FD91 C988            	  2051:             CMP     #$88        ; LEFT ARROW?
0A:FD93 D006            	  2052:             BNE     NOLEFT
0A:FD95 CA              	  2053:             DEX                 ; YES, BACK SPACE
0A:FD96 CA              	  2054:             DEX
0A:FD97 E0FE            	  2055:             CPX     #$FE        ; BACK TOO MUCH?
0A:FD99 F0CC            	  2056:             BEQ     MGETLZ
0A:FD9B C98D            	  2057: NOLEFT      CMP     #$8D        ; CARRIAGE RETURN
0A:FD9D D00B            	  2058:             BNE     NOTCR
0A:FD9F 20E6FD          	  2059:             JSR     C800IN
0A:FDA2 48              	  2060:             PHA                 ; IF YES, CLEAR TO END OF LINE
0A:FDA3 2097CA          	  2061:             JSR     CLREOL
0A:FDA6 68              	  2062:             PLA
0A:FDA7 4CEDFD          	  2063:             JMP     MCOUT       ; END OF GET-LINE!
0A:FDAA 20EDFD          	  2064: NOTCR       JSR     MCOUT       ; PRINT CHARCTER ON SCREEN
0A:FDAD E8              	  2065:             INX                 ; NEXT CHARACTER
0A:FDAE E0F9            	  2066:             CPX     #249        ; EAT TOO MUCH?
0A:FDB0 90BF            	  2067:             BLT     GETLN1
0A:FDB2 203AFF          	  2068:             JSR     MBELL       ; TAKE CARE OF HEALTH
0A:FDB5 E0FF            	  2069:             CPX     #255
0A:FDB7 D0B8            	  2070:             BNE     GETLN1
0A:FDB9 A9AF            	  2071: CANCEL      LDA     #$AF        ; DANGER, PRINT '/' AND
0A:FDBB 20EDFD          	  2072:             JSR     MCOUT       ; STOP IMMEDIATELY
0A:FDBE 4C67FD          	  2073:             JMP     MGETLZ
                        	  2074: ;
                        	  2075: ;; Print a hexadecimal byte from the kernel monitor.
                        	  2076: ;
0A:FDC1 854E            	  2077: PRBYTE      STA     RNDNOL      ; SAVE A FIRST
0A:FDC3 4A              	  2078:             LSR
0A:FDC4 4A              	  2079:             LSR
0A:FDC5 4A              	  2080:             LSR
0A:FDC6 4A              	  2081:             LSR
0A:FDC7 20B9FE          	  2082:             JSR     PRNHEX      ; PRINT HIGH NIBBLE
0A:FDCA A54E            	  2083:             LDA     RNDNOL      ; RESUME A
0A:FDCC 290F            	  2084:             AND     #$0F
0A:FDCE 4CB9FE          	  2085:             JMP     PRNHEX      ; PRINT LOW NIBBLE
                        	  2086: ;
0A:FDD1 60              	  2087:             DS      9, $60      ;; Padding
0A:FDD2 *
                        	  2088: ;
                        	  2089:             ORIGIN  $FDDA
                        	     1M                 ORG     $FDDA
0B:FDDA 4CC1FD          	  2090: MPRBYTE     JMP     PRBYTE
                        	  2091: ;
0B:FDDD 60              	  2092:             DS      6, $60      ;; Padding
0B:FDDE *
                        	  2093: ;
0B:FDE3 4CB9FE          	  2094: MPRNHEX     JMP     PRNHEX
                        	  2095: ;
                        	  2096: ;; C800IN assigns the 80 column display firmware to address $C800.
                        	  2097: ;
                        	  2098: ; ROUTINE 'C800IN' MST BE CALLED FIRST BEFORE ANY
                        	  2099: ; ROUTINE IN C8 IS CALLED
                        	  2100: ;
0B:FDE6 8DFFCF          	  2101: C800IN      STA     ROMCLR      ; WE WANT "SLOT 3"'s C8
0B:FDE9 8D00C3          	  2102:             STA     $C300
0B:FDEC 60              	  2103:             RTS
                        	  2104: ;
                        	  2105: ;; Output a character to the current output device.
                        	  2106: ;
0B:FDED 6C3600          	  2107: MCOUT       JMP     (OUTSWL)
                        	  2108: ;
                        	  2109: ;; Output a character to the screen.
                        	  2110: ;
0B:FDF0 20E6FD          	  2111: MCOUT1      JSR     C800IN      ; EVERYTHING IS IN C8
0B:FDF3 48              	  2112:             PHA                 ; SAVE CHARACTER FIRST
0B:FDF4 8435            	  2113:             STY     SAVEY       ; SAVE Y
0B:FDF6 29FF            	  2114:             AND     #$FF        ; GET N FLAG
0B:FDF8 1006            	  2115:             BPL     MCOUT5      ; FOR CHARACTERS WITH MSB=0
0B:FDFA C9A0            	  2116:             CMP     #$A0        ; CONTROL CHARACTER?
0B:FDFC 9008            	  2117:             BLT     MCOUT2
0B:FDFE 2532            	  2118:             AND     INVFLG      ;; Apply normal, inverse, or blinking mod.
0B:FE00 2018CA          	  2119: MCOUT5      JSR     STORAD      ;; Display character and advance the cursor
0B:FE03 4C14FE          	  2120:             JMP     MCOUT3
                        	  2121: ;
0B:FE06 297F            	  2122: MCOUT2      AND     #$7F        ; DO THIS FOR CONTROL CHAR.
0B:FE08 C90D            	  2123:             CMP     #$0D        ; CARRIAGE RETURN?
0B:FE0A D005            	  2124:             BNE     MCOUT4
0B:FE0C 2001CA          	  2125:             JSR     VIDOU1
0B:FE0F A90A            	  2126:             LDA     #$0A        ; YES, ADD A LINE-FEED
0B:FE11 2001CA          	  2127: MCOUT4      JSR     VIDOU1
0B:FE14 68              	  2128: MCOUT3      PLA                 ; NOW, RESUME CHARACTER
0B:FE15 A435            	  2129:             LDY     SAVEY
0B:FE17 60              	  2130:             RTS
                        	  2131: ;
                        	  2132: ;; Write a byte to the cassette tape.
                        	  2133: ;
0B:FE18 A210            	  2134: WRBYTE      LDX     #16         ; 2 * 8 = 16
0B:FE1A 0A              	  2135: WBYTE1      ASL
0B:FE1B 200DF9          	  2136:             JSR     WRTBIT
0B:FE1E D0FA            	  2137:             BNE     WBYTE1
0B:FE20 60              	  2138:             RTS
                        	  2139: ;
0B:FE21 60              	  2140:             DS      11, $60     ;; Padding
0B:FE22 *
                        	  2141: ;
                        	  2142: ;; Move memory command in the kernel monitor.
                        	  2143: ;
                        	  2144: ; BEFORE ENTERING, PLEASE SET Y=0
                        	  2145: ;
0B:FE2C B13C            	  2146: MOVE        LDA     (REG1L),Y
0B:FE2E 9142            	  2147:             STA     (REG4L),Y
0B:FE30 207FFC          	  2148:             JSR     INCRE1
0B:FE33 90F7            	  2149:             BLT     MOVE        ; FINISHED YET?
0B:FE35 60              	  2150:             RTS
                        	  2151: ;
0B:FE36 4C8AF9          	  2152:             JMP     VERIFY
                        	  2153: ;
                        	  2154: ;; Set the character output routine to use the screen.
                        	  2155: ;
0B:FE39 A9FD            	  2156: SCREEN      LDA     #>MCOUT1
0B:FE3B A0F0            	  2157:             LDY     #<MCOUT1
0B:FE3D 8537            	  2158:             STA     OUTSWH
0B:FE3F 8436            	  2159:             STY     OUTSWL
0B:FE41 60              	  2160:             RTS
                        	  2161: ;
                        	  2162: ;; Set the character input routine to use the keyboard.
                        	  2163: ;
0B:FE42 A9FD            	  2164: KBDBRD      LDA     #>MINKEY
0B:FE44 A01B            	  2165:             LDY     #<MINKEY
0B:FE46 8539            	  2166:             STA     INSWH
0B:FE48 8438            	  2167:             STY     INSWL
0B:FE4A 60              	  2168: KBDRTS      RTS
                        	  2169: ;
                        	  2170: ;; Examine memory command in the kernel monitor.
                        	  2171: ;
                        	  2172: ; PRINT THE ADDRESS AND ITS CONTENTS
                        	  2173: ;
0B:FE4B A634            	  2174: MEMXM       LDX     SAVEX       ; CHECK LAST KEY
0B:FE4D F0FB            	  2175:             BEQ     KBDRTS      ; DO NOTHING IF THE FIRST KEY IS A SPACE
0B:FE4F CA              	  2176:             DEX
0B:FE50 BD0002          	  2177:             LDA     KEYBUF, X
0B:FE53 49B0            	  2178:             EOR     #$B0        ; A HEXADECIMAL DIGIT?
0B:FE55 C90A            	  2179:             CMP     #$0A
0B:FE57 9006            	  2180:             BLT     MEMXM1      ; IF YES, EXAMINE MEMORY CONTENTS
0B:FE59 6988            	  2181:             ADC     #$88
0B:FE5B C9FA            	  2182:             CMP     #$FA
0B:FE5D 90EB            	  2183:             BLT     KBDRTS      ; IF NO, EXIT
0B:FE5F A53F            	  2184: MEMXM1      LDA     REG2H       ;; Print the address we are examining
0B:FE61 20C1FD          	  2185:             JSR     PRBYTE
0B:FE64 A53E            	  2186:             LDA     REG2L
0B:FE66 20C1FD          	  2187:             JSR     PRBYTE
0B:FE69 A9BD            	  2188:             LDA     #$BD        ;; Print "="
0B:FE6B 20EDFD          	  2189:             JSR     MCOUT
0B:FE6E A9A0            	  2190:             LDA     #$A0        ;; Print " "
0B:FE70 20EDFD          	  2191:             JSR     MCOUT
0B:FE73 A000            	  2192:             LDY     #0
0B:FE75 B13E            	  2193:             LDA     (REG2L),Y   ;; Print the byte at the memory address
0B:FE77 20C1FD          	  2194:             JSR     PRBYTE
0B:FE7A 4CC5FE          	  2195:             JMP     CROUT
                        	  2196: ;
0B:FE7D 60              	  2197:             DS      3, $60      ;; Padding
0B:FE7E *
                        	  2198: ;
                        	  2199: ;; Set inverse text mode.
                        	  2200: ;
0B:FE80 A93F            	  2201: SETINV      LDA     #$3F        ; TURN ON INVERSE MODE
0B:FE82 EA              	  2202:             NOP                 ; FILL SPACE
0B:FE83 2C              	  2203:             DB      $2C         ; $2C = "BIT" ;; skips the next instruction
0B:FE84 A9FF            	  2204: SETNOR      LDA     #$FF        ; NORMAL VIDEO MODE
0B:FE86 8532            	  2205:             STA     INVFLG
0B:FE88 60              	  2206:             RTS
                        	  2207: ;
                        	  2208: ;; Set the input device in the kernel monitor.
                        	  2209: ;;
                        	  2210: ;; If the value in REG2L is zero, then redirect input to the keyboard.
                        	  2211: ;; Otherwise redirect the input handler to $CN00 where N is 1-7.
                        	  2212: ;
0B:FE89 A900            	  2213: SETCIN      LDA     #$00
0B:FE8B 853E            	  2214: INPOT       STA     REG2L
0B:FE8D 4CA6FE          	  2215: SETIN       JMP     INPUT
0B:FE90 60              	  2216:             RTS
0B:FE91 60              	  2217:             RTS                 ;; Padding
0B:FE92 60              	  2218:             RTS                 ;; Padding
                        	  2219: ;
                        	  2220: ;; Set the output device in the kernel monitor.
                        	  2221: ;;
                        	  2222: ;; If the value in REG2L is zero, then redirect output to the screen.
                        	  2223: ;; Otherwise redirect the output handler to $CN00 where N is 1-7.
                        	  2224: ;
0B:FE93 A900            	  2225: SETCOU      LDA     #$00
0B:FE95 853E            	  2226: OUTPOT      STA     REG2L
0B:FE97 A53E            	  2227: SETOU       LDA     REG2L
0B:FE99 F09E            	  2228:             BEQ     SCREEN
0B:FE9B 2907            	  2229:             AND     #$07
0B:FE9D 09C0            	  2230:             ORA     #$C0
0B:FE9F 8537            	  2231:             STA     OUTSWH
0B:FEA1 A000            	  2232:             LDY     #$00
0B:FEA3 8436            	  2233:             STY     OUTSWL
0B:FEA5 60              	  2234:             RTS
                        	  2235: ;
                        	  2236: ;
0B:FEA6 A53E            	  2237: INPUT       LDA     REG2L
0B:FEA8 F098            	  2238:             BEQ     KBDBRD
0B:FEAA 2907            	  2239:             AND     #$07
0B:FEAC 09C0            	  2240:             ORA     #$C0
0B:FEAE 8539            	  2241:             STA     INSWH
0B:FEB0 A000            	  2242:             LDY     #$00
0B:FEB2 8438            	  2243:             STY     INSWL
0B:FEB4 60              	  2244:             RTS
0B:FEB5 60              	  2245:             RTS                 ;; Padding
                        	  2246: ;
                        	  2247: ;
0B:FEB6 4CD0FE          	  2248:             JMP     GO
                        	  2249: ;
                        	  2250: ;; Prints the hexadecimal digit in A.
                        	  2251: ;
0B:FEB9 C90A            	  2252: PRNHEX      CMP     #10
0B:FEBB 9003            	  2253:             BLT     PRNHE1      ; 0 TO 9?
0B:FEBD 18              	  2254:             CLC
0B:FEBE 6907            	  2255:             ADC     #7          ; FOR A TO F
0B:FEC0 69B0            	  2256: PRNHE1      ADC     #$B0        ; FROM NO. TO CHAR.
0B:FEC2 4CEDFD          	  2257:             JMP     MCOUT       ; PRINT IT!
                        	  2258: ;
                        	  2259: ;; Print a carriage return.
                        	  2260: ;
0B:FEC5 A98D            	  2261: CROUT       LDA     #$8D
0B:FEC7 4CEDFD          	  2262:             JMP     MCOUT
                        	  2263: ;
0B:FECA 60              	  2264:             DS      3, $60      ;; Padding
0B:FECB *
                        	  2265: ;
0B:FECD 4CB5F8          	  2266:             JMP     MTSAVE
                        	  2267: ;
                        	  2268: ;; "GO" command in the kernel monitor.
                        	  2269: ;
0B:FED0 203FFF          	  2270: GO          JSR     GETBRG      ; RESUME REGISTER CONTENTS
0B:FED3 A53E            	  2271:             LDA     REG2L       ; DESTINATION
0B:FED5 853A            	  2272:             STA     PCL
0B:FED7 A53F            	  2273:             LDA     REG2H
0B:FED9 853B            	  2274:             STA     PCH
0B:FEDB 6C3A00          	  2275:             JMP     (PCL)       ; FLY!
                        	  2276: ;
                        	  2277: ;; Print the "ERROR" message for the kernel monitor.
                        	  2278: ;
0B:FEDE 8A              	  2279: ERROR       TXA                 ; SAVE X
0B:FEDF 48              	  2280:             PHA
0B:FEE0 A200            	  2281:             LDX     #0          ; THEN USE X AS COUNTER
0B:FEE2 BD83F8          	  2282: ERROR1      LDA     ERRORM,X    ; PRINT 'ERROR '
0B:FEE5 20EDFD          	  2283:             JSR     MCOUT
0B:FEE8 E8              	  2284:             INX
0B:FEE9 E006            	  2285:             CPX     #6
0B:FEEB D0F5            	  2286:             BNE     ERROR1
0B:FEED 68              	  2287:             PLA
0B:FEEE AA              	  2288:             TAX
0B:FEEF 4C3AFF          	  2289:             JMP     MBELL       ; FOLLOWS WITH A BEEP
                        	  2290: ;
0B:FEF2 60              	  2291:             DS      11, $60     ;; Padding
0B:FEF3 *
                        	  2292: ;
                        	  2293: ;; Load from cassette tape.
                        	  2294: ;
                        	  2295:             ORIGIN  $FEFD
                        	     1M                 ORG     $FEFD
0C:FEFD 2065F9          	  2296: TLOAD       JSR     READPS      ; FIND LEADING SIGNAL
0C:FF00 20C9FC          	  2297:             JSR     HDELAY      ; BY PASS THE HEADER
0C:FF03 2065F9          	  2298:             JSR     READPS      ; FIND SIGNAL AGAIN
0C:FF06 2038FC          	  2299:             JSR     FNDSTB      ; FIND STARTING BIT
0C:FF09 2068F9          	  2300:             JSR     RT1BIT
0C:FF0C A039            	  2301:             LDY     #57         ; READ FIRST BYTE IN
0C:FF0E 2056F9          	  2302: TLOAD1      JSR     RT8BIT
0C:FF11 813C            	  2303:             STA     (REG1L,X)
0C:FF13 452E            	  2304:             EOR     CHKSUM      ; UPDATE CHECK-SUM
0C:FF15 852E            	  2305:             STA     CHKSUM
0C:FF17 2085FC          	  2306:             JSR     INCRE2      ; END OF TAPE READ?
0C:FF1A A033            	  2307:             LDY     #51         ; FOR THE REST BYTES
0C:FF1C 90F0            	  2308:             BLT     TLOAD1      ; NO, CONTINUE
0C:FF1E 2056F9          	  2309:             JSR     RT8BIT      ; READ THE LAST BYTE IN
0C:FF21 C52E            	  2310:             CMP     CHKSUM      ; THIS SHOULD BE THE CHECK-SUM
0C:FF23 F015            	  2311:             BEQ     MBELL       ; YES, CONGRATULATION!
0C:FF25 D0B7            	  2312:             BNE     ERROR
                        	  2313: ;
0C:FF27 60              	  2314:             DS      6, $60      ;; Padding
0C:FF28 *
                        	  2315: ;
0C:FF2D 4CDEFE          	  2316:             JMP     ERROR
                        	  2317: ;
0C:FF30 60              	  2318:             DS      10, $60     ;; Padding
0C:FF31 *
                        	  2319: ;
                        	  2320: ;; Ring the terminal bell.
                        	  2321: ;
0C:FF3A A987            	  2322: MBELL       LDA     #$87        ; CTRL-G
0C:FF3C 4CEDFD          	  2323:             JMP     MCOUT
                        	  2324: ;
                        	  2325: ;; Restore register contents ready to jump into code from the kernel monitor.
                        	  2326: ;
0C:FF3F A646            	  2327: GETBRG      LDX     REGX
0C:FF41 A447            	  2328:             LDY     REGY
0C:FF43 A548            	  2329:             LDA     STATUS
0C:FF45 48              	  2330:             PHA
0C:FF46 A545            	  2331:             LDA     ACC
0C:FF48 28              	  2332:             PLP
0C:FF49 60              	  2333:             RTS
                        	  2334: ;
                        	  2335: ;; Save register contents prior to entering the kernel monitor.
                        	  2336: ;
0C:FF4A 8646            	  2337: SAVE        STX     REGX        ; SAVE ALL REGISTERS
0C:FF4C 8447            	  2338:             STY     REGY
0C:FF4E 8545            	  2339:             STA     ACC
0C:FF50 08              	  2340:             PHP
0C:FF51 68              	  2341:             PLA
0C:FF52 8548            	  2342:             STA     STATUS
0C:FF54 BA              	  2343:             TSX
0C:FF55 8649            	  2344:             STX     STACKP
0C:FF57 D8              	  2345:             CLD
0C:FF58 60              	  2346:             RTS
                        	  2347: ;
                        	  2348: ;; Entry point for the kernel monitor.
                        	  2349: ;
0C:FF59 4C65FF          	  2350: MONENT      JMP     MON
0C:FF5C 60              	  2351:             DS      9, $60      ; FILL SPACE
0C:FF5D *
                        	  2352: ;
0C:FF65 203AFF          	  2353: MON         JSR     MBELL       ; BEEP!
0C:FF68 EA              	  2354:             NOP
0C:FF69 A9AA            	  2355: MON1        LDA     #$AA        ; KERNEL PROMPT SIGN IS '*'
0C:FF6B 8533            	  2356:             STA     PROMPT
0C:FF6D 2067FD          	  2357:             JSR     MGETLZ      ; GET A LINE
0C:FF70 A200            	  2358:             LDX     #0          ; CLEAR A REGISTER FIRST
0C:FF72 CA              	  2359:             DEX
0C:FF73 20A7FF          	  2360: MON2        JSR     GETNUM      ; GET A NO. INTO REG2
0C:FF76 208FFF          	  2361:             JSR     SEARCH      ; GET A NON-NUMBER; IS IT A COMMAND?
0C:FF79 90EA            	  2362:             BCC     MON         ; NO, INFORM THE USER
0C:FF7B 8634            	  2363:             STX     SAVEX       ; STORE X FIRST
0C:FF7D A200            	  2364:             LDX     #$00        ; SUBROUTINES LIKE THIS
0C:FF7F C010            	  2365:             CPY     #16         ; SPACE OR RETURN?
0C:FF81 B004            	  2366:             BGE     READY       ; IF YES, SKIP
0C:FF83 A900            	  2367:             LDA     #$00        ; FOR OTHERS, CLEAR FLAG
0C:FF85 8531            	  2368:             STA     STOFLG
0C:FF87 20D6FF          	  2369: READY       JSR     GOSUB       ; GOTO THE ROUTINE
0C:FF8A A634            	  2370:             LDX     SAVEX       ; RESUME X
0C:FF8C 4C73FF          	  2371:             JMP     MON2
                        	  2372: ;
                        	  2373: ;; Search for a kernel monitor command in COMTBL.
                        	  2374: ;
0C:FF8F A011            	  2375: SEARCH      LDY     #ADRTBL-COMTBL ; SET UP POINTER
0C:FF91 D987FA          	  2376: SEARC1      CMP     COMTBL-1,Y
0C:FF94 D001            	  2377:             BNE     SEARC2
0C:FF96 60              	  2378:             RTS
0C:FF97 88              	  2379: SEARC2      DEY                 ; UPDATE POINTER
0C:FF98 D0F7            	  2380:             BNE     SEARC1      ; END OF TABLE?
0C:FF9A 18              	  2381:             CLC                 ; SET UP CARRY FLAG
0C:FF9B 60              	  2382:             RTS
                        	  2383: ;
0C:FF9C 60              	  2384:             DS      11, $60     ;; Padding
0C:FF9D *
                        	  2385: ;
                        	  2386: ;; Get a hexadecimal number from the kernel monitor's input line.
                        	  2387: ;
                        	  2388:             ORIGIN  $FFA7
                        	     1M                 ORG     $FFA7
0D:FFA7 A900            	  2389: GETNUM      LDA     #$00
0D:FFA9 853E            	  2390:             STA     REG2L
0D:FFAB 853F            	  2391:             STA     REG2H
0D:FFAD E8              	  2392: GETNU1      INX                 ; UPDATE POINTER
0D:FFAE BD0002          	  2393:             LDA     KEYBUF,X    ; GET CHARACTER
0D:FFB1 C9B0            	  2394:             CMP     #$B0        ; IS IT A HEX NO.?
0D:FFB3 9020            	  2395:             BLT     NONNUM
0D:FFB5 C9C7            	  2396:             CMP     #$C7
0D:FFB7 B01C            	  2397:             BGE     NONNUM
0D:FFB9 C9BA            	  2398:             CMP     #$BA
0D:FFBB 9006            	  2399:             BLT     HEXNUM
0D:FFBD E907            	  2400:             SBC     #7          ; A SHOULD FOLLOW 9
0D:FFBF C9BA            	  2401:             CMP     #$BA
0D:FFC1 9012            	  2402:             BLT     NONNUM      ; BE CAREFUL! ':' NOW BECOMES 3
0D:FFC3 A004            	  2403: HEXNUM      LDY     #4          ; SET UP COUNTER
0D:FFC5 49B0            	  2404:             EOR     #$B0        ; TICK OUT THE HIGH BITS
0D:FFC7 0A              	  2405:             ASL                 ; SHIFT THIS NUMBER INTO REGISTER 2
0D:FFC8 0A              	  2406:             ASL                 ;; Move the nibble up the high bits
0D:FFC9 0A              	  2407:             ASL
0D:FFCA 0A              	  2408:             ASL
0D:FFCB 0A              	  2409: NUMSHF      ASL                 ;; Rotate the bits of the nibble into REG2
0D:FFCC 263E            	  2410:             ROL     REG2L
0D:FFCE 263F            	  2411:             ROL     REG2H
0D:FFD0 88              	  2412:             DEY                 ; SHIFT FINISHED?
0D:FFD1 D0F8            	  2413:             BNE     NUMSHF      ; NO, CONTINUE
0D:FFD3 F0D8            	  2414:             BEQ     GETNU1      ; YES, GO FOR THE NEXT
0D:FFD5 60              	  2415: NONNUM      RTS
                        	  2416: ;
                        	  2417: ;; Jump to a specific kernel monitor command handler.
                        	  2418: ;
0D:FFD6 88              	  2419: GOSUB       DEY                 ; MODIFY POINTER
0D:FFD7 98              	  2420:             TYA
0D:FFD8 0A              	  2421:             ASL
0D:FFD9 A8              	  2422:             TAY
0D:FFDA B99AFA          	  2423:             LDA     ADRTBL+1,Y  ; GET ROUTINE ADDRESS
0D:FFDD 48              	  2424:             PHA
0D:FFDE B999FA          	  2425:             LDA     ADRTBL,Y
0D:FFE1 48              	  2426:             PHA
0D:FFE2 A000            	  2427:             LDY     #0
0D:FFE4 60              	  2428:             RTS                 ; GOTO THE ROUTINE
                        	  2429: ;
0D:FFE5 60              	  2430:             DS      21, $60     ;; Padding
0D:FFE6 *
                        	  2431: ;
                        	  2432: ; INTERRUPT VECTORS
                        	  2433: ;
                        	  2434:             ORIGIN  $FFFA
                        	     1M                 ORG     $FFFA
0E:FFFA FB03            	  2435:             DW      NMIADR
0E:FFFC 62FA            	  2436:             DW      RESET
0E:FFFE 40FA            	  2437:             DW      IRQBRK
                        	  2438: 
                        	  2439:             END
                        	  2440: 


Symbols by name:
ACC                              E:0045
ADDY40                           A:CB97
ADRCAL                           A:CB41
ADRESL                           A:C989
ADRTBL                           A:FA99
ADVANC                           A:CA20
ASSIGN                           A:D581
AUDOUT                           A:FC2A
BASICC                           E:E000
BASICW                           E:E003
BASINP                           A:CC9B
BASOU1                           A:CC5A
BASOU2                           A:CC68
BASOU3                           A:CC65
BASOUT                           A:CC38
BEAUTI                           A:FB8A
BELL                             A:CA2E
BELL1                            A:CA33
BELL2                            A:CA35
BKDROP                           E:C008
BKGRND                           E:C018
BREAK                            A:FA4C
BREAK1                           A:FA65
BREAK2                           A:FA6A
BRKMES                           A:FCBD
BRKVER                           E:03F0
BS                               A:CA54
BYTE                             E:067B
C800IN                           A:FDE6
CANCEL                           A:FDB9
CHKDI1                           A:FD54
CHKDIS                           A:FD43
CHKDRT                           A:FD65
CHKSUM                           E:002E
CHOICE                           A:D5B3
CHOK                             A:CC4D
CHORZ                            E:0024
CHRDIS                           A:CB54
CHRDS1                           A:CB6A
CHWHO                            E:047B
CLEAR                            A:D5A4
CLEOL2                           A:CA9B
CLEOLZ                           A:CA99
CLEOP1                           A:CA83
CLREOL                           A:CA97
CLREOP                           A:CA7F
CLSCRN                           A:CA76
COLON                            A:FC06
COMPAT                           A:C836
COMTBL                           A:FA88
CR                               A:CA29
CRLF                             A:CAA4
CROUT                            A:FEC5
CURECH                           A:CC72
CVERT                            E:0025
CVOK                             A:CC44
CVWHO                            E:07FB
DATA07                           A:F831
DATA10                           A:FB49
DEAF                             A:FC16
DEBUG1                           A:FCF1
DECUR                            A:CBDF
DELAY                            A:D578
DELAY1                           A:D57A
DIFFER                           A:F998
DONE                             A:CC75
DONRTS                           A:CC85
DOT                              A:F828
ENCUR                            A:CBA0
ENCUR1                           A:CBB2
ENCUR3                           A:CBC2
ENTER                            A:C309
ENTRY1                           A:FBEA
ENTRY2                           A:FC48
ERROR                            A:FEDE
ERROR1                           A:FEE2
ERRORM                           A:F883
ESCHK                            A:C88A
ESCHK1                           A:C88E
ESCHK2                           A:C89E
ESCKRT                           A:C89B
ESCTB1                           A:C984
ESCTBL                           A:C97C
ESCWHO                           A:CC8D
ESCX                             A:CBF6
ESCX1                            A:CBFE
ESCX2                            A:CBEC
ESCXRT                           A:CC0C
EXAMIN                           A:FCEE
F8HOME                           A:FC58
FADRCAL                          A:FBC1
FADVANC                          A:FBF4
FBELL                            A:FBD9
FBS                              A:FC10
FCLREOL                          A:FC9C
FCLREOP                          A:FC42
FCRLF                            A:FC62
FENTRY1                          A:FBF0
FKEYPH                           E:0027
FKEYPL                           E:0026
FKFND1                           A:C8D6
FKFND2                           A:C8DA
FKFND3                           A:C8E0
FKFND4                           A:C8E6
FKFND5                           A:C8F6
FLF                              A:FC66
FMWAIT                           A:FCA8
FNDSTB                           A:FC38
FRAM0I                           A:FBC7
FRAM0O                           A:FBCD
FSTIME                           A:D5FC
FUP                              A:FC1A
GETBRG                           A:FF3F
GETLN1                           A:FD71
GETNU1                           A:FFAD
GETNUM                           A:FFA7
GO                               A:FED0
GOSUB                            A:FFD6
GOTOX                            A:C9F4
GOTOXY                           A:CA4B
GOXY                             A:C9C9
GOXY1                            A:C9CF
HDELA1                           A:FCCC
HDELAY                           A:FCC9
HEXNUM                           A:FFC3
HOME                             A:CA6B
HORZSC                           E:C1C2
HRSEXT                           E:F1BD
ICHRDIS                          A:C36E
IENCHR                           A:C377
INCRE1                           A:FC7F
INCRE2                           A:FC85
INCRE3                           A:FC91
INCREG4                          A:FCB4
INENT                            A:C305
INFKE1                           A:FBB1
INFKEY                           A:FBAA
INMED                            A:C34D
INPOT                            A:FE8B
INPUT                            A:FEA6
INSWH                            E:0039
INSWL                            E:0038
INVFLG                           E:0032
IO                               A:CC30
IORTS                            A:C30F
IRQBRK                           A:FA40
IRQVER                           E:03FE
JAUDOUT                          A:F80C
JMOUTS1                          A:F80F
JRAM0I                           A:F800
JRAM0O                           A:F803
JTEXT40                          A:F806
JTEXT80                          A:F809
KBDBRD                           A:FE42
KBDRTS                           A:FE4A
KEYBRD                           E:C000
KEYBRT                           A:C910
KEYBUF                           E:0200
KEYFLG                           E:4800
KEYHAB                           A:C870
KEYIN                            A:C84D
KEYINB                           A:C8FE
KEYINH                           A:C860
KEYSTR                           E:C010
LASTBI                           E:002F
LEADER                           A:F8F0
LENGTH                           A:F88E
LF                               A:CAA7
LOGO                             A:FABB
LOOP1                            A:FB63
LOWNIB                           A:F89C
LP8BIT                           A:F959
MBELL                            A:FF3A
MCOUT                            A:FDED
MCOUT1                           A:FDF0
MCOUT2                           A:FE06
MCOUT3                           A:FE14
MCOUT4                           A:FE11
MCOUT5                           A:FE00
MEMXM                            A:FE4B
MEMXM1                           A:FE5F
MESC                             A:FD2C
MGETLN                           A:FD6A
MGETLZ                           A:FD67
MINKEY                           A:FD1B
MODE3                            A:FB40
MON                              A:FF65
MON1                             A:FF69
MON2                             A:FF73
MONENT                           A:FF59
MOUTS1                           A:FC4E
MOVE                             A:FE2C
MPRBYTE                          A:FDDA
MPREAD                           A:FB1E
MPRNHEX                          A:FDE3
MRDCHR                           A:FD35
MRDKEY                           A:FD0C
MSETWN                           A:FB4B
MTABV                            A:FB5B
MTSAVE                           A:F8B5
MUSTR1                           A:CC28
MVTAB                            A:FC22
MWAIT                            A:FC77
MWAIT1                           A:FC6C
MWAIT2                           A:FC6D
NEWESC                           A:CC86
NMIADR                           E:03FB
NODRIV                           A:D608
NOLEFT                           A:FD9B
NONNUM                           A:FFD5
NONRST                           A:FD00
NOPICK                           A:CCB4
NORMAL                           E:F23C
NOTCR                            A:FDAA
NOTCRW                           A:CCAB
NRIGHT                           A:FD88
NUMSHF                           A:FFCB
ODD                              A:F8A5
ODDEVN                           A:F891
ODELAY                           A:F921
OPCODL                           E:002F
OPERR                            A:F889
OUTENT                           A:C307
OUTMED                           A:C34A
OUTPOT                           A:FE95
OUTSWH                           E:0037
OUTSWL                           E:0036
P3VECT                           A:FBD3
PADDL0                           E:C064
PASOUT                           A:C9AA
PBANK1                           E:00C5
PBANK2                           E:00C6
PBANK3                           E:00C7
PBANK4                           E:00C8
PCH                              E:003B
PCL                              E:003A
PDLRES                           E:C070
PDLRTS                           A:FB0B
PODRX                            A:C9F1
PODRY                            A:C9E8
POLKBD                           A:C878
POLRTS                           A:C886
POWER                            E:077B
PRBYTE                           A:FDC1
PREAD1                           A:FB02
PREAD2                           A:FB0C
PRESP3                           A:FB61
PRNAX                            A:F941
PRNHE1                           A:FEC0
PRNHEX                           A:FEB9
PRNSPC                           A:F948
PRNYX                            A:F940
PROMPT                           E:0033
PSCORT                           A:C9C6
RAM0IN                           A:CC0D
RAM0O1                           A:CC2A
RAM0OU                           A:CC17
RDKWHO                           A:CCC1
READPS                           A:F965
READPS3                          A:F979
READPS4                          A:F987
READY                            A:FF87
REG1H                            E:003D
REG1L                            E:003C
REG2H                            E:003F
REG2L                            E:003E
REG4H                            E:0043
REG4L                            E:0042
REGX                             E:0046
REGY                             E:0047
RENEW                            E:F229
RESET                            A:FA62
RESET0                           A:D571
RESET1                           A:D5CE
RESTVR                           E:03F2
RETRTS                           A:F83D
RETURN                           A:F833
RNDNOH                           E:004F
RNDNOL                           E:004E
ROAD                             A:C310
ROMCLR                           E:CFFF
RT1BIT                           A:F968
RT8BIT                           A:F956
SAVE                             A:FF4A
SAVE1                            E:0778
SAVEX                            E:0034
SAVEY                            E:0035
SBANK1                           E:C07C
SBANK2                           E:C07D
SBANK3                           E:C07E
SBANK4                           E:C07F
SBAS2H                           E:002B
SBAS2L                           E:002A
SBASH                            E:0029
SBASL                            E:0028
SCREEN                           A:FE39
SCROL0                           A:CAC1
SCROL1                           A:CACA
SCROL2                           A:CAE7
SCROL3                           A:CAF2
SCROL4                           A:CB0A
SCROL5                           A:CB16
SCROL6                           A:CB31
SCROLL                           A:CAB4
SEARC1                           A:FF91
SEARC2                           A:FF97
SEARCH                           A:FF8F
SETCIN                           A:FE89
SETCOU                           A:FE93
SETIN                            A:FE8D
SETINV                           A:FE80
SETNOR                           A:FE84
SETOU                            A:FE97
SETT40                           A:D5CB
SETTXT                           A:FB39
SETUP                            A:C801
SETW40                           A:F821
SETW48                           A:F81E
SETWND                           A:C822
SETWTH                           A:F812
SIGNAT                           A:FB4A
SONGEN                           E:C068
SONINT                           A:FBFA
SOUND1                           A:FBFC
SPACE                            A:FCDF
SPCLP                            A:F94E
SPEAKR                           E:C030
SRESTV                           A:FB6F
STACK                            E:0100
STACKP                           E:0049
STATUS                           E:0048
STOFLG                           E:0031
STORAD                           A:CA18
SUBTBL                           A:C96E
SUBY40                           A:CB8E
SYSTEM                           E:C078
TAB                              A:F9CA
TAB1                             A:F9DA
TABJMP                           A:F9F3
TABLE1                           A:F9F6
TAPEIN                           E:C060
TAPEOU                           E:C020
TEMPA                            E:06FB
TEMPX                            E:05FB
TEMPY                            E:04FB
TEXT40                           A:FB78
TEXT80                           A:FB81
TEXTCR                           E:C028
TITLE                            A:FB99
TITLE1                           A:FB9E
TITRTS                           A:FBA9
TLOAD                            A:FEFD
TLOAD1                           A:FF0E
TOGGSH                           A:CB98
TSAVE1                           A:F8C4
TST40C                           A:CB81
TUGGLE                           A:CCCA
TWOMHZ                           E:C1C5
TXTABH                           E:0068
TXTABL                           E:0067
TXTMOD                           E:057B
UP                               A:CA5E
USRADR                           E:03F8
USUAL                            A:D5BC
VERCOM                           A:F992
VERIFY                           A:F98A
VERTSC                           E:C1C3
VIDCON                           A:CA0F
VIDOU1                           A:CA01
VIDOUT                           A:C9F9
VIDRTS                           A:CA17
VIDWAI                           A:C916
VTAB                             A:CB3F
VWDONE                           A:C92C
VWLOOP                           A:C920
VZINIT                           A:FB2F
VZPAG1                           E:C054
VZSELF                           E:C056
VZTEXT                           E:C051
VZTX40                           E:C04C
VZTX80                           E:C04F
WBANK                            A:C92D
WBANK1                           A:C934
WBANK2                           A:C949
WBANK3                           A:C95A
WBYTE1                           A:FE1A
WHO                              A:C350
WNDBTM                           E:0023
WNDLFT                           E:0020
WNDTOP                           E:0022
WNDWTH                           E:0021
WRBYTE                           A:FE18
WRTBIT                           A:F90D
WTAPE                            A:F927
XMEM8                            A:F846
XMEM81                           A:F86B
ZDELAY                           A:F912

Symbols by value:
0020 WNDLFT
0021 WNDWTH
0022 WNDTOP
0023 WNDBTM
0024 CHORZ
0025 CVERT
0026 FKEYPL
0027 FKEYPH
0028 SBASL
0029 SBASH
002A SBAS2L
002B SBAS2H
002E CHKSUM
002F LASTBI
002F OPCODL
0031 STOFLG
0032 INVFLG
0033 PROMPT
0034 SAVEX
0035 SAVEY
0036 OUTSWL
0037 OUTSWH
0038 INSWL
0039 INSWH
003A PCL
003B PCH
003C REG1L
003D REG1H
003E REG2L
003F REG2H
0042 REG4L
0043 REG4H
0045 ACC
0046 REGX
0047 REGY
0048 STATUS
0049 STACKP
004E RNDNOL
004F RNDNOH
0067 TXTABL
0068 TXTABH
00C5 PBANK1
00C6 PBANK2
00C7 PBANK3
00C8 PBANK4
0100 STACK
0200 KEYBUF
03F0 BRKVER
03F2 RESTVR
03F8 USRADR
03FB NMIADR
03FE IRQVER
047B CHWHO
04FB TEMPY
057B TXTMOD
05FB TEMPX
067B BYTE
06FB TEMPA
0778 SAVE1
077B POWER
07FB CVWHO
4800 KEYFLG
C000 KEYBRD
C008 BKDROP
C010 KEYSTR
C018 BKGRND
C020 TAPEOU
C028 TEXTCR
C030 SPEAKR
C04C VZTX40
C04F VZTX80
C051 VZTEXT
C054 VZPAG1
C056 VZSELF
C060 TAPEIN
C064 PADDL0
C068 SONGEN
C070 PDLRES
C078 SYSTEM
C07C SBANK1
C07D SBANK2
C07E SBANK3
C07F SBANK4
C1C2 HORZSC
C1C3 VERTSC
C1C5 TWOMHZ
C305 INENT
C307 OUTENT
C309 ENTER
C30F IORTS
C310 ROAD
C34A OUTMED
C34D INMED
C350 WHO
C36E ICHRDIS
C377 IENCHR
C801 SETUP
C822 SETWND
C836 COMPAT
C84D KEYIN
C860 KEYINH
C870 KEYHAB
C878 POLKBD
C886 POLRTS
C88A ESCHK
C88E ESCHK1
C89B ESCKRT
C89E ESCHK2
C8D6 FKFND1
C8DA FKFND2
C8E0 FKFND3
C8E6 FKFND4
C8F6 FKFND5
C8FE KEYINB
C910 KEYBRT
C916 VIDWAI
C920 VWLOOP
C92C VWDONE
C92D WBANK
C934 WBANK1
C949 WBANK2
C95A WBANK3
C96E SUBTBL
C97C ESCTBL
C984 ESCTB1
C989 ADRESL
C9AA PASOUT
C9C6 PSCORT
C9C9 GOXY
C9CF GOXY1
C9E8 PODRY
C9F1 PODRX
C9F4 GOTOX
C9F9 VIDOUT
CA01 VIDOU1
CA0F VIDCON
CA17 VIDRTS
CA18 STORAD
CA20 ADVANC
CA29 CR
CA2E BELL
CA33 BELL1
CA35 BELL2
CA4B GOTOXY
CA54 BS
CA5E UP
CA6B HOME
CA76 CLSCRN
CA7F CLREOP
CA83 CLEOP1
CA97 CLREOL
CA99 CLEOLZ
CA9B CLEOL2
CAA4 CRLF
CAA7 LF
CAB4 SCROLL
CAC1 SCROL0
CACA SCROL1
CAE7 SCROL2
CAF2 SCROL3
CB0A SCROL4
CB16 SCROL5
CB31 SCROL6
CB3F VTAB
CB41 ADRCAL
CB54 CHRDIS
CB6A CHRDS1
CB81 TST40C
CB8E SUBY40
CB97 ADDY40
CB98 TOGGSH
CBA0 ENCUR
CBB2 ENCUR1
CBC2 ENCUR3
CBDF DECUR
CBEC ESCX2
CBF6 ESCX
CBFE ESCX1
CC0C ESCXRT
CC0D RAM0IN
CC17 RAM0OU
CC28 MUSTR1
CC2A RAM0O1
CC30 IO
CC38 BASOUT
CC44 CVOK
CC4D CHOK
CC5A BASOU1
CC65 BASOU3
CC68 BASOU2
CC72 CURECH
CC75 DONE
CC85 DONRTS
CC86 NEWESC
CC8D ESCWHO
CC9B BASINP
CCAB NOTCRW
CCB4 NOPICK
CCC1 RDKWHO
CCCA TUGGLE
CFFF ROMCLR
D571 RESET0
D578 DELAY
D57A DELAY1
D581 ASSIGN
D5A4 CLEAR
D5B3 CHOICE
D5BC USUAL
D5CB SETT40
D5CE RESET1
D5FC FSTIME
D608 NODRIV
E000 BASICC
E003 BASICW
F1BD HRSEXT
F229 RENEW
F23C NORMAL
F800 JRAM0I
F803 JRAM0O
F806 JTEXT40
F809 JTEXT80
F80C JAUDOUT
F80F JMOUTS1
F812 SETWTH
F81E SETW48
F821 SETW40
F828 DOT
F831 DATA07
F833 RETURN
F83D RETRTS
F846 XMEM8
F86B XMEM81
F883 ERRORM
F889 OPERR
F88E LENGTH
F891 ODDEVN
F89C LOWNIB
F8A5 ODD
F8B5 MTSAVE
F8C4 TSAVE1
F8F0 LEADER
F90D WRTBIT
F912 ZDELAY
F921 ODELAY
F927 WTAPE
F940 PRNYX
F941 PRNAX
F948 PRNSPC
F94E SPCLP
F956 RT8BIT
F959 LP8BIT
F965 READPS
F968 RT1BIT
F979 READPS3
F987 READPS4
F98A VERIFY
F992 VERCOM
F998 DIFFER
F9CA TAB
F9DA TAB1
F9F3 TABJMP
F9F6 TABLE1
FA40 IRQBRK
FA4C BREAK
FA62 RESET
FA65 BREAK1
FA6A BREAK2
FA88 COMTBL
FA99 ADRTBL
FABB LOGO
FB02 PREAD1
FB0B PDLRTS
FB0C PREAD2
FB1E MPREAD
FB2F VZINIT
FB39 SETTXT
FB40 MODE3
FB49 DATA10
FB4A SIGNAT
FB4B MSETWN
FB5B MTABV
FB61 PRESP3
FB63 LOOP1
FB6F SRESTV
FB78 TEXT40
FB81 TEXT80
FB8A BEAUTI
FB99 TITLE
FB9E TITLE1
FBA9 TITRTS
FBAA INFKEY
FBB1 INFKE1
FBC1 FADRCAL
FBC7 FRAM0I
FBCD FRAM0O
FBD3 P3VECT
FBD9 FBELL
FBEA ENTRY1
FBF0 FENTRY1
FBF4 FADVANC
FBFA SONINT
FBFC SOUND1
FC06 COLON
FC10 FBS
FC16 DEAF
FC1A FUP
FC22 MVTAB
FC2A AUDOUT
FC38 FNDSTB
FC42 FCLREOP
FC48 ENTRY2
FC4E MOUTS1
FC58 F8HOME
FC62 FCRLF
FC66 FLF
FC6C MWAIT1
FC6D MWAIT2
FC77 MWAIT
FC7F INCRE1
FC85 INCRE2
FC91 INCRE3
FC9C FCLREOL
FCA8 FMWAIT
FCB4 INCREG4
FCBD BRKMES
FCC9 HDELAY
FCCC HDELA1
FCDF SPACE
FCEE EXAMIN
FCF1 DEBUG1
FD00 NONRST
FD0C MRDKEY
FD1B MINKEY
FD2C MESC
FD35 MRDCHR
FD43 CHKDIS
FD54 CHKDI1
FD65 CHKDRT
FD67 MGETLZ
FD6A MGETLN
FD71 GETLN1
FD88 NRIGHT
FD9B NOLEFT
FDAA NOTCR
FDB9 CANCEL
FDC1 PRBYTE
FDDA MPRBYTE
FDE3 MPRNHEX
FDE6 C800IN
FDED MCOUT
FDF0 MCOUT1
FE00 MCOUT5
FE06 MCOUT2
FE11 MCOUT4
FE14 MCOUT3
FE18 WRBYTE
FE1A WBYTE1
FE2C MOVE
FE39 SCREEN
FE42 KBDBRD
FE4A KBDRTS
FE4B MEMXM
FE5F MEMXM1
FE80 SETINV
FE84 SETNOR
FE89 SETCIN
FE8B INPOT
FE8D SETIN
FE93 SETCOU
FE95 OUTPOT
FE97 SETOU
FEA6 INPUT
FEB9 PRNHEX
FEC0 PRNHE1
FEC5 CROUT
FED0 GO
FEDE ERROR
FEE2 ERROR1
FEFD TLOAD
FF0E TLOAD1
FF3A MBELL
FF3F GETBRG
FF4A SAVE
FF59 MONENT
FF65 MON
FF69 MON1
FF73 MON2
FF87 READY
FF8F SEARCH
FF91 SEARC1
FF97 SEARC2
FFA7 GETNUM
FFAD GETNU1
FFC3 HEXNUM
FFCB NUMSHF
FFD5 NONNUM
FFD6 GOSUB
